<?php
/**
 * Delegate
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  Bzzhh\Tzkt
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * TzKT API
 *
 * # Introduction  TzKT Explorer provides a free REST-like API and WebSocket API for accessing detailed Tezos blockchain data and helps developers build more services and applications on top of Tezos. TzKT is an open-source project, so you can easily clone and build it and use it as a self-hosted service to avoid any risks depending on third-party services.  TzKT API is available for the following Tezos networks with the following base URLs:  - Mainnet: `https://api.tzkt.io/` or `https://api.mainnet.tzkt.io/` ([view docs](https://api.tzkt.io)) - Edo2net: `https://api.edo2net.tzkt.io/` ([view docs](https://api.edo2net.tzkt.io)) - Florencenet: `https://api.florencenet.tzkt.io/` ([view docs](https://api.florencenet.tzkt.io))  We also provide a staging environment for testing newest features and pre-updating client applications before deploying to production:  - Mainnet staging: `https://staging.api.tzkt.io/` or `https://staging.api.mainnet.tzkt.io/` ([view docs](https://staging.api.tzkt.io)) - Edo2net staging: `https://staging.api.edo2net.tzkt.io/` ([view docs](https://staging.api.edo2net.tzkt.io))      Feel free to contact us if you have any questions or feature requests. Your feedback really helps us make TzKT better!  - Email: hello@baking-bad.org - Twitter: https://twitter.com/TezosBakingBad - Telegram: [tg://resolve?domain=baking_bad_chat](tg://resolve?domain=baking_bad_chat) - Slack: https://tezos-dev.slack.com/archives/CV5NX7F2L  And don't forget to star TzKT project [on GitHub](https://github.com/baking-bad/tzkt) ;)  # Terms of Use  TzKT API is free for everyone and for both commercial and non-commercial usage.  If your application or service uses the TzKT API in any forms: directly on frontend or indirectly on backend, you should mention that fact on your website or application by placing the label **\"Powered by TzKT API\"** with a direct link to [tzkt.io](https://tzkt.io).   # Rate Limits  There will be no rate limits as long as our servers can handle the load without additional infrastructure costs. However, any apparent abuse will be prevented by setting targeted rate limits.  Check out [Tezos Explorer API Best Practices](https://baking-bad.org/blog/tag/TzKT/) and in particular [how to optimize requests count](https://baking-bad.org/blog/2020/07/29/tezos-explorer-api-tzkt-how-often-to-make-requests/).  ---
 *
 * The version of the OpenAPI document: v1.5
 * Contact: hello@baking-bad.org
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.2.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Bzzhh\Tzkt\Model;
use \Bzzhh\Tzkt\ObjectSerializer;

/**
 * Delegate Class Doc Comment
 *
 * @category Class
 * @package  Bzzhh\Tzkt
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class Delegate extends Account
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Delegate';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'type' => 'string',
        'active' => 'bool',
        'alias' => 'string',
        'address' => 'string',
        'public_key' => 'string',
        'revealed' => 'bool',
        'balance' => 'int',
        'frozen_deposits' => 'int',
        'frozen_rewards' => 'int',
        'frozen_fees' => 'int',
        'counter' => 'int',
        'activation_level' => 'int',
        'activation_time' => '\DateTime',
        'deactivation_level' => 'int',
        'deactivation_time' => '\DateTime',
        'staking_balance' => 'int',
        'num_contracts' => 'int',
        'num_delegators' => 'int',
        'num_blocks' => 'int',
        'num_endorsements' => 'int',
        'num_ballots' => 'int',
        'num_proposals' => 'int',
        'num_activations' => 'int',
        'num_double_baking' => 'int',
        'num_double_endorsing' => 'int',
        'num_nonce_revelations' => 'int',
        'num_revelation_penalties' => 'int',
        'num_delegations' => 'int',
        'num_originations' => 'int',
        'num_transactions' => 'int',
        'num_reveals' => 'int',
        'num_migrations' => 'int',
        'first_activity' => 'int',
        'first_activity_time' => '\DateTime',
        'last_activity' => 'int',
        'last_activity_time' => '\DateTime',
        'contracts' => '\Bzzhh\Tzkt\Model\RelatedContract[]',
        'delegators' => '\Bzzhh\Tzkt\Model\Delegator[]',
        'operations' => '\Bzzhh\Tzkt\Model\Operation[]',
        'metadata' => 'OneOfAccountMetadata',
        'software' => 'OneOfSoftwareAlias'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'type' => null,
        'active' => null,
        'alias' => null,
        'address' => null,
        'public_key' => null,
        'revealed' => null,
        'balance' => 'int64',
        'frozen_deposits' => 'int64',
        'frozen_rewards' => 'int64',
        'frozen_fees' => 'int64',
        'counter' => 'int32',
        'activation_level' => 'int32',
        'activation_time' => 'date-time',
        'deactivation_level' => 'int32',
        'deactivation_time' => 'date-time',
        'staking_balance' => 'int64',
        'num_contracts' => 'int32',
        'num_delegators' => 'int32',
        'num_blocks' => 'int32',
        'num_endorsements' => 'int32',
        'num_ballots' => 'int32',
        'num_proposals' => 'int32',
        'num_activations' => 'int32',
        'num_double_baking' => 'int32',
        'num_double_endorsing' => 'int32',
        'num_nonce_revelations' => 'int32',
        'num_revelation_penalties' => 'int32',
        'num_delegations' => 'int32',
        'num_originations' => 'int32',
        'num_transactions' => 'int32',
        'num_reveals' => 'int32',
        'num_migrations' => 'int32',
        'first_activity' => 'int32',
        'first_activity_time' => 'date-time',
        'last_activity' => 'int32',
        'last_activity_time' => 'date-time',
        'contracts' => null,
        'delegators' => null,
        'operations' => null,
        'metadata' => null,
        'software' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes + parent::openAPITypes();
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats + parent::openAPIFormats();
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'type' => 'type',
        'active' => 'active',
        'alias' => 'alias',
        'address' => 'address',
        'public_key' => 'publicKey',
        'revealed' => 'revealed',
        'balance' => 'balance',
        'frozen_deposits' => 'frozenDeposits',
        'frozen_rewards' => 'frozenRewards',
        'frozen_fees' => 'frozenFees',
        'counter' => 'counter',
        'activation_level' => 'activationLevel',
        'activation_time' => 'activationTime',
        'deactivation_level' => 'deactivationLevel',
        'deactivation_time' => 'deactivationTime',
        'staking_balance' => 'stakingBalance',
        'num_contracts' => 'numContracts',
        'num_delegators' => 'numDelegators',
        'num_blocks' => 'numBlocks',
        'num_endorsements' => 'numEndorsements',
        'num_ballots' => 'numBallots',
        'num_proposals' => 'numProposals',
        'num_activations' => 'numActivations',
        'num_double_baking' => 'numDoubleBaking',
        'num_double_endorsing' => 'numDoubleEndorsing',
        'num_nonce_revelations' => 'numNonceRevelations',
        'num_revelation_penalties' => 'numRevelationPenalties',
        'num_delegations' => 'numDelegations',
        'num_originations' => 'numOriginations',
        'num_transactions' => 'numTransactions',
        'num_reveals' => 'numReveals',
        'num_migrations' => 'numMigrations',
        'first_activity' => 'firstActivity',
        'first_activity_time' => 'firstActivityTime',
        'last_activity' => 'lastActivity',
        'last_activity_time' => 'lastActivityTime',
        'contracts' => 'contracts',
        'delegators' => 'delegators',
        'operations' => 'operations',
        'metadata' => 'metadata',
        'software' => 'software'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'type' => 'setType',
        'active' => 'setActive',
        'alias' => 'setAlias',
        'address' => 'setAddress',
        'public_key' => 'setPublicKey',
        'revealed' => 'setRevealed',
        'balance' => 'setBalance',
        'frozen_deposits' => 'setFrozenDeposits',
        'frozen_rewards' => 'setFrozenRewards',
        'frozen_fees' => 'setFrozenFees',
        'counter' => 'setCounter',
        'activation_level' => 'setActivationLevel',
        'activation_time' => 'setActivationTime',
        'deactivation_level' => 'setDeactivationLevel',
        'deactivation_time' => 'setDeactivationTime',
        'staking_balance' => 'setStakingBalance',
        'num_contracts' => 'setNumContracts',
        'num_delegators' => 'setNumDelegators',
        'num_blocks' => 'setNumBlocks',
        'num_endorsements' => 'setNumEndorsements',
        'num_ballots' => 'setNumBallots',
        'num_proposals' => 'setNumProposals',
        'num_activations' => 'setNumActivations',
        'num_double_baking' => 'setNumDoubleBaking',
        'num_double_endorsing' => 'setNumDoubleEndorsing',
        'num_nonce_revelations' => 'setNumNonceRevelations',
        'num_revelation_penalties' => 'setNumRevelationPenalties',
        'num_delegations' => 'setNumDelegations',
        'num_originations' => 'setNumOriginations',
        'num_transactions' => 'setNumTransactions',
        'num_reveals' => 'setNumReveals',
        'num_migrations' => 'setNumMigrations',
        'first_activity' => 'setFirstActivity',
        'first_activity_time' => 'setFirstActivityTime',
        'last_activity' => 'setLastActivity',
        'last_activity_time' => 'setLastActivityTime',
        'contracts' => 'setContracts',
        'delegators' => 'setDelegators',
        'operations' => 'setOperations',
        'metadata' => 'setMetadata',
        'software' => 'setSoftware'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'type' => 'getType',
        'active' => 'getActive',
        'alias' => 'getAlias',
        'address' => 'getAddress',
        'public_key' => 'getPublicKey',
        'revealed' => 'getRevealed',
        'balance' => 'getBalance',
        'frozen_deposits' => 'getFrozenDeposits',
        'frozen_rewards' => 'getFrozenRewards',
        'frozen_fees' => 'getFrozenFees',
        'counter' => 'getCounter',
        'activation_level' => 'getActivationLevel',
        'activation_time' => 'getActivationTime',
        'deactivation_level' => 'getDeactivationLevel',
        'deactivation_time' => 'getDeactivationTime',
        'staking_balance' => 'getStakingBalance',
        'num_contracts' => 'getNumContracts',
        'num_delegators' => 'getNumDelegators',
        'num_blocks' => 'getNumBlocks',
        'num_endorsements' => 'getNumEndorsements',
        'num_ballots' => 'getNumBallots',
        'num_proposals' => 'getNumProposals',
        'num_activations' => 'getNumActivations',
        'num_double_baking' => 'getNumDoubleBaking',
        'num_double_endorsing' => 'getNumDoubleEndorsing',
        'num_nonce_revelations' => 'getNumNonceRevelations',
        'num_revelation_penalties' => 'getNumRevelationPenalties',
        'num_delegations' => 'getNumDelegations',
        'num_originations' => 'getNumOriginations',
        'num_transactions' => 'getNumTransactions',
        'num_reveals' => 'getNumReveals',
        'num_migrations' => 'getNumMigrations',
        'first_activity' => 'getFirstActivity',
        'first_activity_time' => 'getFirstActivityTime',
        'last_activity' => 'getLastActivity',
        'last_activity_time' => 'getLastActivityTime',
        'contracts' => 'getContracts',
        'delegators' => 'getDelegators',
        'operations' => 'getOperations',
        'metadata' => 'getMetadata',
        'software' => 'getSoftware'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return parent::attributeMap() + self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return parent::setters() + self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return parent::getters() + self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }



    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        parent::__construct($data);

        $this->container['type'] = $data['type'] ?? null;
        $this->container['active'] = $data['active'] ?? null;
        $this->container['alias'] = $data['alias'] ?? null;
        $this->container['address'] = $data['address'] ?? null;
        $this->container['public_key'] = $data['public_key'] ?? null;
        $this->container['revealed'] = $data['revealed'] ?? null;
        $this->container['balance'] = $data['balance'] ?? null;
        $this->container['frozen_deposits'] = $data['frozen_deposits'] ?? null;
        $this->container['frozen_rewards'] = $data['frozen_rewards'] ?? null;
        $this->container['frozen_fees'] = $data['frozen_fees'] ?? null;
        $this->container['counter'] = $data['counter'] ?? null;
        $this->container['activation_level'] = $data['activation_level'] ?? null;
        $this->container['activation_time'] = $data['activation_time'] ?? null;
        $this->container['deactivation_level'] = $data['deactivation_level'] ?? null;
        $this->container['deactivation_time'] = $data['deactivation_time'] ?? null;
        $this->container['staking_balance'] = $data['staking_balance'] ?? null;
        $this->container['num_contracts'] = $data['num_contracts'] ?? null;
        $this->container['num_delegators'] = $data['num_delegators'] ?? null;
        $this->container['num_blocks'] = $data['num_blocks'] ?? null;
        $this->container['num_endorsements'] = $data['num_endorsements'] ?? null;
        $this->container['num_ballots'] = $data['num_ballots'] ?? null;
        $this->container['num_proposals'] = $data['num_proposals'] ?? null;
        $this->container['num_activations'] = $data['num_activations'] ?? null;
        $this->container['num_double_baking'] = $data['num_double_baking'] ?? null;
        $this->container['num_double_endorsing'] = $data['num_double_endorsing'] ?? null;
        $this->container['num_nonce_revelations'] = $data['num_nonce_revelations'] ?? null;
        $this->container['num_revelation_penalties'] = $data['num_revelation_penalties'] ?? null;
        $this->container['num_delegations'] = $data['num_delegations'] ?? null;
        $this->container['num_originations'] = $data['num_originations'] ?? null;
        $this->container['num_transactions'] = $data['num_transactions'] ?? null;
        $this->container['num_reveals'] = $data['num_reveals'] ?? null;
        $this->container['num_migrations'] = $data['num_migrations'] ?? null;
        $this->container['first_activity'] = $data['first_activity'] ?? null;
        $this->container['first_activity_time'] = $data['first_activity_time'] ?? null;
        $this->container['last_activity'] = $data['last_activity'] ?? null;
        $this->container['last_activity_time'] = $data['last_activity_time'] ?? null;
        $this->container['contracts'] = $data['contracts'] ?? null;
        $this->container['delegators'] = $data['delegators'] ?? null;
        $this->container['operations'] = $data['operations'] ?? null;
        $this->container['metadata'] = $data['metadata'] ?? null;
        $this->container['software'] = $data['software'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = parent::listInvalidProperties();

        if ($this->container['type'] === null) {
            $invalidProperties[] = "'type' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type Type of the account, `delegate` - account, registered as a delegate (baker)
     *
     * @return self
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets active
     *
     * @return bool|null
     */
    public function getActive()
    {
        return $this->container['active'];
    }

    /**
     * Sets active
     *
     * @param bool|null $active Delegation status (`true` - active, `false` - deactivated)
     *
     * @return self
     */
    public function setActive($active)
    {
        $this->container['active'] = $active;

        return $this;
    }

    /**
     * Gets alias
     *
     * @return string|null
     */
    public function getAlias()
    {
        return $this->container['alias'];
    }

    /**
     * Sets alias
     *
     * @param string|null $alias Name of the baking service
     *
     * @return self
     */
    public function setAlias($alias)
    {
        $this->container['alias'] = $alias;

        return $this;
    }

    /**
     * Gets address
     *
     * @return string|null
     */
    public function getAddress()
    {
        return $this->container['address'];
    }

    /**
     * Sets address
     *
     * @param string|null $address Public key hash of the delegate (baker)
     *
     * @return self
     */
    public function setAddress($address)
    {
        $this->container['address'] = $address;

        return $this;
    }

    /**
     * Gets public_key
     *
     * @return string|null
     */
    public function getPublicKey()
    {
        return $this->container['public_key'];
    }

    /**
     * Sets public_key
     *
     * @param string|null $public_key Public key of the delegate (baker)
     *
     * @return self
     */
    public function setPublicKey($public_key)
    {
        $this->container['public_key'] = $public_key;

        return $this;
    }

    /**
     * Gets revealed
     *
     * @return bool|null
     */
    public function getRevealed()
    {
        return $this->container['revealed'];
    }

    /**
     * Sets revealed
     *
     * @param bool|null $revealed Public key revelation status. Unrevealed account can't send manager operation (transaction, origination etc.)
     *
     * @return self
     */
    public function setRevealed($revealed)
    {
        $this->container['revealed'] = $revealed;

        return $this;
    }

    /**
     * Gets balance
     *
     * @return int|null
     */
    public function getBalance()
    {
        return $this->container['balance'];
    }

    /**
     * Sets balance
     *
     * @param int|null $balance Total balance of the delegate (baker), including spendable and frozen funds (micro tez)
     *
     * @return self
     */
    public function setBalance($balance)
    {
        $this->container['balance'] = $balance;

        return $this;
    }

    /**
     * Gets frozen_deposits
     *
     * @return int|null
     */
    public function getFrozenDeposits()
    {
        return $this->container['frozen_deposits'];
    }

    /**
     * Sets frozen_deposits
     *
     * @param int|null $frozen_deposits Amount of security deposit, currently locked for baked (produced) blocks and (or) given endorsements (micro tez)
     *
     * @return self
     */
    public function setFrozenDeposits($frozen_deposits)
    {
        $this->container['frozen_deposits'] = $frozen_deposits;

        return $this;
    }

    /**
     * Gets frozen_rewards
     *
     * @return int|null
     */
    public function getFrozenRewards()
    {
        return $this->container['frozen_rewards'];
    }

    /**
     * Sets frozen_rewards
     *
     * @param int|null $frozen_rewards Amount of currently frozen baking rewards (micro tez)
     *
     * @return self
     */
    public function setFrozenRewards($frozen_rewards)
    {
        $this->container['frozen_rewards'] = $frozen_rewards;

        return $this;
    }

    /**
     * Gets frozen_fees
     *
     * @return int|null
     */
    public function getFrozenFees()
    {
        return $this->container['frozen_fees'];
    }

    /**
     * Sets frozen_fees
     *
     * @param int|null $frozen_fees Amount of currently frozen fees paid by operations inside blocks, baked (produced) by the delegate (micro tez)
     *
     * @return self
     */
    public function setFrozenFees($frozen_fees)
    {
        $this->container['frozen_fees'] = $frozen_fees;

        return $this;
    }

    /**
     * Gets counter
     *
     * @return int|null
     */
    public function getCounter()
    {
        return $this->container['counter'];
    }

    /**
     * Sets counter
     *
     * @param int|null $counter An account nonce which is used to prevent operation replay
     *
     * @return self
     */
    public function setCounter($counter)
    {
        $this->container['counter'] = $counter;

        return $this;
    }

    /**
     * Gets activation_level
     *
     * @return int|null
     */
    public function getActivationLevel()
    {
        return $this->container['activation_level'];
    }

    /**
     * Sets activation_level
     *
     * @param int|null $activation_level Block height when delegate (baker) was registered as a baker last time
     *
     * @return self
     */
    public function setActivationLevel($activation_level)
    {
        $this->container['activation_level'] = $activation_level;

        return $this;
    }

    /**
     * Gets activation_time
     *
     * @return \DateTime|null
     */
    public function getActivationTime()
    {
        return $this->container['activation_time'];
    }

    /**
     * Sets activation_time
     *
     * @param \DateTime|null $activation_time Block datetime when delegate (baker) was registered as a baker last time (ISO 8601, e.g. 2019-11-31)
     *
     * @return self
     */
    public function setActivationTime($activation_time)
    {
        $this->container['activation_time'] = $activation_time;

        return $this;
    }

    /**
     * Gets deactivation_level
     *
     * @return int|null
     */
    public function getDeactivationLevel()
    {
        return $this->container['deactivation_level'];
    }

    /**
     * Sets deactivation_level
     *
     * @param int|null $deactivation_level Block height when delegate (baker) was deactivated as a baker because of lack of funds or inactivity
     *
     * @return self
     */
    public function setDeactivationLevel($deactivation_level)
    {
        $this->container['deactivation_level'] = $deactivation_level;

        return $this;
    }

    /**
     * Gets deactivation_time
     *
     * @return \DateTime|null
     */
    public function getDeactivationTime()
    {
        return $this->container['deactivation_time'];
    }

    /**
     * Sets deactivation_time
     *
     * @param \DateTime|null $deactivation_time Block datetime when delegate (baker) was deactivated as a baker because of lack of funds or inactivity (ISO 8601, e.g. 2019-11-31)
     *
     * @return self
     */
    public function setDeactivationTime($deactivation_time)
    {
        $this->container['deactivation_time'] = $deactivation_time;

        return $this;
    }

    /**
     * Gets staking_balance
     *
     * @return int|null
     */
    public function getStakingBalance()
    {
        return $this->container['staking_balance'];
    }

    /**
     * Sets staking_balance
     *
     * @param int|null $staking_balance Sum of delegate (baker) balance and delegated funds minus frozen rewards (micro tez)
     *
     * @return self
     */
    public function setStakingBalance($staking_balance)
    {
        $this->container['staking_balance'] = $staking_balance;

        return $this;
    }

    /**
     * Gets num_contracts
     *
     * @return int|null
     */
    public function getNumContracts()
    {
        return $this->container['num_contracts'];
    }

    /**
     * Sets num_contracts
     *
     * @param int|null $num_contracts Number of contracts, created (originated) and/or managed by the delegate (baker)
     *
     * @return self
     */
    public function setNumContracts($num_contracts)
    {
        $this->container['num_contracts'] = $num_contracts;

        return $this;
    }

    /**
     * Gets num_delegators
     *
     * @return int|null
     */
    public function getNumDelegators()
    {
        return $this->container['num_delegators'];
    }

    /**
     * Sets num_delegators
     *
     * @param int|null $num_delegators Number of current delegators (accounts, delegated their funds) of the delegate (baker)
     *
     * @return self
     */
    public function setNumDelegators($num_delegators)
    {
        $this->container['num_delegators'] = $num_delegators;

        return $this;
    }

    /**
     * Gets num_blocks
     *
     * @return int|null
     */
    public function getNumBlocks()
    {
        return $this->container['num_blocks'];
    }

    /**
     * Sets num_blocks
     *
     * @param int|null $num_blocks Number of baked (validated) blocks all the time by the delegate (baker)
     *
     * @return self
     */
    public function setNumBlocks($num_blocks)
    {
        $this->container['num_blocks'] = $num_blocks;

        return $this;
    }

    /**
     * Gets num_endorsements
     *
     * @return int|null
     */
    public function getNumEndorsements()
    {
        return $this->container['num_endorsements'];
    }

    /**
     * Sets num_endorsements
     *
     * @param int|null $num_endorsements Number of given endorsements (approvals) by the delegate (baker)
     *
     * @return self
     */
    public function setNumEndorsements($num_endorsements)
    {
        $this->container['num_endorsements'] = $num_endorsements;

        return $this;
    }

    /**
     * Gets num_ballots
     *
     * @return int|null
     */
    public function getNumBallots()
    {
        return $this->container['num_ballots'];
    }

    /**
     * Sets num_ballots
     *
     * @param int|null $num_ballots Number of submitted by the delegate ballots during a voting period
     *
     * @return self
     */
    public function setNumBallots($num_ballots)
    {
        $this->container['num_ballots'] = $num_ballots;

        return $this;
    }

    /**
     * Gets num_proposals
     *
     * @return int|null
     */
    public function getNumProposals()
    {
        return $this->container['num_proposals'];
    }

    /**
     * Sets num_proposals
     *
     * @param int|null $num_proposals Number of submitted (upvoted) by the delegate proposals during a proposal period
     *
     * @return self
     */
    public function setNumProposals($num_proposals)
    {
        $this->container['num_proposals'] = $num_proposals;

        return $this;
    }

    /**
     * Gets num_activations
     *
     * @return int|null
     */
    public function getNumActivations()
    {
        return $this->container['num_activations'];
    }

    /**
     * Sets num_activations
     *
     * @param int|null $num_activations Number of account activation operations. Are used to activate accounts that were recommended allocations of tezos tokens for donations to the Tezos Foundation’s fundraiser
     *
     * @return self
     */
    public function setNumActivations($num_activations)
    {
        $this->container['num_activations'] = $num_activations;

        return $this;
    }

    /**
     * Gets num_double_baking
     *
     * @return int|null
     */
    public function getNumDoubleBaking()
    {
        return $this->container['num_double_baking'];
    }

    /**
     * Sets num_double_baking
     *
     * @param int|null $num_double_baking Number of double baking (baking two different blocks at the same height) evidence operations, included in blocks, baked (validated) by the delegate
     *
     * @return self
     */
    public function setNumDoubleBaking($num_double_baking)
    {
        $this->container['num_double_baking'] = $num_double_baking;

        return $this;
    }

    /**
     * Gets num_double_endorsing
     *
     * @return int|null
     */
    public function getNumDoubleEndorsing()
    {
        return $this->container['num_double_endorsing'];
    }

    /**
     * Sets num_double_endorsing
     *
     * @param int|null $num_double_endorsing Number of double endorsement (endorsing two different blocks at the same block height) evidence operations, included in blocks, baked (validated) by the delegate
     *
     * @return self
     */
    public function setNumDoubleEndorsing($num_double_endorsing)
    {
        $this->container['num_double_endorsing'] = $num_double_endorsing;

        return $this;
    }

    /**
     * Gets num_nonce_revelations
     *
     * @return int|null
     */
    public function getNumNonceRevelations()
    {
        return $this->container['num_nonce_revelations'];
    }

    /**
     * Sets num_nonce_revelations
     *
     * @param int|null $num_nonce_revelations Number of seed nonce revelation (are used by the blockchain to create randomness) operations provided by the delegate
     *
     * @return self
     */
    public function setNumNonceRevelations($num_nonce_revelations)
    {
        $this->container['num_nonce_revelations'] = $num_nonce_revelations;

        return $this;
    }

    /**
     * Gets num_revelation_penalties
     *
     * @return int|null
     */
    public function getNumRevelationPenalties()
    {
        return $this->container['num_revelation_penalties'];
    }

    /**
     * Sets num_revelation_penalties
     *
     * @param int|null $num_revelation_penalties Number of operations for all time in which rewards were lost due to unrevealed seed nonces by the delegate (synthetic type)
     *
     * @return self
     */
    public function setNumRevelationPenalties($num_revelation_penalties)
    {
        $this->container['num_revelation_penalties'] = $num_revelation_penalties;

        return $this;
    }

    /**
     * Gets num_delegations
     *
     * @return int|null
     */
    public function getNumDelegations()
    {
        return $this->container['num_delegations'];
    }

    /**
     * Sets num_delegations
     *
     * @param int|null $num_delegations Number of all delegation related operations (new delegator, left delegator, registration as a baker), related to the delegate (baker)
     *
     * @return self
     */
    public function setNumDelegations($num_delegations)
    {
        $this->container['num_delegations'] = $num_delegations;

        return $this;
    }

    /**
     * Gets num_originations
     *
     * @return int|null
     */
    public function getNumOriginations()
    {
        return $this->container['num_originations'];
    }

    /**
     * Sets num_originations
     *
     * @param int|null $num_originations Number of all origination (deployment / contract creation) operations, related to the delegate (baker)
     *
     * @return self
     */
    public function setNumOriginations($num_originations)
    {
        $this->container['num_originations'] = $num_originations;

        return $this;
    }

    /**
     * Gets num_transactions
     *
     * @return int|null
     */
    public function getNumTransactions()
    {
        return $this->container['num_transactions'];
    }

    /**
     * Sets num_transactions
     *
     * @param int|null $num_transactions Number of all transaction (tez transfer) operations, related to the delegate (baker)
     *
     * @return self
     */
    public function setNumTransactions($num_transactions)
    {
        $this->container['num_transactions'] = $num_transactions;

        return $this;
    }

    /**
     * Gets num_reveals
     *
     * @return int|null
     */
    public function getNumReveals()
    {
        return $this->container['num_reveals'];
    }

    /**
     * Sets num_reveals
     *
     * @param int|null $num_reveals Number of reveal (is used to reveal the public key associated with an account) operations of the delegate (baker)
     *
     * @return self
     */
    public function setNumReveals($num_reveals)
    {
        $this->container['num_reveals'] = $num_reveals;

        return $this;
    }

    /**
     * Gets num_migrations
     *
     * @return int|null
     */
    public function getNumMigrations()
    {
        return $this->container['num_migrations'];
    }

    /**
     * Sets num_migrations
     *
     * @param int|null $num_migrations Number of migration (result of the context (database) migration during a protocol update) operations, related to the delegate (synthetic type)
     *
     * @return self
     */
    public function setNumMigrations($num_migrations)
    {
        $this->container['num_migrations'] = $num_migrations;

        return $this;
    }

    /**
     * Gets first_activity
     *
     * @return int|null
     */
    public function getFirstActivity()
    {
        return $this->container['first_activity'];
    }

    /**
     * Sets first_activity
     *
     * @param int|null $first_activity Block height of the first operation, related to the delegate (baker)
     *
     * @return self
     */
    public function setFirstActivity($first_activity)
    {
        $this->container['first_activity'] = $first_activity;

        return $this;
    }

    /**
     * Gets first_activity_time
     *
     * @return \DateTime|null
     */
    public function getFirstActivityTime()
    {
        return $this->container['first_activity_time'];
    }

    /**
     * Sets first_activity_time
     *
     * @param \DateTime|null $first_activity_time Block datetime of the first operation, related to the delegate (ISO 8601, e.g. `2020-02-20T02:40:57Z`)
     *
     * @return self
     */
    public function setFirstActivityTime($first_activity_time)
    {
        $this->container['first_activity_time'] = $first_activity_time;

        return $this;
    }

    /**
     * Gets last_activity
     *
     * @return int|null
     */
    public function getLastActivity()
    {
        return $this->container['last_activity'];
    }

    /**
     * Sets last_activity
     *
     * @param int|null $last_activity Height of the block in which the account state was changed last time
     *
     * @return self
     */
    public function setLastActivity($last_activity)
    {
        $this->container['last_activity'] = $last_activity;

        return $this;
    }

    /**
     * Gets last_activity_time
     *
     * @return \DateTime|null
     */
    public function getLastActivityTime()
    {
        return $this->container['last_activity_time'];
    }

    /**
     * Sets last_activity_time
     *
     * @param \DateTime|null $last_activity_time Datetime of the block in which the account state was changed last time (ISO 8601, e.g. `2020-02-20T02:40:57Z`)
     *
     * @return self
     */
    public function setLastActivityTime($last_activity_time)
    {
        $this->container['last_activity_time'] = $last_activity_time;

        return $this;
    }

    /**
     * Gets contracts
     *
     * @return \Bzzhh\Tzkt\Model\RelatedContract[]|null
     */
    public function getContracts()
    {
        return $this->container['contracts'];
    }

    /**
     * Sets contracts
     *
     * @param \Bzzhh\Tzkt\Model\RelatedContract[]|null $contracts List of contracts, related (originated or managed) to the delegate (baker)
     *
     * @return self
     */
    public function setContracts($contracts)
    {
        $this->container['contracts'] = $contracts;

        return $this;
    }

    /**
     * Gets delegators
     *
     * @return \Bzzhh\Tzkt\Model\Delegator[]|null
     */
    public function getDelegators()
    {
        return $this->container['delegators'];
    }

    /**
     * Sets delegators
     *
     * @param \Bzzhh\Tzkt\Model\Delegator[]|null $delegators List of current delegators of the delegate (baker)
     *
     * @return self
     */
    public function setDelegators($delegators)
    {
        $this->container['delegators'] = $delegators;

        return $this;
    }

    /**
     * Gets operations
     *
     * @return \Bzzhh\Tzkt\Model\Operation[]|null
     */
    public function getOperations()
    {
        return $this->container['operations'];
    }

    /**
     * Sets operations
     *
     * @param \Bzzhh\Tzkt\Model\Operation[]|null $operations List of all operations (synthetic type included), related to the delegate
     *
     * @return self
     */
    public function setOperations($operations)
    {
        $this->container['operations'] = $operations;

        return $this;
    }

    /**
     * Gets metadata
     *
     * @return OneOfAccountMetadata|null
     */
    public function getMetadata()
    {
        return $this->container['metadata'];
    }

    /**
     * Sets metadata
     *
     * @param OneOfAccountMetadata|null $metadata Metadata of the delegate (alias, logo, website, contacts, etc)
     *
     * @return self
     */
    public function setMetadata($metadata)
    {
        $this->container['metadata'] = $metadata;

        return $this;
    }

    /**
     * Gets software
     *
     * @return OneOfSoftwareAlias|null
     */
    public function getSoftware()
    {
        return $this->container['software'];
    }

    /**
     * Sets software
     *
     * @param OneOfSoftwareAlias|null $software Last seen baker's software
     *
     * @return self
     */
    public function setSoftware($software)
    {
        $this->container['software'] = $software;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


