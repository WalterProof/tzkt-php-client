<?php
/**
 * State
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  Bzzhh\Tzkt
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * TzKT API
 *
 * # Introduction  TzKT Explorer provides a free REST-like API and WebSocket API for accessing detailed Tezos blockchain data and helps developers build more services and applications on top of Tezos. TzKT is an open-source project, so you can easily clone and build it and use it as a self-hosted service to avoid any risks depending on third-party services.  TzKT API is available for the following Tezos networks with the following base URLs:  - Mainnet: `https://api.tzkt.io/` or `https://api.mainnet.tzkt.io/` ([view docs](https://api.tzkt.io)) - Edo2net: `https://api.edo2net.tzkt.io/` ([view docs](https://api.edo2net.tzkt.io)) - Florencenet: `https://api.florencenet.tzkt.io/` ([view docs](https://api.florencenet.tzkt.io))  We also provide a staging environment for testing newest features and pre-updating client applications before deploying to production:  - Mainnet staging: `https://staging.api.tzkt.io/` or `https://staging.api.mainnet.tzkt.io/` ([view docs](https://staging.api.tzkt.io)) - Edo2net staging: `https://staging.api.edo2net.tzkt.io/` ([view docs](https://staging.api.edo2net.tzkt.io))      Feel free to contact us if you have any questions or feature requests. Your feedback really helps us make TzKT better!  - Email: hello@baking-bad.org - Twitter: https://twitter.com/TezosBakingBad - Telegram: [tg://resolve?domain=baking_bad_chat](tg://resolve?domain=baking_bad_chat) - Slack: https://tezos-dev.slack.com/archives/CV5NX7F2L  And don't forget to star TzKT project [on GitHub](https://github.com/baking-bad/tzkt) ;)  # Terms of Use  TzKT API is free for everyone and for both commercial and non-commercial usage.  If your application or service uses the TzKT API in any forms: directly on frontend or indirectly on backend, you should mention that fact on your website or application by placing the label **\"Powered by TzKT API\"** with a direct link to [tzkt.io](https://tzkt.io).   # Rate Limits  There will be no rate limits as long as our servers can handle the load without additional infrastructure costs. However, any apparent abuse will be prevented by setting targeted rate limits.  Check out [Tezos Explorer API Best Practices](https://baking-bad.org/blog/tag/TzKT/) and in particular [how to optimize requests count](https://baking-bad.org/blog/2020/07/29/tezos-explorer-api-tzkt-how-often-to-make-requests/).  ---
 *
 * The version of the OpenAPI document: v1.5
 * Contact: hello@baking-bad.org
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.2.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Bzzhh\Tzkt\Model;

use \ArrayAccess;
use \Bzzhh\Tzkt\ObjectSerializer;

/**
 * State Class Doc Comment
 *
 * @category Class
 * @package  Bzzhh\Tzkt
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class State implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'State';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'cycle' => 'int',
        'level' => 'int',
        'hash' => 'string',
        'protocol' => 'string',
        'timestamp' => '\DateTime',
        'voting_epoch' => 'int',
        'voting_period' => 'int',
        'known_level' => 'int',
        'last_sync' => '\DateTime',
        'synced' => 'bool',
        'quote_level' => 'int',
        'quote_btc' => 'double',
        'quote_eur' => 'double',
        'quote_usd' => 'double',
        'quote_cny' => 'double',
        'quote_jpy' => 'double',
        'quote_krw' => 'double',
        'quote_eth' => 'double'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'cycle' => 'int32',
        'level' => 'int32',
        'hash' => null,
        'protocol' => null,
        'timestamp' => 'date-time',
        'voting_epoch' => 'int32',
        'voting_period' => 'int32',
        'known_level' => 'int32',
        'last_sync' => 'date-time',
        'synced' => null,
        'quote_level' => 'int32',
        'quote_btc' => 'double',
        'quote_eur' => 'double',
        'quote_usd' => 'double',
        'quote_cny' => 'double',
        'quote_jpy' => 'double',
        'quote_krw' => 'double',
        'quote_eth' => 'double'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'cycle' => 'cycle',
        'level' => 'level',
        'hash' => 'hash',
        'protocol' => 'protocol',
        'timestamp' => 'timestamp',
        'voting_epoch' => 'votingEpoch',
        'voting_period' => 'votingPeriod',
        'known_level' => 'knownLevel',
        'last_sync' => 'lastSync',
        'synced' => 'synced',
        'quote_level' => 'quoteLevel',
        'quote_btc' => 'quoteBtc',
        'quote_eur' => 'quoteEur',
        'quote_usd' => 'quoteUsd',
        'quote_cny' => 'quoteCny',
        'quote_jpy' => 'quoteJpy',
        'quote_krw' => 'quoteKrw',
        'quote_eth' => 'quoteEth'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'cycle' => 'setCycle',
        'level' => 'setLevel',
        'hash' => 'setHash',
        'protocol' => 'setProtocol',
        'timestamp' => 'setTimestamp',
        'voting_epoch' => 'setVotingEpoch',
        'voting_period' => 'setVotingPeriod',
        'known_level' => 'setKnownLevel',
        'last_sync' => 'setLastSync',
        'synced' => 'setSynced',
        'quote_level' => 'setQuoteLevel',
        'quote_btc' => 'setQuoteBtc',
        'quote_eur' => 'setQuoteEur',
        'quote_usd' => 'setQuoteUsd',
        'quote_cny' => 'setQuoteCny',
        'quote_jpy' => 'setQuoteJpy',
        'quote_krw' => 'setQuoteKrw',
        'quote_eth' => 'setQuoteEth'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'cycle' => 'getCycle',
        'level' => 'getLevel',
        'hash' => 'getHash',
        'protocol' => 'getProtocol',
        'timestamp' => 'getTimestamp',
        'voting_epoch' => 'getVotingEpoch',
        'voting_period' => 'getVotingPeriod',
        'known_level' => 'getKnownLevel',
        'last_sync' => 'getLastSync',
        'synced' => 'getSynced',
        'quote_level' => 'getQuoteLevel',
        'quote_btc' => 'getQuoteBtc',
        'quote_eur' => 'getQuoteEur',
        'quote_usd' => 'getQuoteUsd',
        'quote_cny' => 'getQuoteCny',
        'quote_jpy' => 'getQuoteJpy',
        'quote_krw' => 'getQuoteKrw',
        'quote_eth' => 'getQuoteEth'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['cycle'] = $data['cycle'] ?? null;
        $this->container['level'] = $data['level'] ?? null;
        $this->container['hash'] = $data['hash'] ?? null;
        $this->container['protocol'] = $data['protocol'] ?? null;
        $this->container['timestamp'] = $data['timestamp'] ?? null;
        $this->container['voting_epoch'] = $data['voting_epoch'] ?? null;
        $this->container['voting_period'] = $data['voting_period'] ?? null;
        $this->container['known_level'] = $data['known_level'] ?? null;
        $this->container['last_sync'] = $data['last_sync'] ?? null;
        $this->container['synced'] = $data['synced'] ?? null;
        $this->container['quote_level'] = $data['quote_level'] ?? null;
        $this->container['quote_btc'] = $data['quote_btc'] ?? null;
        $this->container['quote_eur'] = $data['quote_eur'] ?? null;
        $this->container['quote_usd'] = $data['quote_usd'] ?? null;
        $this->container['quote_cny'] = $data['quote_cny'] ?? null;
        $this->container['quote_jpy'] = $data['quote_jpy'] ?? null;
        $this->container['quote_krw'] = $data['quote_krw'] ?? null;
        $this->container['quote_eth'] = $data['quote_eth'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets cycle
     *
     * @return int|null
     */
    public function getCycle()
    {
        return $this->container['cycle'];
    }

    /**
     * Sets cycle
     *
     * @param int|null $cycle Current cycle
     *
     * @return self
     */
    public function setCycle($cycle)
    {
        $this->container['cycle'] = $cycle;

        return $this;
    }

    /**
     * Gets level
     *
     * @return int|null
     */
    public function getLevel()
    {
        return $this->container['level'];
    }

    /**
     * Sets level
     *
     * @param int|null $level The height of the last block from the genesis block
     *
     * @return self
     */
    public function setLevel($level)
    {
        $this->container['level'] = $level;

        return $this;
    }

    /**
     * Gets hash
     *
     * @return string|null
     */
    public function getHash()
    {
        return $this->container['hash'];
    }

    /**
     * Sets hash
     *
     * @param string|null $hash Block hash
     *
     * @return self
     */
    public function setHash($hash)
    {
        $this->container['hash'] = $hash;

        return $this;
    }

    /**
     * Gets protocol
     *
     * @return string|null
     */
    public function getProtocol()
    {
        return $this->container['protocol'];
    }

    /**
     * Sets protocol
     *
     * @param string|null $protocol Current protocol hash
     *
     * @return self
     */
    public function setProtocol($protocol)
    {
        $this->container['protocol'] = $protocol;

        return $this;
    }

    /**
     * Gets timestamp
     *
     * @return \DateTime|null
     */
    public function getTimestamp()
    {
        return $this->container['timestamp'];
    }

    /**
     * Sets timestamp
     *
     * @param \DateTime|null $timestamp The datetime at which the last block is claimed to have been created (ISO 8601, e.g. `2020-02-20T02:40:57Z`)
     *
     * @return self
     */
    public function setTimestamp($timestamp)
    {
        $this->container['timestamp'] = $timestamp;

        return $this;
    }

    /**
     * Gets voting_epoch
     *
     * @return int|null
     */
    public function getVotingEpoch()
    {
        return $this->container['voting_epoch'];
    }

    /**
     * Sets voting_epoch
     *
     * @param int|null $voting_epoch Current voring epoch index, starting from zero
     *
     * @return self
     */
    public function setVotingEpoch($voting_epoch)
    {
        $this->container['voting_epoch'] = $voting_epoch;

        return $this;
    }

    /**
     * Gets voting_period
     *
     * @return int|null
     */
    public function getVotingPeriod()
    {
        return $this->container['voting_period'];
    }

    /**
     * Sets voting_period
     *
     * @param int|null $voting_period Current voting period index, starting from zero
     *
     * @return self
     */
    public function setVotingPeriod($voting_period)
    {
        $this->container['voting_period'] = $voting_period;

        return $this;
    }

    /**
     * Gets known_level
     *
     * @return int|null
     */
    public function getKnownLevel()
    {
        return $this->container['known_level'];
    }

    /**
     * Sets known_level
     *
     * @param int|null $known_level The height of the last known block from the genesis block
     *
     * @return self
     */
    public function setKnownLevel($known_level)
    {
        $this->container['known_level'] = $known_level;

        return $this;
    }

    /**
     * Gets last_sync
     *
     * @return \DateTime|null
     */
    public function getLastSync()
    {
        return $this->container['last_sync'];
    }

    /**
     * Sets last_sync
     *
     * @param \DateTime|null $last_sync The datetime of last TzKT indexer synchronization (ISO 8601, e.g. `2020-02-20T02:40:57Z`)
     *
     * @return self
     */
    public function setLastSync($last_sync)
    {
        $this->container['last_sync'] = $last_sync;

        return $this;
    }

    /**
     * Gets synced
     *
     * @return bool|null
     */
    public function getSynced()
    {
        return $this->container['synced'];
    }

    /**
     * Sets synced
     *
     * @param bool|null $synced State of TzKT indexer synchronization
     *
     * @return self
     */
    public function setSynced($synced)
    {
        $this->container['synced'] = $synced;

        return $this;
    }

    /**
     * Gets quote_level
     *
     * @return int|null
     */
    public function getQuoteLevel()
    {
        return $this->container['quote_level'];
    }

    /**
     * Sets quote_level
     *
     * @param int|null $quote_level The height of the block where quotes were updated last time
     *
     * @return self
     */
    public function setQuoteLevel($quote_level)
    {
        $this->container['quote_level'] = $quote_level;

        return $this;
    }

    /**
     * Gets quote_btc
     *
     * @return double|null
     */
    public function getQuoteBtc()
    {
        return $this->container['quote_btc'];
    }

    /**
     * Sets quote_btc
     *
     * @param double|null $quote_btc Last known XTZ/BTC price
     *
     * @return self
     */
    public function setQuoteBtc($quote_btc)
    {
        $this->container['quote_btc'] = $quote_btc;

        return $this;
    }

    /**
     * Gets quote_eur
     *
     * @return double|null
     */
    public function getQuoteEur()
    {
        return $this->container['quote_eur'];
    }

    /**
     * Sets quote_eur
     *
     * @param double|null $quote_eur Last known XTZ/EUR price
     *
     * @return self
     */
    public function setQuoteEur($quote_eur)
    {
        $this->container['quote_eur'] = $quote_eur;

        return $this;
    }

    /**
     * Gets quote_usd
     *
     * @return double|null
     */
    public function getQuoteUsd()
    {
        return $this->container['quote_usd'];
    }

    /**
     * Sets quote_usd
     *
     * @param double|null $quote_usd Last known XTZ/USD price
     *
     * @return self
     */
    public function setQuoteUsd($quote_usd)
    {
        $this->container['quote_usd'] = $quote_usd;

        return $this;
    }

    /**
     * Gets quote_cny
     *
     * @return double|null
     */
    public function getQuoteCny()
    {
        return $this->container['quote_cny'];
    }

    /**
     * Sets quote_cny
     *
     * @param double|null $quote_cny Last known XTZ/CNY price
     *
     * @return self
     */
    public function setQuoteCny($quote_cny)
    {
        $this->container['quote_cny'] = $quote_cny;

        return $this;
    }

    /**
     * Gets quote_jpy
     *
     * @return double|null
     */
    public function getQuoteJpy()
    {
        return $this->container['quote_jpy'];
    }

    /**
     * Sets quote_jpy
     *
     * @param double|null $quote_jpy Last known XTZ/JPY price
     *
     * @return self
     */
    public function setQuoteJpy($quote_jpy)
    {
        $this->container['quote_jpy'] = $quote_jpy;

        return $this;
    }

    /**
     * Gets quote_krw
     *
     * @return double|null
     */
    public function getQuoteKrw()
    {
        return $this->container['quote_krw'];
    }

    /**
     * Sets quote_krw
     *
     * @param double|null $quote_krw Last known XTZ/KRW price
     *
     * @return self
     */
    public function setQuoteKrw($quote_krw)
    {
        $this->container['quote_krw'] = $quote_krw;

        return $this;
    }

    /**
     * Gets quote_eth
     *
     * @return double|null
     */
    public function getQuoteEth()
    {
        return $this->container['quote_eth'];
    }

    /**
     * Sets quote_eth
     *
     * @param double|null $quote_eth Last known XTZ/ETH price
     *
     * @return self
     */
    public function setQuoteEth($quote_eth)
    {
        $this->container['quote_eth'] = $quote_eth;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


