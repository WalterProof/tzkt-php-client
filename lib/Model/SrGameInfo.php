<?php
/**
 * SrGameInfo
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Bzzhh\Tzkt
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * TzKT API
 *
 * # Introduction  TzKT Explorer provides free REST API and WebSocket API for accessing detailed Tezos blockchain data and helps developers build more services and applications on top of Tezos. TzKT is an open-source project, so you can easily clone and build it and use it as a self-hosted service to avoid any risks of depending on third-party services.  TzKT API is available for the following Tezos networks with the following base URLs:   - Mainnet: `https://api.tzkt.io/` or `https://api.mainnet.tzkt.io/` ([view docs](https://api.tzkt.io))  - Ghostnet: `https://api.ghostnet.tzkt.io/` ([view docs](https://api.ghostnet.tzkt.io)) - Limanet: `https://api.limanet.tzkt.io/` ([view docs](https://api.limanet.tzkt.io)) - Mumbainet: `https://api.mumbainet.tzkt.io/` ([view docs](https://api.mumbainet.tzkt.io))  We also provide a staging environment for testing newest features and pre-updating client applications before deploying to production:  - Mainnet staging: `https://staging.api.tzkt.io/` or `https://staging.api.mainnet.tzkt.io/` ([view docs](https://staging.api.tzkt.io))  Feel free to contact us if you have any questions or feature requests. Your feedback really helps us make TzKT better!  - Discord: https://discord.gg/aG8XKuwsQd - Telegram: https://t.me/baking_bad_chat - Slack: https://tezos-dev.slack.com/archives/CV5NX7F2L - Twitter: https://twitter.com/TezosBakingBad - Email: hello@baking-bad.org  And don't forget to star TzKT project [on GitHub](https://github.com/baking-bad/tzkt) ;)  # Terms of Use  TzKT API is free for everyone and for both commercial and non-commercial usage.  If your application or service uses the TzKT API in any forms: directly on frontend or indirectly on backend, you must mention that fact on your website or application by placing the label **\"Powered by TzKT API\"** or **\"Built with TzKT API\"** with a direct link to [tzkt.io](https://tzkt.io).   # Rate Limits  There will be no rate limits as long as our servers can handle the load without additional infrastructure costs. However, any apparent abuse will be prevented by setting targeted rate limits.  Check out [Tezos Explorer API Best Practices](https://baking-bad.org/blog/tag/TzKT/) and in particular [how to optimize requests count](https://baking-bad.org/blog/2020/07/29/tezos-explorer-api-tzkt-how-often-to-make-requests/).  ---
 *
 * The version of the OpenAPI document: 1.12.0
 * Contact: hello@baking-bad.org
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.2.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Bzzhh\Tzkt\Model;

use \ArrayAccess;
use \Bzzhh\Tzkt\ObjectSerializer;

/**
 * SrGameInfo Class Doc Comment
 *
 * @category Class
 * @package  Bzzhh\Tzkt
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class SrGameInfo implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'SrGameInfo';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'int',
        'initiator' => '\Bzzhh\Tzkt\Model\SrGameInfoInitiator',
        'initiator_commitment' => '\Bzzhh\Tzkt\Model\SrGameInfoInitiatorCommitment',
        'opponent' => '\Bzzhh\Tzkt\Model\SrGameInfoOpponent',
        'opponent_commitment' => '\Bzzhh\Tzkt\Model\SrGameInfoOpponentCommitment',
        'initiator_reward' => 'int',
        'initiator_loss' => 'int',
        'opponent_reward' => 'int',
        'opponent_loss' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => 'int64',
        'initiator' => null,
        'initiator_commitment' => null,
        'opponent' => null,
        'opponent_commitment' => null,
        'initiator_reward' => 'int64',
        'initiator_loss' => 'int64',
        'opponent_reward' => 'int64',
        'opponent_loss' => 'int64'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
		'initiator' => true,
		'initiator_commitment' => true,
		'opponent' => true,
		'opponent_commitment' => true,
		'initiator_reward' => true,
		'initiator_loss' => true,
		'opponent_reward' => true,
		'opponent_loss' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'initiator' => 'initiator',
        'initiator_commitment' => 'initiatorCommitment',
        'opponent' => 'opponent',
        'opponent_commitment' => 'opponentCommitment',
        'initiator_reward' => 'initiatorReward',
        'initiator_loss' => 'initiatorLoss',
        'opponent_reward' => 'opponentReward',
        'opponent_loss' => 'opponentLoss'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'initiator' => 'setInitiator',
        'initiator_commitment' => 'setInitiatorCommitment',
        'opponent' => 'setOpponent',
        'opponent_commitment' => 'setOpponentCommitment',
        'initiator_reward' => 'setInitiatorReward',
        'initiator_loss' => 'setInitiatorLoss',
        'opponent_reward' => 'setOpponentReward',
        'opponent_loss' => 'setOpponentLoss'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'initiator' => 'getInitiator',
        'initiator_commitment' => 'getInitiatorCommitment',
        'opponent' => 'getOpponent',
        'opponent_commitment' => 'getOpponentCommitment',
        'initiator_reward' => 'getInitiatorReward',
        'initiator_loss' => 'getInitiatorLoss',
        'opponent_reward' => 'getOpponentReward',
        'opponent_loss' => 'getOpponentLoss'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('initiator', $data ?? [], null);
        $this->setIfExists('initiator_commitment', $data ?? [], null);
        $this->setIfExists('opponent', $data ?? [], null);
        $this->setIfExists('opponent_commitment', $data ?? [], null);
        $this->setIfExists('initiator_reward', $data ?? [], null);
        $this->setIfExists('initiator_loss', $data ?? [], null);
        $this->setIfExists('opponent_reward', $data ?? [], null);
        $this->setIfExists('opponent_loss', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id Internal TzKT id.
     *
     * @return self
     */
    public function setId($id)
    {

        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }

        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets initiator
     *
     * @return \Bzzhh\Tzkt\Model\SrGameInfoInitiator|null
     */
    public function getInitiator()
    {
        return $this->container['initiator'];
    }

    /**
     * Sets initiator
     *
     * @param \Bzzhh\Tzkt\Model\SrGameInfoInitiator|null $initiator initiator
     *
     * @return self
     */
    public function setInitiator($initiator)
    {

        if (is_null($initiator)) {
            array_push($this->openAPINullablesSetToNull, 'initiator');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('initiator', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['initiator'] = $initiator;

        return $this;
    }

    /**
     * Gets initiator_commitment
     *
     * @return \Bzzhh\Tzkt\Model\SrGameInfoInitiatorCommitment|null
     */
    public function getInitiatorCommitment()
    {
        return $this->container['initiator_commitment'];
    }

    /**
     * Sets initiator_commitment
     *
     * @param \Bzzhh\Tzkt\Model\SrGameInfoInitiatorCommitment|null $initiator_commitment initiator_commitment
     *
     * @return self
     */
    public function setInitiatorCommitment($initiator_commitment)
    {

        if (is_null($initiator_commitment)) {
            array_push($this->openAPINullablesSetToNull, 'initiator_commitment');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('initiator_commitment', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['initiator_commitment'] = $initiator_commitment;

        return $this;
    }

    /**
     * Gets opponent
     *
     * @return \Bzzhh\Tzkt\Model\SrGameInfoOpponent|null
     */
    public function getOpponent()
    {
        return $this->container['opponent'];
    }

    /**
     * Sets opponent
     *
     * @param \Bzzhh\Tzkt\Model\SrGameInfoOpponent|null $opponent opponent
     *
     * @return self
     */
    public function setOpponent($opponent)
    {

        if (is_null($opponent)) {
            array_push($this->openAPINullablesSetToNull, 'opponent');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('opponent', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['opponent'] = $opponent;

        return $this;
    }

    /**
     * Gets opponent_commitment
     *
     * @return \Bzzhh\Tzkt\Model\SrGameInfoOpponentCommitment|null
     */
    public function getOpponentCommitment()
    {
        return $this->container['opponent_commitment'];
    }

    /**
     * Sets opponent_commitment
     *
     * @param \Bzzhh\Tzkt\Model\SrGameInfoOpponentCommitment|null $opponent_commitment opponent_commitment
     *
     * @return self
     */
    public function setOpponentCommitment($opponent_commitment)
    {

        if (is_null($opponent_commitment)) {
            array_push($this->openAPINullablesSetToNull, 'opponent_commitment');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('opponent_commitment', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['opponent_commitment'] = $opponent_commitment;

        return $this;
    }

    /**
     * Gets initiator_reward
     *
     * @return int|null
     */
    public function getInitiatorReward()
    {
        return $this->container['initiator_reward'];
    }

    /**
     * Sets initiator_reward
     *
     * @param int|null $initiator_reward In case the initiator won, this field will contain the reward amount (in mutez).
     *
     * @return self
     */
    public function setInitiatorReward($initiator_reward)
    {

        if (is_null($initiator_reward)) {
            array_push($this->openAPINullablesSetToNull, 'initiator_reward');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('initiator_reward', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['initiator_reward'] = $initiator_reward;

        return $this;
    }

    /**
     * Gets initiator_loss
     *
     * @return int|null
     */
    public function getInitiatorLoss()
    {
        return $this->container['initiator_loss'];
    }

    /**
     * Sets initiator_loss
     *
     * @param int|null $initiator_loss In case the initiator lost (including a `draw`), this field will contain the loss amount (in mutez).
     *
     * @return self
     */
    public function setInitiatorLoss($initiator_loss)
    {

        if (is_null($initiator_loss)) {
            array_push($this->openAPINullablesSetToNull, 'initiator_loss');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('initiator_loss', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['initiator_loss'] = $initiator_loss;

        return $this;
    }

    /**
     * Gets opponent_reward
     *
     * @return int|null
     */
    public function getOpponentReward()
    {
        return $this->container['opponent_reward'];
    }

    /**
     * Sets opponent_reward
     *
     * @param int|null $opponent_reward In case the opponent won, this field will contain the reward amount (in mutez).
     *
     * @return self
     */
    public function setOpponentReward($opponent_reward)
    {

        if (is_null($opponent_reward)) {
            array_push($this->openAPINullablesSetToNull, 'opponent_reward');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('opponent_reward', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['opponent_reward'] = $opponent_reward;

        return $this;
    }

    /**
     * Gets opponent_loss
     *
     * @return int|null
     */
    public function getOpponentLoss()
    {
        return $this->container['opponent_loss'];
    }

    /**
     * Sets opponent_loss
     *
     * @param int|null $opponent_loss In case the opponent lost (including a `draw`), this field will contain the loss amount (in mutez).
     *
     * @return self
     */
    public function setOpponentLoss($opponent_loss)
    {

        if (is_null($opponent_loss)) {
            array_push($this->openAPINullablesSetToNull, 'opponent_loss');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('opponent_loss', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['opponent_loss'] = $opponent_loss;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


