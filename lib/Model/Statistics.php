<?php
/**
 * Statistics
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  Bzzhh\Tzkt
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * TzKT API
 *
 * # Introduction  TzKT Explorer provides a free REST-like API and WebSocket API for accessing detailed Tezos blockchain data and helps developers build more services and applications on top of Tezos. TzKT is an open-source project, so you can easily clone and build it and use it as a self-hosted service to avoid any risks depending on third-party services.  TzKT API is available for the following Tezos networks with the following base URLs:  - Mainnet: `https://api.tzkt.io/` or `https://api.mainnet.tzkt.io/` ([view docs](https://api.tzkt.io)) - Edo2net: `https://api.edo2net.tzkt.io/` ([view docs](https://api.edo2net.tzkt.io)) - Florencenet: `https://api.florencenet.tzkt.io/` ([view docs](https://api.florencenet.tzkt.io))  We also provide a staging environment for testing newest features and pre-updating client applications before deploying to production:  - Mainnet staging: `https://staging.api.tzkt.io/` or `https://staging.api.mainnet.tzkt.io/` ([view docs](https://staging.api.tzkt.io)) - Edo2net staging: `https://staging.api.edo2net.tzkt.io/` ([view docs](https://staging.api.edo2net.tzkt.io))      Feel free to contact us if you have any questions or feature requests. Your feedback really helps us make TzKT better!  - Email: hello@baking-bad.org - Twitter: https://twitter.com/TezosBakingBad - Telegram: [tg://resolve?domain=baking_bad_chat](tg://resolve?domain=baking_bad_chat) - Slack: https://tezos-dev.slack.com/archives/CV5NX7F2L  And don't forget to star TzKT project [on GitHub](https://github.com/baking-bad/tzkt) ;)  # Terms of Use  TzKT API is free for everyone and for both commercial and non-commercial usage.  If your application or service uses the TzKT API in any forms: directly on frontend or indirectly on backend, you should mention that fact on your website or application by placing the label **\"Powered by TzKT API\"** with a direct link to [tzkt.io](https://tzkt.io).   # Rate Limits  There will be no rate limits as long as our servers can handle the load without additional infrastructure costs. However, any apparent abuse will be prevented by setting targeted rate limits.  Check out [Tezos Explorer API Best Practices](https://baking-bad.org/blog/tag/TzKT/) and in particular [how to optimize requests count](https://baking-bad.org/blog/2020/07/29/tezos-explorer-api-tzkt-how-often-to-make-requests/).  ---
 *
 * The version of the OpenAPI document: v1.5
 * Contact: hello@baking-bad.org
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.2.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Bzzhh\Tzkt\Model;

use \ArrayAccess;
use \Bzzhh\Tzkt\ObjectSerializer;

/**
 * Statistics Class Doc Comment
 *
 * @category Class
 * @package  Bzzhh\Tzkt
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class Statistics implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Statistics';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'cycle' => 'int',
        'date' => '\DateTime',
        'level' => 'int',
        'timestamp' => '\DateTime',
        'total_supply' => 'int',
        'circulating_supply' => 'int',
        'total_bootstrapped' => 'int',
        'total_commitments' => 'int',
        'total_activated' => 'int',
        'total_created' => 'int',
        'total_burned' => 'int',
        'total_vested' => 'int',
        'total_frozen' => 'int',
        'quote' => 'OneOfQuoteShort'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'cycle' => 'int32',
        'date' => 'date-time',
        'level' => 'int32',
        'timestamp' => 'date-time',
        'total_supply' => 'int64',
        'circulating_supply' => 'int64',
        'total_bootstrapped' => 'int64',
        'total_commitments' => 'int64',
        'total_activated' => 'int64',
        'total_created' => 'int64',
        'total_burned' => 'int64',
        'total_vested' => 'int64',
        'total_frozen' => 'int64',
        'quote' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'cycle' => 'cycle',
        'date' => 'date',
        'level' => 'level',
        'timestamp' => 'timestamp',
        'total_supply' => 'totalSupply',
        'circulating_supply' => 'circulatingSupply',
        'total_bootstrapped' => 'totalBootstrapped',
        'total_commitments' => 'totalCommitments',
        'total_activated' => 'totalActivated',
        'total_created' => 'totalCreated',
        'total_burned' => 'totalBurned',
        'total_vested' => 'totalVested',
        'total_frozen' => 'totalFrozen',
        'quote' => 'quote'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'cycle' => 'setCycle',
        'date' => 'setDate',
        'level' => 'setLevel',
        'timestamp' => 'setTimestamp',
        'total_supply' => 'setTotalSupply',
        'circulating_supply' => 'setCirculatingSupply',
        'total_bootstrapped' => 'setTotalBootstrapped',
        'total_commitments' => 'setTotalCommitments',
        'total_activated' => 'setTotalActivated',
        'total_created' => 'setTotalCreated',
        'total_burned' => 'setTotalBurned',
        'total_vested' => 'setTotalVested',
        'total_frozen' => 'setTotalFrozen',
        'quote' => 'setQuote'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'cycle' => 'getCycle',
        'date' => 'getDate',
        'level' => 'getLevel',
        'timestamp' => 'getTimestamp',
        'total_supply' => 'getTotalSupply',
        'circulating_supply' => 'getCirculatingSupply',
        'total_bootstrapped' => 'getTotalBootstrapped',
        'total_commitments' => 'getTotalCommitments',
        'total_activated' => 'getTotalActivated',
        'total_created' => 'getTotalCreated',
        'total_burned' => 'getTotalBurned',
        'total_vested' => 'getTotalVested',
        'total_frozen' => 'getTotalFrozen',
        'quote' => 'getQuote'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['cycle'] = $data['cycle'] ?? null;
        $this->container['date'] = $data['date'] ?? null;
        $this->container['level'] = $data['level'] ?? null;
        $this->container['timestamp'] = $data['timestamp'] ?? null;
        $this->container['total_supply'] = $data['total_supply'] ?? null;
        $this->container['circulating_supply'] = $data['circulating_supply'] ?? null;
        $this->container['total_bootstrapped'] = $data['total_bootstrapped'] ?? null;
        $this->container['total_commitments'] = $data['total_commitments'] ?? null;
        $this->container['total_activated'] = $data['total_activated'] ?? null;
        $this->container['total_created'] = $data['total_created'] ?? null;
        $this->container['total_burned'] = $data['total_burned'] ?? null;
        $this->container['total_vested'] = $data['total_vested'] ?? null;
        $this->container['total_frozen'] = $data['total_frozen'] ?? null;
        $this->container['quote'] = $data['quote'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets cycle
     *
     * @return int|null
     */
    public function getCycle()
    {
        return $this->container['cycle'];
    }

    /**
     * Sets cycle
     *
     * @param int|null $cycle Cycle at the end of which the statistics has been calculated. This field is only present in cyclic statistics.
     *
     * @return self
     */
    public function setCycle($cycle)
    {
        $this->container['cycle'] = $cycle;

        return $this;
    }

    /**
     * Gets date
     *
     * @return \DateTime|null
     */
    public function getDate()
    {
        return $this->container['date'];
    }

    /**
     * Sets date
     *
     * @param \DateTime|null $date Day at the end of which the statistics has been calculated. This field is only present in daily statistics.
     *
     * @return self
     */
    public function setDate($date)
    {
        $this->container['date'] = $date;

        return $this;
    }

    /**
     * Gets level
     *
     * @return int|null
     */
    public function getLevel()
    {
        return $this->container['level'];
    }

    /**
     * Sets level
     *
     * @param int|null $level Level of the block at which the statistics has been calculated
     *
     * @return self
     */
    public function setLevel($level)
    {
        $this->container['level'] = $level;

        return $this;
    }

    /**
     * Gets timestamp
     *
     * @return \DateTime|null
     */
    public function getTimestamp()
    {
        return $this->container['timestamp'];
    }

    /**
     * Sets timestamp
     *
     * @param \DateTime|null $timestamp Timestamp of the block at which the statistics has been calculated (ISO 8601, e.g. `2020-02-20T02:40:57Z`)
     *
     * @return self
     */
    public function setTimestamp($timestamp)
    {
        $this->container['timestamp'] = $timestamp;

        return $this;
    }

    /**
     * Gets total_supply
     *
     * @return int|null
     */
    public function getTotalSupply()
    {
        return $this->container['total_supply'];
    }

    /**
     * Sets total_supply
     *
     * @param int|null $total_supply Total supply - all existing tokens (including locked vested funds and frozen funds) plus not yet activated fundraiser tokens
     *
     * @return self
     */
    public function setTotalSupply($total_supply)
    {
        $this->container['total_supply'] = $total_supply;

        return $this;
    }

    /**
     * Gets circulating_supply
     *
     * @return int|null
     */
    public function getCirculatingSupply()
    {
        return $this->container['circulating_supply'];
    }

    /**
     * Sets circulating_supply
     *
     * @param int|null $circulating_supply Circulating supply - all active tokens which can affect supply and demand (can be spent/transferred)
     *
     * @return self
     */
    public function setCirculatingSupply($circulating_supply)
    {
        $this->container['circulating_supply'] = $circulating_supply;

        return $this;
    }

    /**
     * Gets total_bootstrapped
     *
     * @return int|null
     */
    public function getTotalBootstrapped()
    {
        return $this->container['total_bootstrapped'];
    }

    /**
     * Sets total_bootstrapped
     *
     * @param int|null $total_bootstrapped Total amount of tokens initially created when starting the blockchain
     *
     * @return self
     */
    public function setTotalBootstrapped($total_bootstrapped)
    {
        $this->container['total_bootstrapped'] = $total_bootstrapped;

        return $this;
    }

    /**
     * Gets total_commitments
     *
     * @return int|null
     */
    public function getTotalCommitments()
    {
        return $this->container['total_commitments'];
    }

    /**
     * Sets total_commitments
     *
     * @param int|null $total_commitments Total commitment amount (tokens to be activated by fundraisers)
     *
     * @return self
     */
    public function setTotalCommitments($total_commitments)
    {
        $this->container['total_commitments'] = $total_commitments;

        return $this;
    }

    /**
     * Gets total_activated
     *
     * @return int|null
     */
    public function getTotalActivated()
    {
        return $this->container['total_activated'];
    }

    /**
     * Sets total_activated
     *
     * @param int|null $total_activated Total amount of tokens activated by fundraisers
     *
     * @return self
     */
    public function setTotalActivated($total_activated)
    {
        $this->container['total_activated'] = $total_activated;

        return $this;
    }

    /**
     * Gets total_created
     *
     * @return int|null
     */
    public function getTotalCreated()
    {
        return $this->container['total_created'];
    }

    /**
     * Sets total_created
     *
     * @param int|null $total_created Total amount of created/issued tokens
     *
     * @return self
     */
    public function setTotalCreated($total_created)
    {
        $this->container['total_created'] = $total_created;

        return $this;
    }

    /**
     * Gets total_burned
     *
     * @return int|null
     */
    public function getTotalBurned()
    {
        return $this->container['total_burned'];
    }

    /**
     * Sets total_burned
     *
     * @param int|null $total_burned Total amount of burned tokens
     *
     * @return self
     */
    public function setTotalBurned($total_burned)
    {
        $this->container['total_burned'] = $total_burned;

        return $this;
    }

    /**
     * Gets total_vested
     *
     * @return int|null
     */
    public function getTotalVested()
    {
        return $this->container['total_vested'];
    }

    /**
     * Sets total_vested
     *
     * @param int|null $total_vested Total amount of tokens locked on vested contracts
     *
     * @return self
     */
    public function setTotalVested($total_vested)
    {
        $this->container['total_vested'] = $total_vested;

        return $this;
    }

    /**
     * Gets total_frozen
     *
     * @return int|null
     */
    public function getTotalFrozen()
    {
        return $this->container['total_frozen'];
    }

    /**
     * Sets total_frozen
     *
     * @param int|null $total_frozen Total amount of frozen tokens (frozen security deposits, frozen rewards and frozen fees)
     *
     * @return self
     */
    public function setTotalFrozen($total_frozen)
    {
        $this->container['total_frozen'] = $total_frozen;

        return $this;
    }

    /**
     * Gets quote
     *
     * @return OneOfQuoteShort|null
     */
    public function getQuote()
    {
        return $this->container['quote'];
    }

    /**
     * Sets quote
     *
     * @param OneOfQuoteShort|null $quote Injected historical quote at the time of the block at which the statistics has been calculated
     *
     * @return self
     */
    public function setQuote($quote)
    {
        $this->container['quote'] = $quote;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


