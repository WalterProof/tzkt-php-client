<?php
/**
 * DoubleBakingOperationAllOf
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Bzzhh\Tzkt
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * TzKT API
 *
 * # Introduction  TzKT Explorer provides free REST API and WebSocket API for accessing detailed Tezos blockchain data and helps developers build more services and applications on top of Tezos. TzKT is an open-source project, so you can easily clone and build it and use it as a self-hosted service to avoid any risks of depending on third-party services.  TzKT API is available for the following Tezos networks with the following base URLs:   - Mainnet: `https://api.tzkt.io/` or `https://api.mainnet.tzkt.io/` ([view docs](https://api.tzkt.io))  - Ghostnet: `https://api.ghostnet.tzkt.io/` ([view docs](https://api.ghostnet.tzkt.io)) - Limanet: `https://api.limanet.tzkt.io/` ([view docs](https://api.limanet.tzkt.io)) - Mumbainet: `https://api.mumbainet.tzkt.io/` ([view docs](https://api.mumbainet.tzkt.io))  We also provide a staging environment for testing newest features and pre-updating client applications before deploying to production:  - Mainnet staging: `https://staging.api.tzkt.io/` or `https://staging.api.mainnet.tzkt.io/` ([view docs](https://staging.api.tzkt.io))  Feel free to contact us if you have any questions or feature requests. Your feedback really helps us make TzKT better!  - Discord: https://discord.gg/aG8XKuwsQd - Telegram: https://t.me/baking_bad_chat - Slack: https://tezos-dev.slack.com/archives/CV5NX7F2L - Twitter: https://twitter.com/TezosBakingBad - Email: hello@baking-bad.org  And don't forget to star TzKT project [on GitHub](https://github.com/baking-bad/tzkt) ;)  # Terms of Use  TzKT API is free for everyone and for both commercial and non-commercial usage.  If your application or service uses the TzKT API in any forms: directly on frontend or indirectly on backend, you must mention that fact on your website or application by placing the label **\"Powered by TzKT API\"** or **\"Built with TzKT API\"** with a direct link to [tzkt.io](https://tzkt.io).   # Rate Limits  There will be no rate limits as long as our servers can handle the load without additional infrastructure costs. However, any apparent abuse will be prevented by setting targeted rate limits.  Check out [Tezos Explorer API Best Practices](https://baking-bad.org/blog/tag/TzKT/) and in particular [how to optimize requests count](https://baking-bad.org/blog/2020/07/29/tezos-explorer-api-tzkt-how-often-to-make-requests/).  ---
 *
 * The version of the OpenAPI document: 1.12.0
 * Contact: hello@baking-bad.org
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.2.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Bzzhh\Tzkt\Model;

use \ArrayAccess;
use \Bzzhh\Tzkt\ObjectSerializer;

/**
 * DoubleBakingOperationAllOf Class Doc Comment
 *
 * @category Class
 * @package  Bzzhh\Tzkt
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class DoubleBakingOperationAllOf implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'DoubleBakingOperation_allOf';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'type' => 'string',
        'id' => 'int',
        'level' => 'int',
        'timestamp' => '\DateTime',
        'block' => 'string',
        'hash' => 'string',
        'accused_level' => 'int',
        'accuser' => 'OneOfAlias',
        'accuser_reward' => 'int',
        'offender' => 'OneOfAlias',
        'offender_loss' => 'int',
        'quote' => 'OneOfQuoteShort',
        'accuser_rewards' => 'int',
        'offender_lost_deposits' => 'int',
        'offender_lost_rewards' => 'int',
        'offender_lost_fees' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'type' => null,
        'id' => 'int64',
        'level' => 'int32',
        'timestamp' => 'date-time',
        'block' => null,
        'hash' => null,
        'accused_level' => 'int32',
        'accuser' => null,
        'accuser_reward' => 'int64',
        'offender' => null,
        'offender_loss' => 'int64',
        'quote' => null,
        'accuser_rewards' => 'int64',
        'offender_lost_deposits' => 'int64',
        'offender_lost_rewards' => 'int64',
        'offender_lost_fees' => 'int64'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'type' => true,
		'id' => false,
		'level' => false,
		'timestamp' => false,
		'block' => true,
		'hash' => true,
		'accused_level' => false,
		'accuser' => true,
		'accuser_reward' => false,
		'offender' => true,
		'offender_loss' => false,
		'quote' => true,
		'accuser_rewards' => false,
		'offender_lost_deposits' => false,
		'offender_lost_rewards' => false,
		'offender_lost_fees' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'type' => 'type',
        'id' => 'id',
        'level' => 'level',
        'timestamp' => 'timestamp',
        'block' => 'block',
        'hash' => 'hash',
        'accused_level' => 'accusedLevel',
        'accuser' => 'accuser',
        'accuser_reward' => 'accuserReward',
        'offender' => 'offender',
        'offender_loss' => 'offenderLoss',
        'quote' => 'quote',
        'accuser_rewards' => 'accuserRewards',
        'offender_lost_deposits' => 'offenderLostDeposits',
        'offender_lost_rewards' => 'offenderLostRewards',
        'offender_lost_fees' => 'offenderLostFees'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'type' => 'setType',
        'id' => 'setId',
        'level' => 'setLevel',
        'timestamp' => 'setTimestamp',
        'block' => 'setBlock',
        'hash' => 'setHash',
        'accused_level' => 'setAccusedLevel',
        'accuser' => 'setAccuser',
        'accuser_reward' => 'setAccuserReward',
        'offender' => 'setOffender',
        'offender_loss' => 'setOffenderLoss',
        'quote' => 'setQuote',
        'accuser_rewards' => 'setAccuserRewards',
        'offender_lost_deposits' => 'setOffenderLostDeposits',
        'offender_lost_rewards' => 'setOffenderLostRewards',
        'offender_lost_fees' => 'setOffenderLostFees'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'type' => 'getType',
        'id' => 'getId',
        'level' => 'getLevel',
        'timestamp' => 'getTimestamp',
        'block' => 'getBlock',
        'hash' => 'getHash',
        'accused_level' => 'getAccusedLevel',
        'accuser' => 'getAccuser',
        'accuser_reward' => 'getAccuserReward',
        'offender' => 'getOffender',
        'offender_loss' => 'getOffenderLoss',
        'quote' => 'getQuote',
        'accuser_rewards' => 'getAccuserRewards',
        'offender_lost_deposits' => 'getOffenderLostDeposits',
        'offender_lost_rewards' => 'getOffenderLostRewards',
        'offender_lost_fees' => 'getOffenderLostFees'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('type', $data ?? [], null);
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('level', $data ?? [], null);
        $this->setIfExists('timestamp', $data ?? [], null);
        $this->setIfExists('block', $data ?? [], null);
        $this->setIfExists('hash', $data ?? [], null);
        $this->setIfExists('accused_level', $data ?? [], null);
        $this->setIfExists('accuser', $data ?? [], null);
        $this->setIfExists('accuser_reward', $data ?? [], null);
        $this->setIfExists('offender', $data ?? [], null);
        $this->setIfExists('offender_loss', $data ?? [], null);
        $this->setIfExists('quote', $data ?? [], null);
        $this->setIfExists('accuser_rewards', $data ?? [], null);
        $this->setIfExists('offender_lost_deposits', $data ?? [], null);
        $this->setIfExists('offender_lost_rewards', $data ?? [], null);
        $this->setIfExists('offender_lost_fees', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets type
     *
     * @return string|null
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string|null $type Type of the operation, `double_baking` - is used by bakers to provide evidence of double baking (baking two different blocks at the same height) by a baker
     *
     * @return self
     */
    public function setType($type)
    {

        if (is_null($type)) {
            array_push($this->openAPINullablesSetToNull, 'type');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('type', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id Unique ID of the operation, stored in the TzKT indexer database
     *
     * @return self
     */
    public function setId($id)
    {

        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }

        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets level
     *
     * @return int|null
     */
    public function getLevel()
    {
        return $this->container['level'];
    }

    /**
     * Sets level
     *
     * @param int|null $level Height of the block from the genesis block, in which the operation was included
     *
     * @return self
     */
    public function setLevel($level)
    {

        if (is_null($level)) {
            throw new \InvalidArgumentException('non-nullable level cannot be null');
        }

        $this->container['level'] = $level;

        return $this;
    }

    /**
     * Gets timestamp
     *
     * @return \DateTime|null
     */
    public function getTimestamp()
    {
        return $this->container['timestamp'];
    }

    /**
     * Sets timestamp
     *
     * @param \DateTime|null $timestamp Datetime of the block, in which the operation was included (ISO 8601, e.g. `2020-02-20T02:40:57Z`)
     *
     * @return self
     */
    public function setTimestamp($timestamp)
    {

        if (is_null($timestamp)) {
            throw new \InvalidArgumentException('non-nullable timestamp cannot be null');
        }

        $this->container['timestamp'] = $timestamp;

        return $this;
    }

    /**
     * Gets block
     *
     * @return string|null
     */
    public function getBlock()
    {
        return $this->container['block'];
    }

    /**
     * Sets block
     *
     * @param string|null $block Hash of the block, in which the operation was included
     *
     * @return self
     */
    public function setBlock($block)
    {

        if (is_null($block)) {
            array_push($this->openAPINullablesSetToNull, 'block');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('block', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['block'] = $block;

        return $this;
    }

    /**
     * Gets hash
     *
     * @return string|null
     */
    public function getHash()
    {
        return $this->container['hash'];
    }

    /**
     * Sets hash
     *
     * @param string|null $hash Hash of the operation
     *
     * @return self
     */
    public function setHash($hash)
    {

        if (is_null($hash)) {
            array_push($this->openAPINullablesSetToNull, 'hash');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('hash', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['hash'] = $hash;

        return $this;
    }

    /**
     * Gets accused_level
     *
     * @return int|null
     */
    public function getAccusedLevel()
    {
        return $this->container['accused_level'];
    }

    /**
     * Sets accused_level
     *
     * @param int|null $accused_level Height of the block from the genesis, which was double baked
     *
     * @return self
     */
    public function setAccusedLevel($accused_level)
    {

        if (is_null($accused_level)) {
            throw new \InvalidArgumentException('non-nullable accused_level cannot be null');
        }

        $this->container['accused_level'] = $accused_level;

        return $this;
    }

    /**
     * Gets accuser
     *
     * @return OneOfAlias|null
     */
    public function getAccuser()
    {
        return $this->container['accuser'];
    }

    /**
     * Sets accuser
     *
     * @param OneOfAlias|null $accuser Information about the baker, produced the block, in which the accusation was included
     *
     * @return self
     */
    public function setAccuser($accuser)
    {

        if (is_null($accuser)) {
            array_push($this->openAPINullablesSetToNull, 'accuser');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('accuser', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['accuser'] = $accuser;

        return $this;
    }

    /**
     * Gets accuser_reward
     *
     * @return int|null
     */
    public function getAccuserReward()
    {
        return $this->container['accuser_reward'];
    }

    /**
     * Sets accuser_reward
     *
     * @param int|null $accuser_reward Reward of the baker, produced the block, in which the accusation was included
     *
     * @return self
     */
    public function setAccuserReward($accuser_reward)
    {

        if (is_null($accuser_reward)) {
            throw new \InvalidArgumentException('non-nullable accuser_reward cannot be null');
        }

        $this->container['accuser_reward'] = $accuser_reward;

        return $this;
    }

    /**
     * Gets offender
     *
     * @return OneOfAlias|null
     */
    public function getOffender()
    {
        return $this->container['offender'];
    }

    /**
     * Sets offender
     *
     * @param OneOfAlias|null $offender Information about the baker, accused for producing two different blocks at the same level
     *
     * @return self
     */
    public function setOffender($offender)
    {

        if (is_null($offender)) {
            array_push($this->openAPINullablesSetToNull, 'offender');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('offender', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['offender'] = $offender;

        return $this;
    }

    /**
     * Gets offender_loss
     *
     * @return int|null
     */
    public function getOffenderLoss()
    {
        return $this->container['offender_loss'];
    }

    /**
     * Sets offender_loss
     *
     * @param int|null $offender_loss Amount of frozen deposits lost by accused baker
     *
     * @return self
     */
    public function setOffenderLoss($offender_loss)
    {

        if (is_null($offender_loss)) {
            throw new \InvalidArgumentException('non-nullable offender_loss cannot be null');
        }

        $this->container['offender_loss'] = $offender_loss;

        return $this;
    }

    /**
     * Gets quote
     *
     * @return OneOfQuoteShort|null
     */
    public function getQuote()
    {
        return $this->container['quote'];
    }

    /**
     * Sets quote
     *
     * @param OneOfQuoteShort|null $quote Injected historical quote at the time of operation
     *
     * @return self
     */
    public function setQuote($quote)
    {

        if (is_null($quote)) {
            array_push($this->openAPINullablesSetToNull, 'quote');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('quote', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['quote'] = $quote;

        return $this;
    }

    /**
     * Gets accuser_rewards
     *
     * @return int|null
     */
    public function getAccuserRewards()
    {
        return $this->container['accuser_rewards'];
    }

    /**
     * Sets accuser_rewards
     *
     * @param int|null $accuser_rewards [DEPRECATED]
     *
     * @return self
     */
    public function setAccuserRewards($accuser_rewards)
    {

        if (is_null($accuser_rewards)) {
            throw new \InvalidArgumentException('non-nullable accuser_rewards cannot be null');
        }

        $this->container['accuser_rewards'] = $accuser_rewards;

        return $this;
    }

    /**
     * Gets offender_lost_deposits
     *
     * @return int|null
     */
    public function getOffenderLostDeposits()
    {
        return $this->container['offender_lost_deposits'];
    }

    /**
     * Sets offender_lost_deposits
     *
     * @param int|null $offender_lost_deposits [DEPRECATED]
     *
     * @return self
     */
    public function setOffenderLostDeposits($offender_lost_deposits)
    {

        if (is_null($offender_lost_deposits)) {
            throw new \InvalidArgumentException('non-nullable offender_lost_deposits cannot be null');
        }

        $this->container['offender_lost_deposits'] = $offender_lost_deposits;

        return $this;
    }

    /**
     * Gets offender_lost_rewards
     *
     * @return int|null
     */
    public function getOffenderLostRewards()
    {
        return $this->container['offender_lost_rewards'];
    }

    /**
     * Sets offender_lost_rewards
     *
     * @param int|null $offender_lost_rewards [DEPRECATED]
     *
     * @return self
     */
    public function setOffenderLostRewards($offender_lost_rewards)
    {

        if (is_null($offender_lost_rewards)) {
            throw new \InvalidArgumentException('non-nullable offender_lost_rewards cannot be null');
        }

        $this->container['offender_lost_rewards'] = $offender_lost_rewards;

        return $this;
    }

    /**
     * Gets offender_lost_fees
     *
     * @return int|null
     */
    public function getOffenderLostFees()
    {
        return $this->container['offender_lost_fees'];
    }

    /**
     * Sets offender_lost_fees
     *
     * @param int|null $offender_lost_fees [DEPRECATED]
     *
     * @return self
     */
    public function setOffenderLostFees($offender_lost_fees)
    {

        if (is_null($offender_lost_fees)) {
            throw new \InvalidArgumentException('non-nullable offender_lost_fees cannot be null');
        }

        $this->container['offender_lost_fees'] = $offender_lost_fees;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


