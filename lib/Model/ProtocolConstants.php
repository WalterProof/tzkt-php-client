<?php
/**
 * ProtocolConstants
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  Bzzhh\Tzkt
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * TzKT API
 *
 * # Introduction  TzKT Explorer provides a free REST-like API and WebSocket API for accessing detailed Tezos blockchain data and helps developers build more services and applications on top of Tezos. TzKT is an open-source project, so you can easily clone and build it and use it as a self-hosted service to avoid any risks depending on third-party services.  TzKT API is available for the following Tezos networks with the following base URLs:  - Mainnet: `https://api.tzkt.io/` or `https://api.mainnet.tzkt.io/` ([view docs](https://api.tzkt.io)) - Edo2net: `https://api.edo2net.tzkt.io/` ([view docs](https://api.edo2net.tzkt.io)) - Florencenet: `https://api.florencenet.tzkt.io/` ([view docs](https://api.florencenet.tzkt.io))  We also provide a staging environment for testing newest features and pre-updating client applications before deploying to production:  - Mainnet staging: `https://staging.api.tzkt.io/` or `https://staging.api.mainnet.tzkt.io/` ([view docs](https://staging.api.tzkt.io)) - Edo2net staging: `https://staging.api.edo2net.tzkt.io/` ([view docs](https://staging.api.edo2net.tzkt.io))      Feel free to contact us if you have any questions or feature requests. Your feedback really helps us make TzKT better!  - Email: hello@baking-bad.org - Twitter: https://twitter.com/TezosBakingBad - Telegram: [tg://resolve?domain=baking_bad_chat](tg://resolve?domain=baking_bad_chat) - Slack: https://tezos-dev.slack.com/archives/CV5NX7F2L  And don't forget to star TzKT project [on GitHub](https://github.com/baking-bad/tzkt) ;)  # Terms of Use  TzKT API is free for everyone and for both commercial and non-commercial usage.  If your application or service uses the TzKT API in any forms: directly on frontend or indirectly on backend, you should mention that fact on your website or application by placing the label **\"Powered by TzKT API\"** with a direct link to [tzkt.io](https://tzkt.io).   # Rate Limits  There will be no rate limits as long as our servers can handle the load without additional infrastructure costs. However, any apparent abuse will be prevented by setting targeted rate limits.  Check out [Tezos Explorer API Best Practices](https://baking-bad.org/blog/tag/TzKT/) and in particular [how to optimize requests count](https://baking-bad.org/blog/2020/07/29/tezos-explorer-api-tzkt-how-often-to-make-requests/).  ---
 *
 * The version of the OpenAPI document: v1.5
 * Contact: hello@baking-bad.org
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.2.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Bzzhh\Tzkt\Model;

use \ArrayAccess;
use \Bzzhh\Tzkt\ObjectSerializer;

/**
 * ProtocolConstants Class Doc Comment
 *
 * @category Class
 * @package  Bzzhh\Tzkt
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class ProtocolConstants implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ProtocolConstants';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'ramp_up_cycles' => 'int',
        'no_reward_cycles' => 'int',
        'preserved_cycles' => 'int',
        'blocks_per_cycle' => 'int',
        'blocks_per_commitment' => 'int',
        'blocks_per_snapshot' => 'int',
        'blocks_per_voting' => 'int',
        'time_between_blocks' => 'int',
        'endorsers_per_block' => 'int',
        'hard_operation_gas_limit' => 'int',
        'hard_operation_storage_limit' => 'int',
        'hard_block_gas_limit' => 'int',
        'tokens_per_roll' => 'int',
        'revelation_reward' => 'int',
        'block_deposit' => 'int',
        'block_reward' => 'int[]',
        'endorsement_deposit' => 'int',
        'endorsement_reward' => 'int[]',
        'origination_size' => 'int',
        'byte_cost' => 'int',
        'proposal_quorum' => 'double',
        'ballot_quorum_min' => 'double',
        'ballot_quorum_max' => 'double'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'ramp_up_cycles' => 'int32',
        'no_reward_cycles' => 'int32',
        'preserved_cycles' => 'int32',
        'blocks_per_cycle' => 'int32',
        'blocks_per_commitment' => 'int32',
        'blocks_per_snapshot' => 'int32',
        'blocks_per_voting' => 'int32',
        'time_between_blocks' => 'int32',
        'endorsers_per_block' => 'int32',
        'hard_operation_gas_limit' => 'int32',
        'hard_operation_storage_limit' => 'int32',
        'hard_block_gas_limit' => 'int32',
        'tokens_per_roll' => 'int64',
        'revelation_reward' => 'int64',
        'block_deposit' => 'int64',
        'block_reward' => 'int64',
        'endorsement_deposit' => 'int64',
        'endorsement_reward' => 'int64',
        'origination_size' => 'int32',
        'byte_cost' => 'int32',
        'proposal_quorum' => 'double',
        'ballot_quorum_min' => 'double',
        'ballot_quorum_max' => 'double'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'ramp_up_cycles' => 'rampUpCycles',
        'no_reward_cycles' => 'noRewardCycles',
        'preserved_cycles' => 'preservedCycles',
        'blocks_per_cycle' => 'blocksPerCycle',
        'blocks_per_commitment' => 'blocksPerCommitment',
        'blocks_per_snapshot' => 'blocksPerSnapshot',
        'blocks_per_voting' => 'blocksPerVoting',
        'time_between_blocks' => 'timeBetweenBlocks',
        'endorsers_per_block' => 'endorsersPerBlock',
        'hard_operation_gas_limit' => 'hardOperationGasLimit',
        'hard_operation_storage_limit' => 'hardOperationStorageLimit',
        'hard_block_gas_limit' => 'hardBlockGasLimit',
        'tokens_per_roll' => 'tokensPerRoll',
        'revelation_reward' => 'revelationReward',
        'block_deposit' => 'blockDeposit',
        'block_reward' => 'blockReward',
        'endorsement_deposit' => 'endorsementDeposit',
        'endorsement_reward' => 'endorsementReward',
        'origination_size' => 'originationSize',
        'byte_cost' => 'byteCost',
        'proposal_quorum' => 'proposalQuorum',
        'ballot_quorum_min' => 'ballotQuorumMin',
        'ballot_quorum_max' => 'ballotQuorumMax'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'ramp_up_cycles' => 'setRampUpCycles',
        'no_reward_cycles' => 'setNoRewardCycles',
        'preserved_cycles' => 'setPreservedCycles',
        'blocks_per_cycle' => 'setBlocksPerCycle',
        'blocks_per_commitment' => 'setBlocksPerCommitment',
        'blocks_per_snapshot' => 'setBlocksPerSnapshot',
        'blocks_per_voting' => 'setBlocksPerVoting',
        'time_between_blocks' => 'setTimeBetweenBlocks',
        'endorsers_per_block' => 'setEndorsersPerBlock',
        'hard_operation_gas_limit' => 'setHardOperationGasLimit',
        'hard_operation_storage_limit' => 'setHardOperationStorageLimit',
        'hard_block_gas_limit' => 'setHardBlockGasLimit',
        'tokens_per_roll' => 'setTokensPerRoll',
        'revelation_reward' => 'setRevelationReward',
        'block_deposit' => 'setBlockDeposit',
        'block_reward' => 'setBlockReward',
        'endorsement_deposit' => 'setEndorsementDeposit',
        'endorsement_reward' => 'setEndorsementReward',
        'origination_size' => 'setOriginationSize',
        'byte_cost' => 'setByteCost',
        'proposal_quorum' => 'setProposalQuorum',
        'ballot_quorum_min' => 'setBallotQuorumMin',
        'ballot_quorum_max' => 'setBallotQuorumMax'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'ramp_up_cycles' => 'getRampUpCycles',
        'no_reward_cycles' => 'getNoRewardCycles',
        'preserved_cycles' => 'getPreservedCycles',
        'blocks_per_cycle' => 'getBlocksPerCycle',
        'blocks_per_commitment' => 'getBlocksPerCommitment',
        'blocks_per_snapshot' => 'getBlocksPerSnapshot',
        'blocks_per_voting' => 'getBlocksPerVoting',
        'time_between_blocks' => 'getTimeBetweenBlocks',
        'endorsers_per_block' => 'getEndorsersPerBlock',
        'hard_operation_gas_limit' => 'getHardOperationGasLimit',
        'hard_operation_storage_limit' => 'getHardOperationStorageLimit',
        'hard_block_gas_limit' => 'getHardBlockGasLimit',
        'tokens_per_roll' => 'getTokensPerRoll',
        'revelation_reward' => 'getRevelationReward',
        'block_deposit' => 'getBlockDeposit',
        'block_reward' => 'getBlockReward',
        'endorsement_deposit' => 'getEndorsementDeposit',
        'endorsement_reward' => 'getEndorsementReward',
        'origination_size' => 'getOriginationSize',
        'byte_cost' => 'getByteCost',
        'proposal_quorum' => 'getProposalQuorum',
        'ballot_quorum_min' => 'getBallotQuorumMin',
        'ballot_quorum_max' => 'getBallotQuorumMax'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['ramp_up_cycles'] = $data['ramp_up_cycles'] ?? null;
        $this->container['no_reward_cycles'] = $data['no_reward_cycles'] ?? null;
        $this->container['preserved_cycles'] = $data['preserved_cycles'] ?? null;
        $this->container['blocks_per_cycle'] = $data['blocks_per_cycle'] ?? null;
        $this->container['blocks_per_commitment'] = $data['blocks_per_commitment'] ?? null;
        $this->container['blocks_per_snapshot'] = $data['blocks_per_snapshot'] ?? null;
        $this->container['blocks_per_voting'] = $data['blocks_per_voting'] ?? null;
        $this->container['time_between_blocks'] = $data['time_between_blocks'] ?? null;
        $this->container['endorsers_per_block'] = $data['endorsers_per_block'] ?? null;
        $this->container['hard_operation_gas_limit'] = $data['hard_operation_gas_limit'] ?? null;
        $this->container['hard_operation_storage_limit'] = $data['hard_operation_storage_limit'] ?? null;
        $this->container['hard_block_gas_limit'] = $data['hard_block_gas_limit'] ?? null;
        $this->container['tokens_per_roll'] = $data['tokens_per_roll'] ?? null;
        $this->container['revelation_reward'] = $data['revelation_reward'] ?? null;
        $this->container['block_deposit'] = $data['block_deposit'] ?? null;
        $this->container['block_reward'] = $data['block_reward'] ?? null;
        $this->container['endorsement_deposit'] = $data['endorsement_deposit'] ?? null;
        $this->container['endorsement_reward'] = $data['endorsement_reward'] ?? null;
        $this->container['origination_size'] = $data['origination_size'] ?? null;
        $this->container['byte_cost'] = $data['byte_cost'] ?? null;
        $this->container['proposal_quorum'] = $data['proposal_quorum'] ?? null;
        $this->container['ballot_quorum_min'] = $data['ballot_quorum_min'] ?? null;
        $this->container['ballot_quorum_max'] = $data['ballot_quorum_max'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets ramp_up_cycles
     *
     * @return int|null
     */
    public function getRampUpCycles()
    {
        return $this->container['ramp_up_cycles'];
    }

    /**
     * Sets ramp_up_cycles
     *
     * @param int|null $ramp_up_cycles The number of cycles where security deposit is ramping up
     *
     * @return self
     */
    public function setRampUpCycles($ramp_up_cycles)
    {
        $this->container['ramp_up_cycles'] = $ramp_up_cycles;

        return $this;
    }

    /**
     * Gets no_reward_cycles
     *
     * @return int|null
     */
    public function getNoRewardCycles()
    {
        return $this->container['no_reward_cycles'];
    }

    /**
     * Sets no_reward_cycles
     *
     * @param int|null $no_reward_cycles The number of cycles with no baking rewards
     *
     * @return self
     */
    public function setNoRewardCycles($no_reward_cycles)
    {
        $this->container['no_reward_cycles'] = $no_reward_cycles;

        return $this;
    }

    /**
     * Gets preserved_cycles
     *
     * @return int|null
     */
    public function getPreservedCycles()
    {
        return $this->container['preserved_cycles'];
    }

    /**
     * Sets preserved_cycles
     *
     * @param int|null $preserved_cycles A number of cycles in which baker's security deposit and rewards are frozen
     *
     * @return self
     */
    public function setPreservedCycles($preserved_cycles)
    {
        $this->container['preserved_cycles'] = $preserved_cycles;

        return $this;
    }

    /**
     * Gets blocks_per_cycle
     *
     * @return int|null
     */
    public function getBlocksPerCycle()
    {
        return $this->container['blocks_per_cycle'];
    }

    /**
     * Sets blocks_per_cycle
     *
     * @param int|null $blocks_per_cycle A number of blocks the cycle contains
     *
     * @return self
     */
    public function setBlocksPerCycle($blocks_per_cycle)
    {
        $this->container['blocks_per_cycle'] = $blocks_per_cycle;

        return $this;
    }

    /**
     * Gets blocks_per_commitment
     *
     * @return int|null
     */
    public function getBlocksPerCommitment()
    {
        return $this->container['blocks_per_commitment'];
    }

    /**
     * Sets blocks_per_commitment
     *
     * @param int|null $blocks_per_commitment A number of blocks that indicates how often seed nonce hash is included in a block. Seed nonce hash presents in only one out of `blocksPerCommitment`
     *
     * @return self
     */
    public function setBlocksPerCommitment($blocks_per_commitment)
    {
        $this->container['blocks_per_commitment'] = $blocks_per_commitment;

        return $this;
    }

    /**
     * Gets blocks_per_snapshot
     *
     * @return int|null
     */
    public function getBlocksPerSnapshot()
    {
        return $this->container['blocks_per_snapshot'];
    }

    /**
     * Sets blocks_per_snapshot
     *
     * @param int|null $blocks_per_snapshot A number of blocks that indicates how often a snapshot (snapshots are records of the state of rolls distributions) is taken
     *
     * @return self
     */
    public function setBlocksPerSnapshot($blocks_per_snapshot)
    {
        $this->container['blocks_per_snapshot'] = $blocks_per_snapshot;

        return $this;
    }

    /**
     * Gets blocks_per_voting
     *
     * @return int|null
     */
    public function getBlocksPerVoting()
    {
        return $this->container['blocks_per_voting'];
    }

    /**
     * Sets blocks_per_voting
     *
     * @param int|null $blocks_per_voting A number of block that indicates how long a voting period takes
     *
     * @return self
     */
    public function setBlocksPerVoting($blocks_per_voting)
    {
        $this->container['blocks_per_voting'] = $blocks_per_voting;

        return $this;
    }

    /**
     * Gets time_between_blocks
     *
     * @return int|null
     */
    public function getTimeBetweenBlocks()
    {
        return $this->container['time_between_blocks'];
    }

    /**
     * Sets time_between_blocks
     *
     * @param int|null $time_between_blocks Minimum amount of seconds between blocks
     *
     * @return self
     */
    public function setTimeBetweenBlocks($time_between_blocks)
    {
        $this->container['time_between_blocks'] = $time_between_blocks;

        return $this;
    }

    /**
     * Gets endorsers_per_block
     *
     * @return int|null
     */
    public function getEndorsersPerBlock()
    {
        return $this->container['endorsers_per_block'];
    }

    /**
     * Sets endorsers_per_block
     *
     * @param int|null $endorsers_per_block Number of bakers that assigned to endorse a block
     *
     * @return self
     */
    public function setEndorsersPerBlock($endorsers_per_block)
    {
        $this->container['endorsers_per_block'] = $endorsers_per_block;

        return $this;
    }

    /**
     * Gets hard_operation_gas_limit
     *
     * @return int|null
     */
    public function getHardOperationGasLimit()
    {
        return $this->container['hard_operation_gas_limit'];
    }

    /**
     * Sets hard_operation_gas_limit
     *
     * @param int|null $hard_operation_gas_limit Maximum amount of gas that one operation can consume
     *
     * @return self
     */
    public function setHardOperationGasLimit($hard_operation_gas_limit)
    {
        $this->container['hard_operation_gas_limit'] = $hard_operation_gas_limit;

        return $this;
    }

    /**
     * Gets hard_operation_storage_limit
     *
     * @return int|null
     */
    public function getHardOperationStorageLimit()
    {
        return $this->container['hard_operation_storage_limit'];
    }

    /**
     * Sets hard_operation_storage_limit
     *
     * @param int|null $hard_operation_storage_limit Maximum amount of storage that one operation can consume
     *
     * @return self
     */
    public function setHardOperationStorageLimit($hard_operation_storage_limit)
    {
        $this->container['hard_operation_storage_limit'] = $hard_operation_storage_limit;

        return $this;
    }

    /**
     * Gets hard_block_gas_limit
     *
     * @return int|null
     */
    public function getHardBlockGasLimit()
    {
        return $this->container['hard_block_gas_limit'];
    }

    /**
     * Sets hard_block_gas_limit
     *
     * @param int|null $hard_block_gas_limit Maximum amount of total gas usage of a single block
     *
     * @return self
     */
    public function setHardBlockGasLimit($hard_block_gas_limit)
    {
        $this->container['hard_block_gas_limit'] = $hard_block_gas_limit;

        return $this;
    }

    /**
     * Gets tokens_per_roll
     *
     * @return int|null
     */
    public function getTokensPerRoll()
    {
        return $this->container['tokens_per_roll'];
    }

    /**
     * Sets tokens_per_roll
     *
     * @param int|null $tokens_per_roll Required number of tokens to get 1 roll (micro tez)
     *
     * @return self
     */
    public function setTokensPerRoll($tokens_per_roll)
    {
        $this->container['tokens_per_roll'] = $tokens_per_roll;

        return $this;
    }

    /**
     * Gets revelation_reward
     *
     * @return int|null
     */
    public function getRevelationReward()
    {
        return $this->container['revelation_reward'];
    }

    /**
     * Sets revelation_reward
     *
     * @param int|null $revelation_reward Reward for seed nonce revelation (micro tez)
     *
     * @return self
     */
    public function setRevelationReward($revelation_reward)
    {
        $this->container['revelation_reward'] = $revelation_reward;

        return $this;
    }

    /**
     * Gets block_deposit
     *
     * @return int|null
     */
    public function getBlockDeposit()
    {
        return $this->container['block_deposit'];
    }

    /**
     * Sets block_deposit
     *
     * @param int|null $block_deposit Security deposit for baking (producing) a block (micro tez)
     *
     * @return self
     */
    public function setBlockDeposit($block_deposit)
    {
        $this->container['block_deposit'] = $block_deposit;

        return $this;
    }

    /**
     * Gets block_reward
     *
     * @return int[]|null
     */
    public function getBlockReward()
    {
        return $this->container['block_reward'];
    }

    /**
     * Sets block_reward
     *
     * @param int[]|null $block_reward Reward for baking (producing) a block (micro tez)
     *
     * @return self
     */
    public function setBlockReward($block_reward)
    {
        $this->container['block_reward'] = $block_reward;

        return $this;
    }

    /**
     * Gets endorsement_deposit
     *
     * @return int|null
     */
    public function getEndorsementDeposit()
    {
        return $this->container['endorsement_deposit'];
    }

    /**
     * Sets endorsement_deposit
     *
     * @param int|null $endorsement_deposit Security deposit for sending an endorsement operation (micro tez)
     *
     * @return self
     */
    public function setEndorsementDeposit($endorsement_deposit)
    {
        $this->container['endorsement_deposit'] = $endorsement_deposit;

        return $this;
    }

    /**
     * Gets endorsement_reward
     *
     * @return int[]|null
     */
    public function getEndorsementReward()
    {
        return $this->container['endorsement_reward'];
    }

    /**
     * Sets endorsement_reward
     *
     * @param int[]|null $endorsement_reward Reward for sending an endorsement operation (micro tez)
     *
     * @return self
     */
    public function setEndorsementReward($endorsement_reward)
    {
        $this->container['endorsement_reward'] = $endorsement_reward;

        return $this;
    }

    /**
     * Gets origination_size
     *
     * @return int|null
     */
    public function getOriginationSize()
    {
        return $this->container['origination_size'];
    }

    /**
     * Sets origination_size
     *
     * @param int|null $origination_size Initial storage size of an originated (created) account (bytes)
     *
     * @return self
     */
    public function setOriginationSize($origination_size)
    {
        $this->container['origination_size'] = $origination_size;

        return $this;
    }

    /**
     * Gets byte_cost
     *
     * @return int|null
     */
    public function getByteCost()
    {
        return $this->container['byte_cost'];
    }

    /**
     * Sets byte_cost
     *
     * @param int|null $byte_cost Cost of one storage byte in the blockchain (micro tez)
     *
     * @return self
     */
    public function setByteCost($byte_cost)
    {
        $this->container['byte_cost'] = $byte_cost;

        return $this;
    }

    /**
     * Gets proposal_quorum
     *
     * @return double|null
     */
    public function getProposalQuorum()
    {
        return $this->container['proposal_quorum'];
    }

    /**
     * Sets proposal_quorum
     *
     * @param double|null $proposal_quorum Percentage of the total number of rolls required to select a proposal on the proposal period
     *
     * @return self
     */
    public function setProposalQuorum($proposal_quorum)
    {
        $this->container['proposal_quorum'] = $proposal_quorum;

        return $this;
    }

    /**
     * Gets ballot_quorum_min
     *
     * @return double|null
     */
    public function getBallotQuorumMin()
    {
        return $this->container['ballot_quorum_min'];
    }

    /**
     * Sets ballot_quorum_min
     *
     * @param double|null $ballot_quorum_min The minimum value of quorum percentage on the exploration and promotion periods
     *
     * @return self
     */
    public function setBallotQuorumMin($ballot_quorum_min)
    {
        $this->container['ballot_quorum_min'] = $ballot_quorum_min;

        return $this;
    }

    /**
     * Gets ballot_quorum_max
     *
     * @return double|null
     */
    public function getBallotQuorumMax()
    {
        return $this->container['ballot_quorum_max'];
    }

    /**
     * Sets ballot_quorum_max
     *
     * @param double|null $ballot_quorum_max The maximum value of quorum percentage on the exploration and promotion periods
     *
     * @return self
     */
    public function setBallotQuorumMax($ballot_quorum_max)
    {
        $this->container['ballot_quorum_max'] = $ballot_quorum_max;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


