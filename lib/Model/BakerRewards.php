<?php
/**
 * BakerRewards
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  Bzzhh\Tzkt
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * TzKT API
 *
 * # Introduction  TzKT Explorer provides a free REST-like API and WebSocket API for accessing detailed Tezos blockchain data and helps developers build more services and applications on top of Tezos. TzKT is an open-source project, so you can easily clone and build it and use it as a self-hosted service to avoid any risks depending on third-party services.  TzKT API is available for the following Tezos networks with the following base URLs:  - Mainnet: `https://api.tzkt.io/` or `https://api.mainnet.tzkt.io/` ([view docs](https://api.tzkt.io)) - Edo2net: `https://api.edo2net.tzkt.io/` ([view docs](https://api.edo2net.tzkt.io)) - Florencenet: `https://api.florencenet.tzkt.io/` ([view docs](https://api.florencenet.tzkt.io))  We also provide a staging environment for testing newest features and pre-updating client applications before deploying to production:  - Mainnet staging: `https://staging.api.tzkt.io/` or `https://staging.api.mainnet.tzkt.io/` ([view docs](https://staging.api.tzkt.io)) - Edo2net staging: `https://staging.api.edo2net.tzkt.io/` ([view docs](https://staging.api.edo2net.tzkt.io))      Feel free to contact us if you have any questions or feature requests. Your feedback really helps us make TzKT better!  - Email: hello@baking-bad.org - Twitter: https://twitter.com/TezosBakingBad - Telegram: [tg://resolve?domain=baking_bad_chat](tg://resolve?domain=baking_bad_chat) - Slack: https://tezos-dev.slack.com/archives/CV5NX7F2L  And don't forget to star TzKT project [on GitHub](https://github.com/baking-bad/tzkt) ;)  # Terms of Use  TzKT API is free for everyone and for both commercial and non-commercial usage.  If your application or service uses the TzKT API in any forms: directly on frontend or indirectly on backend, you should mention that fact on your website or application by placing the label **\"Powered by TzKT API\"** with a direct link to [tzkt.io](https://tzkt.io).   # Rate Limits  There will be no rate limits as long as our servers can handle the load without additional infrastructure costs. However, any apparent abuse will be prevented by setting targeted rate limits.  Check out [Tezos Explorer API Best Practices](https://baking-bad.org/blog/tag/TzKT/) and in particular [how to optimize requests count](https://baking-bad.org/blog/2020/07/29/tezos-explorer-api-tzkt-how-often-to-make-requests/).  ---
 *
 * The version of the OpenAPI document: v1.5
 * Contact: hello@baking-bad.org
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.2.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Bzzhh\Tzkt\Model;

use \ArrayAccess;
use \Bzzhh\Tzkt\ObjectSerializer;

/**
 * BakerRewards Class Doc Comment
 *
 * @category Class
 * @package  Bzzhh\Tzkt
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class BakerRewards implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'BakerRewards';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'cycle' => 'int',
        'staking_balance' => 'int',
        'delegated_balance' => 'int',
        'num_delegators' => 'int',
        'expected_blocks' => 'double',
        'expected_endorsements' => 'double',
        'future_blocks' => 'int',
        'future_block_rewards' => 'int',
        'future_block_deposits' => 'int',
        'own_blocks' => 'int',
        'own_block_rewards' => 'int',
        'extra_blocks' => 'int',
        'extra_block_rewards' => 'int',
        'missed_own_blocks' => 'int',
        'missed_own_block_rewards' => 'int',
        'missed_extra_blocks' => 'int',
        'missed_extra_block_rewards' => 'int',
        'uncovered_own_blocks' => 'int',
        'uncovered_own_block_rewards' => 'int',
        'uncovered_extra_blocks' => 'int',
        'uncovered_extra_block_rewards' => 'int',
        'block_deposits' => 'int',
        'future_endorsements' => 'int',
        'future_endorsement_rewards' => 'int',
        'future_endorsement_deposits' => 'int',
        'endorsements' => 'int',
        'endorsement_rewards' => 'int',
        'missed_endorsements' => 'int',
        'missed_endorsement_rewards' => 'int',
        'uncovered_endorsements' => 'int',
        'uncovered_endorsement_rewards' => 'int',
        'endorsement_deposits' => 'int',
        'own_block_fees' => 'int',
        'extra_block_fees' => 'int',
        'missed_own_block_fees' => 'int',
        'missed_extra_block_fees' => 'int',
        'uncovered_own_block_fees' => 'int',
        'uncovered_extra_block_fees' => 'int',
        'double_baking_rewards' => 'int',
        'double_baking_lost_deposits' => 'int',
        'double_baking_lost_rewards' => 'int',
        'double_baking_lost_fees' => 'int',
        'double_endorsing_rewards' => 'int',
        'double_endorsing_lost_deposits' => 'int',
        'double_endorsing_lost_rewards' => 'int',
        'double_endorsing_lost_fees' => 'int',
        'revelation_rewards' => 'int',
        'revelation_lost_rewards' => 'int',
        'revelation_lost_fees' => 'int',
        'quote' => 'OneOfQuoteShort'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'cycle' => 'int32',
        'staking_balance' => 'int64',
        'delegated_balance' => 'int64',
        'num_delegators' => 'int32',
        'expected_blocks' => 'double',
        'expected_endorsements' => 'double',
        'future_blocks' => 'int32',
        'future_block_rewards' => 'int64',
        'future_block_deposits' => 'int64',
        'own_blocks' => 'int32',
        'own_block_rewards' => 'int64',
        'extra_blocks' => 'int32',
        'extra_block_rewards' => 'int64',
        'missed_own_blocks' => 'int32',
        'missed_own_block_rewards' => 'int64',
        'missed_extra_blocks' => 'int32',
        'missed_extra_block_rewards' => 'int64',
        'uncovered_own_blocks' => 'int32',
        'uncovered_own_block_rewards' => 'int64',
        'uncovered_extra_blocks' => 'int32',
        'uncovered_extra_block_rewards' => 'int64',
        'block_deposits' => 'int64',
        'future_endorsements' => 'int32',
        'future_endorsement_rewards' => 'int64',
        'future_endorsement_deposits' => 'int64',
        'endorsements' => 'int32',
        'endorsement_rewards' => 'int64',
        'missed_endorsements' => 'int32',
        'missed_endorsement_rewards' => 'int64',
        'uncovered_endorsements' => 'int32',
        'uncovered_endorsement_rewards' => 'int64',
        'endorsement_deposits' => 'int64',
        'own_block_fees' => 'int64',
        'extra_block_fees' => 'int64',
        'missed_own_block_fees' => 'int64',
        'missed_extra_block_fees' => 'int64',
        'uncovered_own_block_fees' => 'int64',
        'uncovered_extra_block_fees' => 'int64',
        'double_baking_rewards' => 'int64',
        'double_baking_lost_deposits' => 'int64',
        'double_baking_lost_rewards' => 'int64',
        'double_baking_lost_fees' => 'int64',
        'double_endorsing_rewards' => 'int64',
        'double_endorsing_lost_deposits' => 'int64',
        'double_endorsing_lost_rewards' => 'int64',
        'double_endorsing_lost_fees' => 'int64',
        'revelation_rewards' => 'int64',
        'revelation_lost_rewards' => 'int64',
        'revelation_lost_fees' => 'int64',
        'quote' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'cycle' => 'cycle',
        'staking_balance' => 'stakingBalance',
        'delegated_balance' => 'delegatedBalance',
        'num_delegators' => 'numDelegators',
        'expected_blocks' => 'expectedBlocks',
        'expected_endorsements' => 'expectedEndorsements',
        'future_blocks' => 'futureBlocks',
        'future_block_rewards' => 'futureBlockRewards',
        'future_block_deposits' => 'futureBlockDeposits',
        'own_blocks' => 'ownBlocks',
        'own_block_rewards' => 'ownBlockRewards',
        'extra_blocks' => 'extraBlocks',
        'extra_block_rewards' => 'extraBlockRewards',
        'missed_own_blocks' => 'missedOwnBlocks',
        'missed_own_block_rewards' => 'missedOwnBlockRewards',
        'missed_extra_blocks' => 'missedExtraBlocks',
        'missed_extra_block_rewards' => 'missedExtraBlockRewards',
        'uncovered_own_blocks' => 'uncoveredOwnBlocks',
        'uncovered_own_block_rewards' => 'uncoveredOwnBlockRewards',
        'uncovered_extra_blocks' => 'uncoveredExtraBlocks',
        'uncovered_extra_block_rewards' => 'uncoveredExtraBlockRewards',
        'block_deposits' => 'blockDeposits',
        'future_endorsements' => 'futureEndorsements',
        'future_endorsement_rewards' => 'futureEndorsementRewards',
        'future_endorsement_deposits' => 'futureEndorsementDeposits',
        'endorsements' => 'endorsements',
        'endorsement_rewards' => 'endorsementRewards',
        'missed_endorsements' => 'missedEndorsements',
        'missed_endorsement_rewards' => 'missedEndorsementRewards',
        'uncovered_endorsements' => 'uncoveredEndorsements',
        'uncovered_endorsement_rewards' => 'uncoveredEndorsementRewards',
        'endorsement_deposits' => 'endorsementDeposits',
        'own_block_fees' => 'ownBlockFees',
        'extra_block_fees' => 'extraBlockFees',
        'missed_own_block_fees' => 'missedOwnBlockFees',
        'missed_extra_block_fees' => 'missedExtraBlockFees',
        'uncovered_own_block_fees' => 'uncoveredOwnBlockFees',
        'uncovered_extra_block_fees' => 'uncoveredExtraBlockFees',
        'double_baking_rewards' => 'doubleBakingRewards',
        'double_baking_lost_deposits' => 'doubleBakingLostDeposits',
        'double_baking_lost_rewards' => 'doubleBakingLostRewards',
        'double_baking_lost_fees' => 'doubleBakingLostFees',
        'double_endorsing_rewards' => 'doubleEndorsingRewards',
        'double_endorsing_lost_deposits' => 'doubleEndorsingLostDeposits',
        'double_endorsing_lost_rewards' => 'doubleEndorsingLostRewards',
        'double_endorsing_lost_fees' => 'doubleEndorsingLostFees',
        'revelation_rewards' => 'revelationRewards',
        'revelation_lost_rewards' => 'revelationLostRewards',
        'revelation_lost_fees' => 'revelationLostFees',
        'quote' => 'quote'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'cycle' => 'setCycle',
        'staking_balance' => 'setStakingBalance',
        'delegated_balance' => 'setDelegatedBalance',
        'num_delegators' => 'setNumDelegators',
        'expected_blocks' => 'setExpectedBlocks',
        'expected_endorsements' => 'setExpectedEndorsements',
        'future_blocks' => 'setFutureBlocks',
        'future_block_rewards' => 'setFutureBlockRewards',
        'future_block_deposits' => 'setFutureBlockDeposits',
        'own_blocks' => 'setOwnBlocks',
        'own_block_rewards' => 'setOwnBlockRewards',
        'extra_blocks' => 'setExtraBlocks',
        'extra_block_rewards' => 'setExtraBlockRewards',
        'missed_own_blocks' => 'setMissedOwnBlocks',
        'missed_own_block_rewards' => 'setMissedOwnBlockRewards',
        'missed_extra_blocks' => 'setMissedExtraBlocks',
        'missed_extra_block_rewards' => 'setMissedExtraBlockRewards',
        'uncovered_own_blocks' => 'setUncoveredOwnBlocks',
        'uncovered_own_block_rewards' => 'setUncoveredOwnBlockRewards',
        'uncovered_extra_blocks' => 'setUncoveredExtraBlocks',
        'uncovered_extra_block_rewards' => 'setUncoveredExtraBlockRewards',
        'block_deposits' => 'setBlockDeposits',
        'future_endorsements' => 'setFutureEndorsements',
        'future_endorsement_rewards' => 'setFutureEndorsementRewards',
        'future_endorsement_deposits' => 'setFutureEndorsementDeposits',
        'endorsements' => 'setEndorsements',
        'endorsement_rewards' => 'setEndorsementRewards',
        'missed_endorsements' => 'setMissedEndorsements',
        'missed_endorsement_rewards' => 'setMissedEndorsementRewards',
        'uncovered_endorsements' => 'setUncoveredEndorsements',
        'uncovered_endorsement_rewards' => 'setUncoveredEndorsementRewards',
        'endorsement_deposits' => 'setEndorsementDeposits',
        'own_block_fees' => 'setOwnBlockFees',
        'extra_block_fees' => 'setExtraBlockFees',
        'missed_own_block_fees' => 'setMissedOwnBlockFees',
        'missed_extra_block_fees' => 'setMissedExtraBlockFees',
        'uncovered_own_block_fees' => 'setUncoveredOwnBlockFees',
        'uncovered_extra_block_fees' => 'setUncoveredExtraBlockFees',
        'double_baking_rewards' => 'setDoubleBakingRewards',
        'double_baking_lost_deposits' => 'setDoubleBakingLostDeposits',
        'double_baking_lost_rewards' => 'setDoubleBakingLostRewards',
        'double_baking_lost_fees' => 'setDoubleBakingLostFees',
        'double_endorsing_rewards' => 'setDoubleEndorsingRewards',
        'double_endorsing_lost_deposits' => 'setDoubleEndorsingLostDeposits',
        'double_endorsing_lost_rewards' => 'setDoubleEndorsingLostRewards',
        'double_endorsing_lost_fees' => 'setDoubleEndorsingLostFees',
        'revelation_rewards' => 'setRevelationRewards',
        'revelation_lost_rewards' => 'setRevelationLostRewards',
        'revelation_lost_fees' => 'setRevelationLostFees',
        'quote' => 'setQuote'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'cycle' => 'getCycle',
        'staking_balance' => 'getStakingBalance',
        'delegated_balance' => 'getDelegatedBalance',
        'num_delegators' => 'getNumDelegators',
        'expected_blocks' => 'getExpectedBlocks',
        'expected_endorsements' => 'getExpectedEndorsements',
        'future_blocks' => 'getFutureBlocks',
        'future_block_rewards' => 'getFutureBlockRewards',
        'future_block_deposits' => 'getFutureBlockDeposits',
        'own_blocks' => 'getOwnBlocks',
        'own_block_rewards' => 'getOwnBlockRewards',
        'extra_blocks' => 'getExtraBlocks',
        'extra_block_rewards' => 'getExtraBlockRewards',
        'missed_own_blocks' => 'getMissedOwnBlocks',
        'missed_own_block_rewards' => 'getMissedOwnBlockRewards',
        'missed_extra_blocks' => 'getMissedExtraBlocks',
        'missed_extra_block_rewards' => 'getMissedExtraBlockRewards',
        'uncovered_own_blocks' => 'getUncoveredOwnBlocks',
        'uncovered_own_block_rewards' => 'getUncoveredOwnBlockRewards',
        'uncovered_extra_blocks' => 'getUncoveredExtraBlocks',
        'uncovered_extra_block_rewards' => 'getUncoveredExtraBlockRewards',
        'block_deposits' => 'getBlockDeposits',
        'future_endorsements' => 'getFutureEndorsements',
        'future_endorsement_rewards' => 'getFutureEndorsementRewards',
        'future_endorsement_deposits' => 'getFutureEndorsementDeposits',
        'endorsements' => 'getEndorsements',
        'endorsement_rewards' => 'getEndorsementRewards',
        'missed_endorsements' => 'getMissedEndorsements',
        'missed_endorsement_rewards' => 'getMissedEndorsementRewards',
        'uncovered_endorsements' => 'getUncoveredEndorsements',
        'uncovered_endorsement_rewards' => 'getUncoveredEndorsementRewards',
        'endorsement_deposits' => 'getEndorsementDeposits',
        'own_block_fees' => 'getOwnBlockFees',
        'extra_block_fees' => 'getExtraBlockFees',
        'missed_own_block_fees' => 'getMissedOwnBlockFees',
        'missed_extra_block_fees' => 'getMissedExtraBlockFees',
        'uncovered_own_block_fees' => 'getUncoveredOwnBlockFees',
        'uncovered_extra_block_fees' => 'getUncoveredExtraBlockFees',
        'double_baking_rewards' => 'getDoubleBakingRewards',
        'double_baking_lost_deposits' => 'getDoubleBakingLostDeposits',
        'double_baking_lost_rewards' => 'getDoubleBakingLostRewards',
        'double_baking_lost_fees' => 'getDoubleBakingLostFees',
        'double_endorsing_rewards' => 'getDoubleEndorsingRewards',
        'double_endorsing_lost_deposits' => 'getDoubleEndorsingLostDeposits',
        'double_endorsing_lost_rewards' => 'getDoubleEndorsingLostRewards',
        'double_endorsing_lost_fees' => 'getDoubleEndorsingLostFees',
        'revelation_rewards' => 'getRevelationRewards',
        'revelation_lost_rewards' => 'getRevelationLostRewards',
        'revelation_lost_fees' => 'getRevelationLostFees',
        'quote' => 'getQuote'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['cycle'] = $data['cycle'] ?? null;
        $this->container['staking_balance'] = $data['staking_balance'] ?? null;
        $this->container['delegated_balance'] = $data['delegated_balance'] ?? null;
        $this->container['num_delegators'] = $data['num_delegators'] ?? null;
        $this->container['expected_blocks'] = $data['expected_blocks'] ?? null;
        $this->container['expected_endorsements'] = $data['expected_endorsements'] ?? null;
        $this->container['future_blocks'] = $data['future_blocks'] ?? null;
        $this->container['future_block_rewards'] = $data['future_block_rewards'] ?? null;
        $this->container['future_block_deposits'] = $data['future_block_deposits'] ?? null;
        $this->container['own_blocks'] = $data['own_blocks'] ?? null;
        $this->container['own_block_rewards'] = $data['own_block_rewards'] ?? null;
        $this->container['extra_blocks'] = $data['extra_blocks'] ?? null;
        $this->container['extra_block_rewards'] = $data['extra_block_rewards'] ?? null;
        $this->container['missed_own_blocks'] = $data['missed_own_blocks'] ?? null;
        $this->container['missed_own_block_rewards'] = $data['missed_own_block_rewards'] ?? null;
        $this->container['missed_extra_blocks'] = $data['missed_extra_blocks'] ?? null;
        $this->container['missed_extra_block_rewards'] = $data['missed_extra_block_rewards'] ?? null;
        $this->container['uncovered_own_blocks'] = $data['uncovered_own_blocks'] ?? null;
        $this->container['uncovered_own_block_rewards'] = $data['uncovered_own_block_rewards'] ?? null;
        $this->container['uncovered_extra_blocks'] = $data['uncovered_extra_blocks'] ?? null;
        $this->container['uncovered_extra_block_rewards'] = $data['uncovered_extra_block_rewards'] ?? null;
        $this->container['block_deposits'] = $data['block_deposits'] ?? null;
        $this->container['future_endorsements'] = $data['future_endorsements'] ?? null;
        $this->container['future_endorsement_rewards'] = $data['future_endorsement_rewards'] ?? null;
        $this->container['future_endorsement_deposits'] = $data['future_endorsement_deposits'] ?? null;
        $this->container['endorsements'] = $data['endorsements'] ?? null;
        $this->container['endorsement_rewards'] = $data['endorsement_rewards'] ?? null;
        $this->container['missed_endorsements'] = $data['missed_endorsements'] ?? null;
        $this->container['missed_endorsement_rewards'] = $data['missed_endorsement_rewards'] ?? null;
        $this->container['uncovered_endorsements'] = $data['uncovered_endorsements'] ?? null;
        $this->container['uncovered_endorsement_rewards'] = $data['uncovered_endorsement_rewards'] ?? null;
        $this->container['endorsement_deposits'] = $data['endorsement_deposits'] ?? null;
        $this->container['own_block_fees'] = $data['own_block_fees'] ?? null;
        $this->container['extra_block_fees'] = $data['extra_block_fees'] ?? null;
        $this->container['missed_own_block_fees'] = $data['missed_own_block_fees'] ?? null;
        $this->container['missed_extra_block_fees'] = $data['missed_extra_block_fees'] ?? null;
        $this->container['uncovered_own_block_fees'] = $data['uncovered_own_block_fees'] ?? null;
        $this->container['uncovered_extra_block_fees'] = $data['uncovered_extra_block_fees'] ?? null;
        $this->container['double_baking_rewards'] = $data['double_baking_rewards'] ?? null;
        $this->container['double_baking_lost_deposits'] = $data['double_baking_lost_deposits'] ?? null;
        $this->container['double_baking_lost_rewards'] = $data['double_baking_lost_rewards'] ?? null;
        $this->container['double_baking_lost_fees'] = $data['double_baking_lost_fees'] ?? null;
        $this->container['double_endorsing_rewards'] = $data['double_endorsing_rewards'] ?? null;
        $this->container['double_endorsing_lost_deposits'] = $data['double_endorsing_lost_deposits'] ?? null;
        $this->container['double_endorsing_lost_rewards'] = $data['double_endorsing_lost_rewards'] ?? null;
        $this->container['double_endorsing_lost_fees'] = $data['double_endorsing_lost_fees'] ?? null;
        $this->container['revelation_rewards'] = $data['revelation_rewards'] ?? null;
        $this->container['revelation_lost_rewards'] = $data['revelation_lost_rewards'] ?? null;
        $this->container['revelation_lost_fees'] = $data['revelation_lost_fees'] ?? null;
        $this->container['quote'] = $data['quote'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets cycle
     *
     * @return int|null
     */
    public function getCycle()
    {
        return $this->container['cycle'];
    }

    /**
     * Sets cycle
     *
     * @param int|null $cycle Cycle in which rewards have been or will be earned.
     *
     * @return self
     */
    public function setCycle($cycle)
    {
        $this->container['cycle'] = $cycle;

        return $this;
    }

    /**
     * Gets staking_balance
     *
     * @return int|null
     */
    public function getStakingBalance()
    {
        return $this->container['staking_balance'];
    }

    /**
     * Sets staking_balance
     *
     * @param int|null $staking_balance Staking balance of the baker at the snapshot time.
     *
     * @return self
     */
    public function setStakingBalance($staking_balance)
    {
        $this->container['staking_balance'] = $staking_balance;

        return $this;
    }

    /**
     * Gets delegated_balance
     *
     * @return int|null
     */
    public function getDelegatedBalance()
    {
        return $this->container['delegated_balance'];
    }

    /**
     * Sets delegated_balance
     *
     * @param int|null $delegated_balance Balance delegated to the baker at the snapshot time (sum of delegators' balances).
     *
     * @return self
     */
    public function setDelegatedBalance($delegated_balance)
    {
        $this->container['delegated_balance'] = $delegated_balance;

        return $this;
    }

    /**
     * Gets num_delegators
     *
     * @return int|null
     */
    public function getNumDelegators()
    {
        return $this->container['num_delegators'];
    }

    /**
     * Sets num_delegators
     *
     * @param int|null $num_delegators Number of delegators at the snapshot time.
     *
     * @return self
     */
    public function setNumDelegators($num_delegators)
    {
        $this->container['num_delegators'] = $num_delegators;

        return $this;
    }

    /**
     * Gets expected_blocks
     *
     * @return double|null
     */
    public function getExpectedBlocks()
    {
        return $this->container['expected_blocks'];
    }

    /**
     * Sets expected_blocks
     *
     * @param double|null $expected_blocks Expected value of how many blocks baker should produce based on baker's rolls, total rolls and blocks per cycle.
     *
     * @return self
     */
    public function setExpectedBlocks($expected_blocks)
    {
        $this->container['expected_blocks'] = $expected_blocks;

        return $this;
    }

    /**
     * Gets expected_endorsements
     *
     * @return double|null
     */
    public function getExpectedEndorsements()
    {
        return $this->container['expected_endorsements'];
    }

    /**
     * Sets expected_endorsements
     *
     * @param double|null $expected_endorsements Expected value of how many slots baker should validate based on baker's rolls, total rolls and endorsing slots per cycle.
     *
     * @return self
     */
    public function setExpectedEndorsements($expected_endorsements)
    {
        $this->container['expected_endorsements'] = $expected_endorsements;

        return $this;
    }

    /**
     * Gets future_blocks
     *
     * @return int|null
     */
    public function getFutureBlocks()
    {
        return $this->container['future_blocks'];
    }

    /**
     * Sets future_blocks
     *
     * @param int|null $future_blocks Number of blocks which baker is allowed to produce in this cycle based on future baking rights.
     *
     * @return self
     */
    public function setFutureBlocks($future_blocks)
    {
        $this->container['future_blocks'] = $future_blocks;

        return $this;
    }

    /**
     * Gets future_block_rewards
     *
     * @return int|null
     */
    public function getFutureBlockRewards()
    {
        return $this->container['future_block_rewards'];
    }

    /**
     * Sets future_block_rewards
     *
     * @param int|null $future_block_rewards Estimated value of future block rewards.
     *
     * @return self
     */
    public function setFutureBlockRewards($future_block_rewards)
    {
        $this->container['future_block_rewards'] = $future_block_rewards;

        return $this;
    }

    /**
     * Gets future_block_deposits
     *
     * @return int|null
     */
    public function getFutureBlockDeposits()
    {
        return $this->container['future_block_deposits'];
    }

    /**
     * Sets future_block_deposits
     *
     * @param int|null $future_block_deposits Estimated value of bonds which will be locked as security deposit for future blocks.
     *
     * @return self
     */
    public function setFutureBlockDeposits($future_block_deposits)
    {
        $this->container['future_block_deposits'] = $future_block_deposits;

        return $this;
    }

    /**
     * Gets own_blocks
     *
     * @return int|null
     */
    public function getOwnBlocks()
    {
        return $this->container['own_blocks'];
    }

    /**
     * Sets own_blocks
     *
     * @param int|null $own_blocks Number of successfully baked blocks with priority `0`.
     *
     * @return self
     */
    public function setOwnBlocks($own_blocks)
    {
        $this->container['own_blocks'] = $own_blocks;

        return $this;
    }

    /**
     * Gets own_block_rewards
     *
     * @return int|null
     */
    public function getOwnBlockRewards()
    {
        return $this->container['own_block_rewards'];
    }

    /**
     * Sets own_block_rewards
     *
     * @param int|null $own_block_rewards Rewards received for blocks baked with priority `0`.
     *
     * @return self
     */
    public function setOwnBlockRewards($own_block_rewards)
    {
        $this->container['own_block_rewards'] = $own_block_rewards;

        return $this;
    }

    /**
     * Gets extra_blocks
     *
     * @return int|null
     */
    public function getExtraBlocks()
    {
        return $this->container['extra_blocks'];
    }

    /**
     * Sets extra_blocks
     *
     * @param int|null $extra_blocks Number of successfully baked blocks with priority `1+`.
     *
     * @return self
     */
    public function setExtraBlocks($extra_blocks)
    {
        $this->container['extra_blocks'] = $extra_blocks;

        return $this;
    }

    /**
     * Gets extra_block_rewards
     *
     * @return int|null
     */
    public function getExtraBlockRewards()
    {
        return $this->container['extra_block_rewards'];
    }

    /**
     * Sets extra_block_rewards
     *
     * @param int|null $extra_block_rewards Rewards received for blocks baked with priority `1+`.
     *
     * @return self
     */
    public function setExtraBlockRewards($extra_block_rewards)
    {
        $this->container['extra_block_rewards'] = $extra_block_rewards;

        return $this;
    }

    /**
     * Gets missed_own_blocks
     *
     * @return int|null
     */
    public function getMissedOwnBlocks()
    {
        return $this->container['missed_own_blocks'];
    }

    /**
     * Sets missed_own_blocks
     *
     * @param int|null $missed_own_blocks Number of blocks which were missed at priority `0` for no apparent reason (usually due to issues with network or node).
     *
     * @return self
     */
    public function setMissedOwnBlocks($missed_own_blocks)
    {
        $this->container['missed_own_blocks'] = $missed_own_blocks;

        return $this;
    }

    /**
     * Gets missed_own_block_rewards
     *
     * @return int|null
     */
    public function getMissedOwnBlockRewards()
    {
        return $this->container['missed_own_block_rewards'];
    }

    /**
     * Sets missed_own_block_rewards
     *
     * @param int|null $missed_own_block_rewards Rewards which were not received due to missing own blocks.
     *
     * @return self
     */
    public function setMissedOwnBlockRewards($missed_own_block_rewards)
    {
        $this->container['missed_own_block_rewards'] = $missed_own_block_rewards;

        return $this;
    }

    /**
     * Gets missed_extra_blocks
     *
     * @return int|null
     */
    public function getMissedExtraBlocks()
    {
        return $this->container['missed_extra_blocks'];
    }

    /**
     * Sets missed_extra_blocks
     *
     * @param int|null $missed_extra_blocks Number of blocks which were missed at priority `1+` for no apparent reason (usually due to issues with network or node).
     *
     * @return self
     */
    public function setMissedExtraBlocks($missed_extra_blocks)
    {
        $this->container['missed_extra_blocks'] = $missed_extra_blocks;

        return $this;
    }

    /**
     * Gets missed_extra_block_rewards
     *
     * @return int|null
     */
    public function getMissedExtraBlockRewards()
    {
        return $this->container['missed_extra_block_rewards'];
    }

    /**
     * Sets missed_extra_block_rewards
     *
     * @param int|null $missed_extra_block_rewards Rewards which were not received due to missing extra blocks.
     *
     * @return self
     */
    public function setMissedExtraBlockRewards($missed_extra_block_rewards)
    {
        $this->container['missed_extra_block_rewards'] = $missed_extra_block_rewards;

        return $this;
    }

    /**
     * Gets uncovered_own_blocks
     *
     * @return int|null
     */
    public function getUncoveredOwnBlocks()
    {
        return $this->container['uncovered_own_blocks'];
    }

    /**
     * Sets uncovered_own_blocks
     *
     * @param int|null $uncovered_own_blocks Number of blocks which were missed at priority `0` due to lack of bonds (for example, when a baker is overdelegated).
     *
     * @return self
     */
    public function setUncoveredOwnBlocks($uncovered_own_blocks)
    {
        $this->container['uncovered_own_blocks'] = $uncovered_own_blocks;

        return $this;
    }

    /**
     * Gets uncovered_own_block_rewards
     *
     * @return int|null
     */
    public function getUncoveredOwnBlockRewards()
    {
        return $this->container['uncovered_own_block_rewards'];
    }

    /**
     * Sets uncovered_own_block_rewards
     *
     * @param int|null $uncovered_own_block_rewards Rewards which were not received due to missing own blocks due to lack of bonds.
     *
     * @return self
     */
    public function setUncoveredOwnBlockRewards($uncovered_own_block_rewards)
    {
        $this->container['uncovered_own_block_rewards'] = $uncovered_own_block_rewards;

        return $this;
    }

    /**
     * Gets uncovered_extra_blocks
     *
     * @return int|null
     */
    public function getUncoveredExtraBlocks()
    {
        return $this->container['uncovered_extra_blocks'];
    }

    /**
     * Sets uncovered_extra_blocks
     *
     * @param int|null $uncovered_extra_blocks Number of blocks which were missed at priority `1+` due to lack of bonds (for example, when a baker is overdelegated).
     *
     * @return self
     */
    public function setUncoveredExtraBlocks($uncovered_extra_blocks)
    {
        $this->container['uncovered_extra_blocks'] = $uncovered_extra_blocks;

        return $this;
    }

    /**
     * Gets uncovered_extra_block_rewards
     *
     * @return int|null
     */
    public function getUncoveredExtraBlockRewards()
    {
        return $this->container['uncovered_extra_block_rewards'];
    }

    /**
     * Sets uncovered_extra_block_rewards
     *
     * @param int|null $uncovered_extra_block_rewards Rewards which were not received due to missing extra blocks due to lack of bonds.
     *
     * @return self
     */
    public function setUncoveredExtraBlockRewards($uncovered_extra_block_rewards)
    {
        $this->container['uncovered_extra_block_rewards'] = $uncovered_extra_block_rewards;

        return $this;
    }

    /**
     * Gets block_deposits
     *
     * @return int|null
     */
    public function getBlockDeposits()
    {
        return $this->container['block_deposits'];
    }

    /**
     * Sets block_deposits
     *
     * @param int|null $block_deposits Bonds which were locked as a security deposit for baking own and extra blocks.
     *
     * @return self
     */
    public function setBlockDeposits($block_deposits)
    {
        $this->container['block_deposits'] = $block_deposits;

        return $this;
    }

    /**
     * Gets future_endorsements
     *
     * @return int|null
     */
    public function getFutureEndorsements()
    {
        return $this->container['future_endorsements'];
    }

    /**
     * Sets future_endorsements
     *
     * @param int|null $future_endorsements Number of slots which baker is allowed to validate in this cycle based on future endorsing rights.
     *
     * @return self
     */
    public function setFutureEndorsements($future_endorsements)
    {
        $this->container['future_endorsements'] = $future_endorsements;

        return $this;
    }

    /**
     * Gets future_endorsement_rewards
     *
     * @return int|null
     */
    public function getFutureEndorsementRewards()
    {
        return $this->container['future_endorsement_rewards'];
    }

    /**
     * Sets future_endorsement_rewards
     *
     * @param int|null $future_endorsement_rewards Estimated value of future endorsing rewards.
     *
     * @return self
     */
    public function setFutureEndorsementRewards($future_endorsement_rewards)
    {
        $this->container['future_endorsement_rewards'] = $future_endorsement_rewards;

        return $this;
    }

    /**
     * Gets future_endorsement_deposits
     *
     * @return int|null
     */
    public function getFutureEndorsementDeposits()
    {
        return $this->container['future_endorsement_deposits'];
    }

    /**
     * Sets future_endorsement_deposits
     *
     * @param int|null $future_endorsement_deposits Estimated value of bonds which will be locked as security deposit for future endorsements.
     *
     * @return self
     */
    public function setFutureEndorsementDeposits($future_endorsement_deposits)
    {
        $this->container['future_endorsement_deposits'] = $future_endorsement_deposits;

        return $this;
    }

    /**
     * Gets endorsements
     *
     * @return int|null
     */
    public function getEndorsements()
    {
        return $this->container['endorsements'];
    }

    /**
     * Sets endorsements
     *
     * @param int|null $endorsements Number of successfully endorsed slots.
     *
     * @return self
     */
    public function setEndorsements($endorsements)
    {
        $this->container['endorsements'] = $endorsements;

        return $this;
    }

    /**
     * Gets endorsement_rewards
     *
     * @return int|null
     */
    public function getEndorsementRewards()
    {
        return $this->container['endorsement_rewards'];
    }

    /**
     * Sets endorsement_rewards
     *
     * @param int|null $endorsement_rewards Rewards received for endorsed slots.
     *
     * @return self
     */
    public function setEndorsementRewards($endorsement_rewards)
    {
        $this->container['endorsement_rewards'] = $endorsement_rewards;

        return $this;
    }

    /**
     * Gets missed_endorsements
     *
     * @return int|null
     */
    public function getMissedEndorsements()
    {
        return $this->container['missed_endorsements'];
    }

    /**
     * Sets missed_endorsements
     *
     * @param int|null $missed_endorsements Number of endorsing slots which were missed for no apparent reason (usually due to issues with network or node).
     *
     * @return self
     */
    public function setMissedEndorsements($missed_endorsements)
    {
        $this->container['missed_endorsements'] = $missed_endorsements;

        return $this;
    }

    /**
     * Gets missed_endorsement_rewards
     *
     * @return int|null
     */
    public function getMissedEndorsementRewards()
    {
        return $this->container['missed_endorsement_rewards'];
    }

    /**
     * Sets missed_endorsement_rewards
     *
     * @param int|null $missed_endorsement_rewards Rewards which were not received due to missing endorsements.
     *
     * @return self
     */
    public function setMissedEndorsementRewards($missed_endorsement_rewards)
    {
        $this->container['missed_endorsement_rewards'] = $missed_endorsement_rewards;

        return $this;
    }

    /**
     * Gets uncovered_endorsements
     *
     * @return int|null
     */
    public function getUncoveredEndorsements()
    {
        return $this->container['uncovered_endorsements'];
    }

    /**
     * Sets uncovered_endorsements
     *
     * @param int|null $uncovered_endorsements Number of endorsing slots which were missed due to lack of bonds (for example, when a baker is overdelegated).
     *
     * @return self
     */
    public function setUncoveredEndorsements($uncovered_endorsements)
    {
        $this->container['uncovered_endorsements'] = $uncovered_endorsements;

        return $this;
    }

    /**
     * Gets uncovered_endorsement_rewards
     *
     * @return int|null
     */
    public function getUncoveredEndorsementRewards()
    {
        return $this->container['uncovered_endorsement_rewards'];
    }

    /**
     * Sets uncovered_endorsement_rewards
     *
     * @param int|null $uncovered_endorsement_rewards Rewards which were not received due to missing endorsements due to lack of bonds.
     *
     * @return self
     */
    public function setUncoveredEndorsementRewards($uncovered_endorsement_rewards)
    {
        $this->container['uncovered_endorsement_rewards'] = $uncovered_endorsement_rewards;

        return $this;
    }

    /**
     * Gets endorsement_deposits
     *
     * @return int|null
     */
    public function getEndorsementDeposits()
    {
        return $this->container['endorsement_deposits'];
    }

    /**
     * Sets endorsement_deposits
     *
     * @param int|null $endorsement_deposits Bonds which were locked as a security deposit for endorsed slots.
     *
     * @return self
     */
    public function setEndorsementDeposits($endorsement_deposits)
    {
        $this->container['endorsement_deposits'] = $endorsement_deposits;

        return $this;
    }

    /**
     * Gets own_block_fees
     *
     * @return int|null
     */
    public function getOwnBlockFees()
    {
        return $this->container['own_block_fees'];
    }

    /**
     * Sets own_block_fees
     *
     * @param int|null $own_block_fees Operation fees which were harvested from successfully baked blocks with priority `0`.
     *
     * @return self
     */
    public function setOwnBlockFees($own_block_fees)
    {
        $this->container['own_block_fees'] = $own_block_fees;

        return $this;
    }

    /**
     * Gets extra_block_fees
     *
     * @return int|null
     */
    public function getExtraBlockFees()
    {
        return $this->container['extra_block_fees'];
    }

    /**
     * Sets extra_block_fees
     *
     * @param int|null $extra_block_fees Operation fees which were harvested from successfully baked blocks with priority `1+`.
     *
     * @return self
     */
    public function setExtraBlockFees($extra_block_fees)
    {
        $this->container['extra_block_fees'] = $extra_block_fees;

        return $this;
    }

    /**
     * Gets missed_own_block_fees
     *
     * @return int|null
     */
    public function getMissedOwnBlockFees()
    {
        return $this->container['missed_own_block_fees'];
    }

    /**
     * Sets missed_own_block_fees
     *
     * @param int|null $missed_own_block_fees Operation fees which were not received due to missing own blocks.
     *
     * @return self
     */
    public function setMissedOwnBlockFees($missed_own_block_fees)
    {
        $this->container['missed_own_block_fees'] = $missed_own_block_fees;

        return $this;
    }

    /**
     * Gets missed_extra_block_fees
     *
     * @return int|null
     */
    public function getMissedExtraBlockFees()
    {
        return $this->container['missed_extra_block_fees'];
    }

    /**
     * Sets missed_extra_block_fees
     *
     * @param int|null $missed_extra_block_fees Operation fees which were not received due to missing extra blocks.
     *
     * @return self
     */
    public function setMissedExtraBlockFees($missed_extra_block_fees)
    {
        $this->container['missed_extra_block_fees'] = $missed_extra_block_fees;

        return $this;
    }

    /**
     * Gets uncovered_own_block_fees
     *
     * @return int|null
     */
    public function getUncoveredOwnBlockFees()
    {
        return $this->container['uncovered_own_block_fees'];
    }

    /**
     * Sets uncovered_own_block_fees
     *
     * @param int|null $uncovered_own_block_fees Operation fees which were not received due to missing own blocks (due to lack of bonds).
     *
     * @return self
     */
    public function setUncoveredOwnBlockFees($uncovered_own_block_fees)
    {
        $this->container['uncovered_own_block_fees'] = $uncovered_own_block_fees;

        return $this;
    }

    /**
     * Gets uncovered_extra_block_fees
     *
     * @return int|null
     */
    public function getUncoveredExtraBlockFees()
    {
        return $this->container['uncovered_extra_block_fees'];
    }

    /**
     * Sets uncovered_extra_block_fees
     *
     * @param int|null $uncovered_extra_block_fees Operation fees which were not received due to missing extra blocks (due to lack of bonds).
     *
     * @return self
     */
    public function setUncoveredExtraBlockFees($uncovered_extra_block_fees)
    {
        $this->container['uncovered_extra_block_fees'] = $uncovered_extra_block_fees;

        return $this;
    }

    /**
     * Gets double_baking_rewards
     *
     * @return int|null
     */
    public function getDoubleBakingRewards()
    {
        return $this->container['double_baking_rewards'];
    }

    /**
     * Sets double_baking_rewards
     *
     * @param int|null $double_baking_rewards Rewards for detecting double baking (accusing someone of producing two different blocks at the same level).
     *
     * @return self
     */
    public function setDoubleBakingRewards($double_baking_rewards)
    {
        $this->container['double_baking_rewards'] = $double_baking_rewards;

        return $this;
    }

    /**
     * Gets double_baking_lost_deposits
     *
     * @return int|null
     */
    public function getDoubleBakingLostDeposits()
    {
        return $this->container['double_baking_lost_deposits'];
    }

    /**
     * Sets double_baking_lost_deposits
     *
     * @param int|null $double_baking_lost_deposits Bonds lost due to double baking
     *
     * @return self
     */
    public function setDoubleBakingLostDeposits($double_baking_lost_deposits)
    {
        $this->container['double_baking_lost_deposits'] = $double_baking_lost_deposits;

        return $this;
    }

    /**
     * Gets double_baking_lost_rewards
     *
     * @return int|null
     */
    public function getDoubleBakingLostRewards()
    {
        return $this->container['double_baking_lost_rewards'];
    }

    /**
     * Sets double_baking_lost_rewards
     *
     * @param int|null $double_baking_lost_rewards Rewards lost due to double baking
     *
     * @return self
     */
    public function setDoubleBakingLostRewards($double_baking_lost_rewards)
    {
        $this->container['double_baking_lost_rewards'] = $double_baking_lost_rewards;

        return $this;
    }

    /**
     * Gets double_baking_lost_fees
     *
     * @return int|null
     */
    public function getDoubleBakingLostFees()
    {
        return $this->container['double_baking_lost_fees'];
    }

    /**
     * Sets double_baking_lost_fees
     *
     * @param int|null $double_baking_lost_fees Fees lost due to double baking
     *
     * @return self
     */
    public function setDoubleBakingLostFees($double_baking_lost_fees)
    {
        $this->container['double_baking_lost_fees'] = $double_baking_lost_fees;

        return $this;
    }

    /**
     * Gets double_endorsing_rewards
     *
     * @return int|null
     */
    public function getDoubleEndorsingRewards()
    {
        return $this->container['double_endorsing_rewards'];
    }

    /**
     * Sets double_endorsing_rewards
     *
     * @param int|null $double_endorsing_rewards Rewards for detecting double endorsing (accusing someone of validating two different blocks at the same level).
     *
     * @return self
     */
    public function setDoubleEndorsingRewards($double_endorsing_rewards)
    {
        $this->container['double_endorsing_rewards'] = $double_endorsing_rewards;

        return $this;
    }

    /**
     * Gets double_endorsing_lost_deposits
     *
     * @return int|null
     */
    public function getDoubleEndorsingLostDeposits()
    {
        return $this->container['double_endorsing_lost_deposits'];
    }

    /**
     * Sets double_endorsing_lost_deposits
     *
     * @param int|null $double_endorsing_lost_deposits Bonds lost due to double endorsing
     *
     * @return self
     */
    public function setDoubleEndorsingLostDeposits($double_endorsing_lost_deposits)
    {
        $this->container['double_endorsing_lost_deposits'] = $double_endorsing_lost_deposits;

        return $this;
    }

    /**
     * Gets double_endorsing_lost_rewards
     *
     * @return int|null
     */
    public function getDoubleEndorsingLostRewards()
    {
        return $this->container['double_endorsing_lost_rewards'];
    }

    /**
     * Sets double_endorsing_lost_rewards
     *
     * @param int|null $double_endorsing_lost_rewards Rewards lost due to double endorsing
     *
     * @return self
     */
    public function setDoubleEndorsingLostRewards($double_endorsing_lost_rewards)
    {
        $this->container['double_endorsing_lost_rewards'] = $double_endorsing_lost_rewards;

        return $this;
    }

    /**
     * Gets double_endorsing_lost_fees
     *
     * @return int|null
     */
    public function getDoubleEndorsingLostFees()
    {
        return $this->container['double_endorsing_lost_fees'];
    }

    /**
     * Sets double_endorsing_lost_fees
     *
     * @param int|null $double_endorsing_lost_fees Fees lost due to double endorsing
     *
     * @return self
     */
    public function setDoubleEndorsingLostFees($double_endorsing_lost_fees)
    {
        $this->container['double_endorsing_lost_fees'] = $double_endorsing_lost_fees;

        return $this;
    }

    /**
     * Gets revelation_rewards
     *
     * @return int|null
     */
    public function getRevelationRewards()
    {
        return $this->container['revelation_rewards'];
    }

    /**
     * Sets revelation_rewards
     *
     * @param int|null $revelation_rewards Rewards for including into a block seed nonce revelation operations.
     *
     * @return self
     */
    public function setRevelationRewards($revelation_rewards)
    {
        $this->container['revelation_rewards'] = $revelation_rewards;

        return $this;
    }

    /**
     * Gets revelation_lost_rewards
     *
     * @return int|null
     */
    public function getRevelationLostRewards()
    {
        return $this->container['revelation_lost_rewards'];
    }

    /**
     * Sets revelation_lost_rewards
     *
     * @param int|null $revelation_lost_rewards Rewards lost due to missing seed nonce revelation.
     *
     * @return self
     */
    public function setRevelationLostRewards($revelation_lost_rewards)
    {
        $this->container['revelation_lost_rewards'] = $revelation_lost_rewards;

        return $this;
    }

    /**
     * Gets revelation_lost_fees
     *
     * @return int|null
     */
    public function getRevelationLostFees()
    {
        return $this->container['revelation_lost_fees'];
    }

    /**
     * Sets revelation_lost_fees
     *
     * @param int|null $revelation_lost_fees Fees lost due to missing seed nonce revelation.
     *
     * @return self
     */
    public function setRevelationLostFees($revelation_lost_fees)
    {
        $this->container['revelation_lost_fees'] = $revelation_lost_fees;

        return $this;
    }

    /**
     * Gets quote
     *
     * @return OneOfQuoteShort|null
     */
    public function getQuote()
    {
        return $this->container['quote'];
    }

    /**
     * Sets quote
     *
     * @param OneOfQuoteShort|null $quote Injected historical quote at the end of the cycle
     *
     * @return self
     */
    public function setQuote($quote)
    {
        $this->container['quote'] = $quote;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


