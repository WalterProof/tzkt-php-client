<?php
/**
 * VotingPeriod
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  Bzzhh\Tzkt
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * TzKT API
 *
 * # Introduction  TzKT Explorer provides a free REST-like API and WebSocket API for accessing detailed Tezos blockchain data and helps developers build more services and applications on top of Tezos. TzKT is an open-source project, so you can easily clone and build it and use it as a self-hosted service to avoid any risks depending on third-party services.  TzKT API is available for the following Tezos networks with the following base URLs:  - Mainnet: `https://api.tzkt.io/` or `https://api.mainnet.tzkt.io/` ([view docs](https://api.tzkt.io)) - Edo2net: `https://api.edo2net.tzkt.io/` ([view docs](https://api.edo2net.tzkt.io)) - Florencenet: `https://api.florencenet.tzkt.io/` ([view docs](https://api.florencenet.tzkt.io))  We also provide a staging environment for testing newest features and pre-updating client applications before deploying to production:  - Mainnet staging: `https://staging.api.tzkt.io/` or `https://staging.api.mainnet.tzkt.io/` ([view docs](https://staging.api.tzkt.io)) - Edo2net staging: `https://staging.api.edo2net.tzkt.io/` ([view docs](https://staging.api.edo2net.tzkt.io))      Feel free to contact us if you have any questions or feature requests. Your feedback really helps us make TzKT better!  - Email: hello@baking-bad.org - Twitter: https://twitter.com/TezosBakingBad - Telegram: [tg://resolve?domain=baking_bad_chat](tg://resolve?domain=baking_bad_chat) - Slack: https://tezos-dev.slack.com/archives/CV5NX7F2L  And don't forget to star TzKT project [on GitHub](https://github.com/baking-bad/tzkt) ;)  # Terms of Use  TzKT API is free for everyone and for both commercial and non-commercial usage.  If your application or service uses the TzKT API in any forms: directly on frontend or indirectly on backend, you should mention that fact on your website or application by placing the label **\"Powered by TzKT API\"** with a direct link to [tzkt.io](https://tzkt.io).   # Rate Limits  There will be no rate limits as long as our servers can handle the load without additional infrastructure costs. However, any apparent abuse will be prevented by setting targeted rate limits.  Check out [Tezos Explorer API Best Practices](https://baking-bad.org/blog/tag/TzKT/) and in particular [how to optimize requests count](https://baking-bad.org/blog/2020/07/29/tezos-explorer-api-tzkt-how-often-to-make-requests/).  ---
 *
 * The version of the OpenAPI document: v1.5
 * Contact: hello@baking-bad.org
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.2.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Bzzhh\Tzkt\Model;

use \ArrayAccess;
use \Bzzhh\Tzkt\ObjectSerializer;

/**
 * VotingPeriod Class Doc Comment
 *
 * @category Class
 * @package  Bzzhh\Tzkt
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class VotingPeriod implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'VotingPeriod';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'index' => 'int',
        'epoch' => 'int',
        'first_level' => 'int',
        'start_time' => '\DateTime',
        'last_level' => 'int',
        'end_time' => '\DateTime',
        'kind' => 'string',
        'status' => 'string',
        'total_bakers' => 'int',
        'total_rolls' => 'int',
        'upvotes_quorum' => 'double',
        'proposals_count' => 'int',
        'top_upvotes' => 'int',
        'top_rolls' => 'int',
        'ballots_quorum' => 'double',
        'supermajority' => 'double',
        'yay_ballots' => 'int',
        'yay_rolls' => 'int',
        'nay_ballots' => 'int',
        'nay_rolls' => 'int',
        'pass_ballots' => 'int',
        'pass_rolls' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'index' => 'int32',
        'epoch' => 'int32',
        'first_level' => 'int32',
        'start_time' => 'date-time',
        'last_level' => 'int32',
        'end_time' => 'date-time',
        'kind' => null,
        'status' => null,
        'total_bakers' => 'int32',
        'total_rolls' => 'int32',
        'upvotes_quorum' => 'double',
        'proposals_count' => 'int32',
        'top_upvotes' => 'int32',
        'top_rolls' => 'int32',
        'ballots_quorum' => 'double',
        'supermajority' => 'double',
        'yay_ballots' => 'int32',
        'yay_rolls' => 'int32',
        'nay_ballots' => 'int32',
        'nay_rolls' => 'int32',
        'pass_ballots' => 'int32',
        'pass_rolls' => 'int32'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'index' => 'index',
        'epoch' => 'epoch',
        'first_level' => 'firstLevel',
        'start_time' => 'startTime',
        'last_level' => 'lastLevel',
        'end_time' => 'endTime',
        'kind' => 'kind',
        'status' => 'status',
        'total_bakers' => 'totalBakers',
        'total_rolls' => 'totalRolls',
        'upvotes_quorum' => 'upvotesQuorum',
        'proposals_count' => 'proposalsCount',
        'top_upvotes' => 'topUpvotes',
        'top_rolls' => 'topRolls',
        'ballots_quorum' => 'ballotsQuorum',
        'supermajority' => 'supermajority',
        'yay_ballots' => 'yayBallots',
        'yay_rolls' => 'yayRolls',
        'nay_ballots' => 'nayBallots',
        'nay_rolls' => 'nayRolls',
        'pass_ballots' => 'passBallots',
        'pass_rolls' => 'passRolls'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'index' => 'setIndex',
        'epoch' => 'setEpoch',
        'first_level' => 'setFirstLevel',
        'start_time' => 'setStartTime',
        'last_level' => 'setLastLevel',
        'end_time' => 'setEndTime',
        'kind' => 'setKind',
        'status' => 'setStatus',
        'total_bakers' => 'setTotalBakers',
        'total_rolls' => 'setTotalRolls',
        'upvotes_quorum' => 'setUpvotesQuorum',
        'proposals_count' => 'setProposalsCount',
        'top_upvotes' => 'setTopUpvotes',
        'top_rolls' => 'setTopRolls',
        'ballots_quorum' => 'setBallotsQuorum',
        'supermajority' => 'setSupermajority',
        'yay_ballots' => 'setYayBallots',
        'yay_rolls' => 'setYayRolls',
        'nay_ballots' => 'setNayBallots',
        'nay_rolls' => 'setNayRolls',
        'pass_ballots' => 'setPassBallots',
        'pass_rolls' => 'setPassRolls'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'index' => 'getIndex',
        'epoch' => 'getEpoch',
        'first_level' => 'getFirstLevel',
        'start_time' => 'getStartTime',
        'last_level' => 'getLastLevel',
        'end_time' => 'getEndTime',
        'kind' => 'getKind',
        'status' => 'getStatus',
        'total_bakers' => 'getTotalBakers',
        'total_rolls' => 'getTotalRolls',
        'upvotes_quorum' => 'getUpvotesQuorum',
        'proposals_count' => 'getProposalsCount',
        'top_upvotes' => 'getTopUpvotes',
        'top_rolls' => 'getTopRolls',
        'ballots_quorum' => 'getBallotsQuorum',
        'supermajority' => 'getSupermajority',
        'yay_ballots' => 'getYayBallots',
        'yay_rolls' => 'getYayRolls',
        'nay_ballots' => 'getNayBallots',
        'nay_rolls' => 'getNayRolls',
        'pass_ballots' => 'getPassBallots',
        'pass_rolls' => 'getPassRolls'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['index'] = $data['index'] ?? null;
        $this->container['epoch'] = $data['epoch'] ?? null;
        $this->container['first_level'] = $data['first_level'] ?? null;
        $this->container['start_time'] = $data['start_time'] ?? null;
        $this->container['last_level'] = $data['last_level'] ?? null;
        $this->container['end_time'] = $data['end_time'] ?? null;
        $this->container['kind'] = $data['kind'] ?? null;
        $this->container['status'] = $data['status'] ?? null;
        $this->container['total_bakers'] = $data['total_bakers'] ?? null;
        $this->container['total_rolls'] = $data['total_rolls'] ?? null;
        $this->container['upvotes_quorum'] = $data['upvotes_quorum'] ?? null;
        $this->container['proposals_count'] = $data['proposals_count'] ?? null;
        $this->container['top_upvotes'] = $data['top_upvotes'] ?? null;
        $this->container['top_rolls'] = $data['top_rolls'] ?? null;
        $this->container['ballots_quorum'] = $data['ballots_quorum'] ?? null;
        $this->container['supermajority'] = $data['supermajority'] ?? null;
        $this->container['yay_ballots'] = $data['yay_ballots'] ?? null;
        $this->container['yay_rolls'] = $data['yay_rolls'] ?? null;
        $this->container['nay_ballots'] = $data['nay_ballots'] ?? null;
        $this->container['nay_rolls'] = $data['nay_rolls'] ?? null;
        $this->container['pass_ballots'] = $data['pass_ballots'] ?? null;
        $this->container['pass_rolls'] = $data['pass_rolls'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets index
     *
     * @return int|null
     */
    public function getIndex()
    {
        return $this->container['index'];
    }

    /**
     * Sets index
     *
     * @param int|null $index Index of the voting period, starting from zero
     *
     * @return self
     */
    public function setIndex($index)
    {
        $this->container['index'] = $index;

        return $this;
    }

    /**
     * Gets epoch
     *
     * @return int|null
     */
    public function getEpoch()
    {
        return $this->container['epoch'];
    }

    /**
     * Sets epoch
     *
     * @param int|null $epoch Index of the voting epoch, starting from zero
     *
     * @return self
     */
    public function setEpoch($epoch)
    {
        $this->container['epoch'] = $epoch;

        return $this;
    }

    /**
     * Gets first_level
     *
     * @return int|null
     */
    public function getFirstLevel()
    {
        return $this->container['first_level'];
    }

    /**
     * Sets first_level
     *
     * @param int|null $first_level The height of the block in which the period starts
     *
     * @return self
     */
    public function setFirstLevel($first_level)
    {
        $this->container['first_level'] = $first_level;

        return $this;
    }

    /**
     * Gets start_time
     *
     * @return \DateTime|null
     */
    public function getStartTime()
    {
        return $this->container['start_time'];
    }

    /**
     * Sets start_time
     *
     * @param \DateTime|null $start_time The timestamp of the block in which the period starts
     *
     * @return self
     */
    public function setStartTime($start_time)
    {
        $this->container['start_time'] = $start_time;

        return $this;
    }

    /**
     * Gets last_level
     *
     * @return int|null
     */
    public function getLastLevel()
    {
        return $this->container['last_level'];
    }

    /**
     * Sets last_level
     *
     * @param int|null $last_level The height of the block in which the period ends
     *
     * @return self
     */
    public function setLastLevel($last_level)
    {
        $this->container['last_level'] = $last_level;

        return $this;
    }

    /**
     * Gets end_time
     *
     * @return \DateTime|null
     */
    public function getEndTime()
    {
        return $this->container['end_time'];
    }

    /**
     * Sets end_time
     *
     * @param \DateTime|null $end_time The timestamp of the block in which the period ends
     *
     * @return self
     */
    public function setEndTime($end_time)
    {
        $this->container['end_time'] = $end_time;

        return $this;
    }

    /**
     * Gets kind
     *
     * @return string|null
     */
    public function getKind()
    {
        return $this->container['kind'];
    }

    /**
     * Sets kind
     *
     * @param string|null $kind Kind of the voting period: `proposal` - delegates can submit protocol amendment proposals using the proposal operation `exploration` -  bakers (delegates) may vote on the top-ranked proposal from the previous Proposal Period using the ballot operation `testing` - If the proposal is approved in the Exploration Period, the testing (or 'cooldown') period begins and bakers start testing the new protocol `promotion` - delegates can cast one vote to promote or not the tested proposal using the ballot operation `adoption` - after the proposal is actually accepted, the ecosystem has some time to prepare to the upgrade Learn more: https://tezos.gitlab.io/whitedoc/voting.html
     *
     * @return self
     */
    public function setKind($kind)
    {
        $this->container['kind'] = $kind;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string|null $status Status of the voting period: `active` - means that the voting period is in progress `no_proposals` - means that there were no proposals during the voting period `no_quorum` - means that there was a voting but the quorum was not reached `no_supermajority` - means that there was a voting but the supermajority was not reached `success` - means that the period was finished with positive voting result
     *
     * @return self
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets total_bakers
     *
     * @return int|null
     */
    public function getTotalBakers()
    {
        return $this->container['total_bakers'];
    }

    /**
     * Sets total_bakers
     *
     * @param int|null $total_bakers The number of bakers on the voters list
     *
     * @return self
     */
    public function setTotalBakers($total_bakers)
    {
        $this->container['total_bakers'] = $total_bakers;

        return $this;
    }

    /**
     * Gets total_rolls
     *
     * @return int|null
     */
    public function getTotalRolls()
    {
        return $this->container['total_rolls'];
    }

    /**
     * Sets total_rolls
     *
     * @param int|null $total_rolls The number of rolls of bakers on the voters list
     *
     * @return self
     */
    public function setTotalRolls($total_rolls)
    {
        $this->container['total_rolls'] = $total_rolls;

        return $this;
    }

    /**
     * Gets upvotes_quorum
     *
     * @return double|null
     */
    public function getUpvotesQuorum()
    {
        return $this->container['upvotes_quorum'];
    }

    /**
     * Sets upvotes_quorum
     *
     * @param double|null $upvotes_quorum Upvotes quorum percentage (only for proposal period)
     *
     * @return self
     */
    public function setUpvotesQuorum($upvotes_quorum)
    {
        $this->container['upvotes_quorum'] = $upvotes_quorum;

        return $this;
    }

    /**
     * Gets proposals_count
     *
     * @return int|null
     */
    public function getProposalsCount()
    {
        return $this->container['proposals_count'];
    }

    /**
     * Sets proposals_count
     *
     * @param int|null $proposals_count The number of proposals injected during the voting period (only for proposal period)
     *
     * @return self
     */
    public function setProposalsCount($proposals_count)
    {
        $this->container['proposals_count'] = $proposals_count;

        return $this;
    }

    /**
     * Gets top_upvotes
     *
     * @return int|null
     */
    public function getTopUpvotes()
    {
        return $this->container['top_upvotes'];
    }

    /**
     * Sets top_upvotes
     *
     * @param int|null $top_upvotes This is how many upvotes (proposal operations) the most upvoted proposal has (only for proposal period)
     *
     * @return self
     */
    public function setTopUpvotes($top_upvotes)
    {
        $this->container['top_upvotes'] = $top_upvotes;

        return $this;
    }

    /**
     * Gets top_rolls
     *
     * @return int|null
     */
    public function getTopRolls()
    {
        return $this->container['top_rolls'];
    }

    /**
     * Sets top_rolls
     *
     * @param int|null $top_rolls This is how many rolls the most upvoted proposal has (only for proposal period)
     *
     * @return self
     */
    public function setTopRolls($top_rolls)
    {
        $this->container['top_rolls'] = $top_rolls;

        return $this;
    }

    /**
     * Gets ballots_quorum
     *
     * @return double|null
     */
    public function getBallotsQuorum()
    {
        return $this->container['ballots_quorum'];
    }

    /**
     * Sets ballots_quorum
     *
     * @param double|null $ballots_quorum Ballots quorum percentage (only for exploration and promotion periods)
     *
     * @return self
     */
    public function setBallotsQuorum($ballots_quorum)
    {
        $this->container['ballots_quorum'] = $ballots_quorum;

        return $this;
    }

    /**
     * Gets supermajority
     *
     * @return double|null
     */
    public function getSupermajority()
    {
        return $this->container['supermajority'];
    }

    /**
     * Sets supermajority
     *
     * @param double|null $supermajority Supermajority percentage (only for exploration and promotion periods)
     *
     * @return self
     */
    public function setSupermajority($supermajority)
    {
        $this->container['supermajority'] = $supermajority;

        return $this;
    }

    /**
     * Gets yay_ballots
     *
     * @return int|null
     */
    public function getYayBallots()
    {
        return $this->container['yay_ballots'];
    }

    /**
     * Sets yay_ballots
     *
     * @param int|null $yay_ballots The number of the ballots with \"yay\" vote (only for exploration and promotion periods)
     *
     * @return self
     */
    public function setYayBallots($yay_ballots)
    {
        $this->container['yay_ballots'] = $yay_ballots;

        return $this;
    }

    /**
     * Gets yay_rolls
     *
     * @return int|null
     */
    public function getYayRolls()
    {
        return $this->container['yay_rolls'];
    }

    /**
     * Sets yay_rolls
     *
     * @param int|null $yay_rolls Total rolls of the ballots with \"yay\" vote (only for exploration and promotion periods)
     *
     * @return self
     */
    public function setYayRolls($yay_rolls)
    {
        $this->container['yay_rolls'] = $yay_rolls;

        return $this;
    }

    /**
     * Gets nay_ballots
     *
     * @return int|null
     */
    public function getNayBallots()
    {
        return $this->container['nay_ballots'];
    }

    /**
     * Sets nay_ballots
     *
     * @param int|null $nay_ballots The number of the ballots with \"nay\" vote (only for exploration and promotion periods)
     *
     * @return self
     */
    public function setNayBallots($nay_ballots)
    {
        $this->container['nay_ballots'] = $nay_ballots;

        return $this;
    }

    /**
     * Gets nay_rolls
     *
     * @return int|null
     */
    public function getNayRolls()
    {
        return $this->container['nay_rolls'];
    }

    /**
     * Sets nay_rolls
     *
     * @param int|null $nay_rolls Total rolls of the ballots with \"nay\" vote (only for exploration and promotion periods)
     *
     * @return self
     */
    public function setNayRolls($nay_rolls)
    {
        $this->container['nay_rolls'] = $nay_rolls;

        return $this;
    }

    /**
     * Gets pass_ballots
     *
     * @return int|null
     */
    public function getPassBallots()
    {
        return $this->container['pass_ballots'];
    }

    /**
     * Sets pass_ballots
     *
     * @param int|null $pass_ballots The number of the ballots with \"pass\" vote (only for exploration and promotion periods)
     *
     * @return self
     */
    public function setPassBallots($pass_ballots)
    {
        $this->container['pass_ballots'] = $pass_ballots;

        return $this;
    }

    /**
     * Gets pass_rolls
     *
     * @return int|null
     */
    public function getPassRolls()
    {
        return $this->container['pass_rolls'];
    }

    /**
     * Sets pass_rolls
     *
     * @param int|null $pass_rolls Total rolls of the ballots with \"pass\" vote (only for exploration and promotion periods)
     *
     * @return self
     */
    public function setPassRolls($pass_rolls)
    {
        $this->container['pass_rolls'] = $pass_rolls;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


