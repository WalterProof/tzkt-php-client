<?php
/**
 * EventsApi
 * PHP version 7.4
 *
 * @category Class
 * @package  Bzzhh\Tzkt
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * TzKT API
 *
 * # Introduction  TzKT Explorer provides free REST API and WebSocket API for accessing detailed Tezos blockchain data and helps developers build more services and applications on top of Tezos. TzKT is an open-source project, so you can easily clone and build it and use it as a self-hosted service to avoid any risks of depending on third-party services.  TzKT API is available for the following Tezos networks with the following base URLs:   - Mainnet: `https://api.tzkt.io/` or `https://api.mainnet.tzkt.io/` ([view docs](https://api.tzkt.io))  - Ghostnet: `https://api.ghostnet.tzkt.io/` ([view docs](https://api.ghostnet.tzkt.io)) - Mumbainet: `https://api.mumbainet.tzkt.io/` ([view docs](https://api.mumbainet.tzkt.io)) - Nairobinet: `https://api.nairobinet.tzkt.io/` ([view docs](https://api.nairobinet.tzkt.io))  We also provide a staging environment for testing newest features and pre-updating client applications before deploying to production:  - Mainnet staging: `https://staging.api.tzkt.io/` or `https://staging.api.mainnet.tzkt.io/` ([view docs](https://staging.api.tzkt.io))  Feel free to contact us if you have any questions or feature requests. Your feedback really helps us make TzKT better!  - Discord: https://discord.gg/aG8XKuwsQd - Telegram: https://t.me/baking_bad_chat - Slack: https://tezos-dev.slack.com/archives/CV5NX7F2L - Twitter: https://twitter.com/TezosBakingBad - Email: hello@bakingbad.dev  And don't forget to star TzKT project [on GitHub](https://github.com/baking-bad/tzkt) ;)  # Terms of Use  TzKT API is free for everyone and for both commercial and non-commercial usage.  If your application or service uses the TzKT API in any forms: directly on frontend or indirectly on backend, you must mention that fact on your website or application by placing the label **\"Powered by TzKT API\"** or **\"Built with TzKT API\"** with a direct link to [tzkt.io](https://tzkt.io).   # Rate Limits  There will be no rate limits as long as our servers can handle the load without additional infrastructure costs. However, any apparent abuse will be prevented by setting targeted rate limits.  Check out [Tezos Explorer API Best Practices](https://baking-bad.org/blog/tag/TzKT/) and in particular [how to optimize requests count](https://baking-bad.org/blog/2020/07/29/tezos-explorer-api-tzkt-how-often-to-make-requests/).  ---
 *
 * The version of the OpenAPI document: 1.12.1
 * Contact: hello@bakingbad.dev
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.2.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Bzzhh\Tzkt\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Bzzhh\Tzkt\ApiException;
use Bzzhh\Tzkt\Configuration;
use Bzzhh\Tzkt\HeaderSelector;
use Bzzhh\Tzkt\ObjectSerializer;

/**
 * EventsApi Class Doc Comment
 *
 * @category Class
 * @package  Bzzhh\Tzkt
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class EventsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'eventsGetContractEvents' => [
            'application/json',
        ],
        'eventsGetContractEventsCount' => [
            'application/json',
        ],
    ];

/**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation eventsGetContractEvents
     *
     * Get contract events
     *
     * @param  AccountsGetIdParameter $id Filter by internal TzKT id.   Click on the parameter to expand more details. (optional)
     * @param  AccountsGetIdParameter $level Filter by level of the block where the event was emitted.   Click on the parameter to expand more details. (optional)
     * @param  BigMapsGetBigMapUpdatesTimestampParameter $timestamp Filter by timestamp (ISO 8601) of the block where the event was emitted.   Click on the parameter to expand more details. (optional)
     * @param  AccountsGetDelegateParameter $contract Filter by contract address.   Click on the parameter to expand more details. (optional)
     * @param  AccountsGetIdParameter $code_hash Filter by hash of the code of the contract emitted the event.   Click on the parameter to expand more details. (optional)
     * @param  AccountsGetOperationsEntrypointParameter $tag Filter by event tag.   Click on the parameter to expand more details. (optional)
     * @param  AccountsGetOperationsParameterParameter $payload Filter by payload.   Note, this parameter supports the following format: &#x60;payload{.path?}{.mode?}&#x3D;...&#x60;, so you can specify a path to a particular field to filter by (for example, &#x60;?payload.foo.bar.in&#x3D;1,2,3&#x60;).   Click on the parameter to expand more details. (optional)
     * @param  AccountsGetBalanceParameter $transaction_id Filter by id of the transaction, in which the event was emitted.   Click on the parameter to expand more details. (optional)
     * @param  AccountsGetSortParameter $sort Sorts items (asc or desc) by the specified field. You can see what fields can be used for sorting in the response description, below.   Click on the parameter to expand more details. (optional)
     * @param  AccountsGetOffsetParameter $offset Specifies which or how many items should be skipped.   Click on the parameter to expand more details. (optional)
     * @param  int $limit Maximum number of items to return. (optional)
     * @param  DomainsGetSelectParameter $select Specify a comma-separated list of fields to include into response or leave it undefined to get default set of fields. This parameter accepts values of the following format: &#x60;{field}{path?}{as alias?}&#x60;, so you can do deep selection (for example, &#x60;?select&#x3D;balance,token.metadata.symbol as token,...&#x60;).   Note, if you select just one field, the response will be flatten into a simple array of values.   Click on the parameter to expand the details. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['eventsGetContractEvents'] to see the possible values for this operation
     *
     * @throws \Bzzhh\Tzkt\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Bzzhh\Tzkt\Model\ContractEvent[]
     */
    public function eventsGetContractEvents($id = null, $level = null, $timestamp = null, $contract = null, $code_hash = null, $tag = null, $payload = null, $transaction_id = null, $sort = null, $offset = null, $limit = null, $select = null, string $contentType = self::contentTypes['eventsGetContractEvents'][0])
    {
        list($response) = $this->eventsGetContractEventsWithHttpInfo($id, $level, $timestamp, $contract, $code_hash, $tag, $payload, $transaction_id, $sort, $offset, $limit, $select, $contentType);
        return $response;
    }

    /**
     * Operation eventsGetContractEventsWithHttpInfo
     *
     * Get contract events
     *
     * @param  AccountsGetIdParameter $id Filter by internal TzKT id.   Click on the parameter to expand more details. (optional)
     * @param  AccountsGetIdParameter $level Filter by level of the block where the event was emitted.   Click on the parameter to expand more details. (optional)
     * @param  BigMapsGetBigMapUpdatesTimestampParameter $timestamp Filter by timestamp (ISO 8601) of the block where the event was emitted.   Click on the parameter to expand more details. (optional)
     * @param  AccountsGetDelegateParameter $contract Filter by contract address.   Click on the parameter to expand more details. (optional)
     * @param  AccountsGetIdParameter $code_hash Filter by hash of the code of the contract emitted the event.   Click on the parameter to expand more details. (optional)
     * @param  AccountsGetOperationsEntrypointParameter $tag Filter by event tag.   Click on the parameter to expand more details. (optional)
     * @param  AccountsGetOperationsParameterParameter $payload Filter by payload.   Note, this parameter supports the following format: &#x60;payload{.path?}{.mode?}&#x3D;...&#x60;, so you can specify a path to a particular field to filter by (for example, &#x60;?payload.foo.bar.in&#x3D;1,2,3&#x60;).   Click on the parameter to expand more details. (optional)
     * @param  AccountsGetBalanceParameter $transaction_id Filter by id of the transaction, in which the event was emitted.   Click on the parameter to expand more details. (optional)
     * @param  AccountsGetSortParameter $sort Sorts items (asc or desc) by the specified field. You can see what fields can be used for sorting in the response description, below.   Click on the parameter to expand more details. (optional)
     * @param  AccountsGetOffsetParameter $offset Specifies which or how many items should be skipped.   Click on the parameter to expand more details. (optional)
     * @param  int $limit Maximum number of items to return. (optional)
     * @param  DomainsGetSelectParameter $select Specify a comma-separated list of fields to include into response or leave it undefined to get default set of fields. This parameter accepts values of the following format: &#x60;{field}{path?}{as alias?}&#x60;, so you can do deep selection (for example, &#x60;?select&#x3D;balance,token.metadata.symbol as token,...&#x60;).   Note, if you select just one field, the response will be flatten into a simple array of values.   Click on the parameter to expand the details. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['eventsGetContractEvents'] to see the possible values for this operation
     *
     * @throws \Bzzhh\Tzkt\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Bzzhh\Tzkt\Model\ContractEvent[], HTTP status code, HTTP response headers (array of strings)
     */
    public function eventsGetContractEventsWithHttpInfo($id = null, $level = null, $timestamp = null, $contract = null, $code_hash = null, $tag = null, $payload = null, $transaction_id = null, $sort = null, $offset = null, $limit = null, $select = null, string $contentType = self::contentTypes['eventsGetContractEvents'][0])
    {
        $request = $this->eventsGetContractEventsRequest($id, $level, $timestamp, $contract, $code_hash, $tag, $payload, $transaction_id, $sort, $offset, $limit, $select, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Bzzhh\Tzkt\Model\ContractEvent[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Bzzhh\Tzkt\Model\ContractEvent[]' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bzzhh\Tzkt\Model\ContractEvent[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Bzzhh\Tzkt\Model\ContractEvent[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bzzhh\Tzkt\Model\ContractEvent[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation eventsGetContractEventsAsync
     *
     * Get contract events
     *
     * @param  AccountsGetIdParameter $id Filter by internal TzKT id.   Click on the parameter to expand more details. (optional)
     * @param  AccountsGetIdParameter $level Filter by level of the block where the event was emitted.   Click on the parameter to expand more details. (optional)
     * @param  BigMapsGetBigMapUpdatesTimestampParameter $timestamp Filter by timestamp (ISO 8601) of the block where the event was emitted.   Click on the parameter to expand more details. (optional)
     * @param  AccountsGetDelegateParameter $contract Filter by contract address.   Click on the parameter to expand more details. (optional)
     * @param  AccountsGetIdParameter $code_hash Filter by hash of the code of the contract emitted the event.   Click on the parameter to expand more details. (optional)
     * @param  AccountsGetOperationsEntrypointParameter $tag Filter by event tag.   Click on the parameter to expand more details. (optional)
     * @param  AccountsGetOperationsParameterParameter $payload Filter by payload.   Note, this parameter supports the following format: &#x60;payload{.path?}{.mode?}&#x3D;...&#x60;, so you can specify a path to a particular field to filter by (for example, &#x60;?payload.foo.bar.in&#x3D;1,2,3&#x60;).   Click on the parameter to expand more details. (optional)
     * @param  AccountsGetBalanceParameter $transaction_id Filter by id of the transaction, in which the event was emitted.   Click on the parameter to expand more details. (optional)
     * @param  AccountsGetSortParameter $sort Sorts items (asc or desc) by the specified field. You can see what fields can be used for sorting in the response description, below.   Click on the parameter to expand more details. (optional)
     * @param  AccountsGetOffsetParameter $offset Specifies which or how many items should be skipped.   Click on the parameter to expand more details. (optional)
     * @param  int $limit Maximum number of items to return. (optional)
     * @param  DomainsGetSelectParameter $select Specify a comma-separated list of fields to include into response or leave it undefined to get default set of fields. This parameter accepts values of the following format: &#x60;{field}{path?}{as alias?}&#x60;, so you can do deep selection (for example, &#x60;?select&#x3D;balance,token.metadata.symbol as token,...&#x60;).   Note, if you select just one field, the response will be flatten into a simple array of values.   Click on the parameter to expand the details. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['eventsGetContractEvents'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function eventsGetContractEventsAsync($id = null, $level = null, $timestamp = null, $contract = null, $code_hash = null, $tag = null, $payload = null, $transaction_id = null, $sort = null, $offset = null, $limit = null, $select = null, string $contentType = self::contentTypes['eventsGetContractEvents'][0])
    {
        return $this->eventsGetContractEventsAsyncWithHttpInfo($id, $level, $timestamp, $contract, $code_hash, $tag, $payload, $transaction_id, $sort, $offset, $limit, $select, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation eventsGetContractEventsAsyncWithHttpInfo
     *
     * Get contract events
     *
     * @param  AccountsGetIdParameter $id Filter by internal TzKT id.   Click on the parameter to expand more details. (optional)
     * @param  AccountsGetIdParameter $level Filter by level of the block where the event was emitted.   Click on the parameter to expand more details. (optional)
     * @param  BigMapsGetBigMapUpdatesTimestampParameter $timestamp Filter by timestamp (ISO 8601) of the block where the event was emitted.   Click on the parameter to expand more details. (optional)
     * @param  AccountsGetDelegateParameter $contract Filter by contract address.   Click on the parameter to expand more details. (optional)
     * @param  AccountsGetIdParameter $code_hash Filter by hash of the code of the contract emitted the event.   Click on the parameter to expand more details. (optional)
     * @param  AccountsGetOperationsEntrypointParameter $tag Filter by event tag.   Click on the parameter to expand more details. (optional)
     * @param  AccountsGetOperationsParameterParameter $payload Filter by payload.   Note, this parameter supports the following format: &#x60;payload{.path?}{.mode?}&#x3D;...&#x60;, so you can specify a path to a particular field to filter by (for example, &#x60;?payload.foo.bar.in&#x3D;1,2,3&#x60;).   Click on the parameter to expand more details. (optional)
     * @param  AccountsGetBalanceParameter $transaction_id Filter by id of the transaction, in which the event was emitted.   Click on the parameter to expand more details. (optional)
     * @param  AccountsGetSortParameter $sort Sorts items (asc or desc) by the specified field. You can see what fields can be used for sorting in the response description, below.   Click on the parameter to expand more details. (optional)
     * @param  AccountsGetOffsetParameter $offset Specifies which or how many items should be skipped.   Click on the parameter to expand more details. (optional)
     * @param  int $limit Maximum number of items to return. (optional)
     * @param  DomainsGetSelectParameter $select Specify a comma-separated list of fields to include into response or leave it undefined to get default set of fields. This parameter accepts values of the following format: &#x60;{field}{path?}{as alias?}&#x60;, so you can do deep selection (for example, &#x60;?select&#x3D;balance,token.metadata.symbol as token,...&#x60;).   Note, if you select just one field, the response will be flatten into a simple array of values.   Click on the parameter to expand the details. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['eventsGetContractEvents'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function eventsGetContractEventsAsyncWithHttpInfo($id = null, $level = null, $timestamp = null, $contract = null, $code_hash = null, $tag = null, $payload = null, $transaction_id = null, $sort = null, $offset = null, $limit = null, $select = null, string $contentType = self::contentTypes['eventsGetContractEvents'][0])
    {
        $returnType = '\Bzzhh\Tzkt\Model\ContractEvent[]';
        $request = $this->eventsGetContractEventsRequest($id, $level, $timestamp, $contract, $code_hash, $tag, $payload, $transaction_id, $sort, $offset, $limit, $select, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'eventsGetContractEvents'
     *
     * @param  AccountsGetIdParameter $id Filter by internal TzKT id.   Click on the parameter to expand more details. (optional)
     * @param  AccountsGetIdParameter $level Filter by level of the block where the event was emitted.   Click on the parameter to expand more details. (optional)
     * @param  BigMapsGetBigMapUpdatesTimestampParameter $timestamp Filter by timestamp (ISO 8601) of the block where the event was emitted.   Click on the parameter to expand more details. (optional)
     * @param  AccountsGetDelegateParameter $contract Filter by contract address.   Click on the parameter to expand more details. (optional)
     * @param  AccountsGetIdParameter $code_hash Filter by hash of the code of the contract emitted the event.   Click on the parameter to expand more details. (optional)
     * @param  AccountsGetOperationsEntrypointParameter $tag Filter by event tag.   Click on the parameter to expand more details. (optional)
     * @param  AccountsGetOperationsParameterParameter $payload Filter by payload.   Note, this parameter supports the following format: &#x60;payload{.path?}{.mode?}&#x3D;...&#x60;, so you can specify a path to a particular field to filter by (for example, &#x60;?payload.foo.bar.in&#x3D;1,2,3&#x60;).   Click on the parameter to expand more details. (optional)
     * @param  AccountsGetBalanceParameter $transaction_id Filter by id of the transaction, in which the event was emitted.   Click on the parameter to expand more details. (optional)
     * @param  AccountsGetSortParameter $sort Sorts items (asc or desc) by the specified field. You can see what fields can be used for sorting in the response description, below.   Click on the parameter to expand more details. (optional)
     * @param  AccountsGetOffsetParameter $offset Specifies which or how many items should be skipped.   Click on the parameter to expand more details. (optional)
     * @param  int $limit Maximum number of items to return. (optional)
     * @param  DomainsGetSelectParameter $select Specify a comma-separated list of fields to include into response or leave it undefined to get default set of fields. This parameter accepts values of the following format: &#x60;{field}{path?}{as alias?}&#x60;, so you can do deep selection (for example, &#x60;?select&#x3D;balance,token.metadata.symbol as token,...&#x60;).   Note, if you select just one field, the response will be flatten into a simple array of values.   Click on the parameter to expand the details. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['eventsGetContractEvents'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function eventsGetContractEventsRequest($id = null, $level = null, $timestamp = null, $contract = null, $code_hash = null, $tag = null, $payload = null, $transaction_id = null, $sort = null, $offset = null, $limit = null, $select = null, string $contentType = self::contentTypes['eventsGetContractEvents'][0])
    {











        if ($limit !== null && $limit > 10000) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling EventsApi.eventsGetContractEvents, must be smaller than or equal to 10000.');
        }
        if ($limit !== null && $limit < 0) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling EventsApi.eventsGetContractEvents, must be bigger than or equal to 0.');
        }
        


        $resourcePath = '/v1/contracts/events';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $id,
            'id', // param base name
            'OneOfInt32Parameter', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $level,
            'level', // param base name
            'OneOfInt32Parameter', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $timestamp,
            'timestamp', // param base name
            'OneOfTimestampParameter', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $contract,
            'contract', // param base name
            'OneOfAccountParameter', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $code_hash,
            'codeHash', // param base name
            'OneOfInt32Parameter', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $tag,
            'tag', // param base name
            'OneOfStringParameter', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $payload,
            'payload', // param base name
            'OneOfJsonParameter', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $transaction_id,
            'transactionId', // param base name
            'OneOfInt64Parameter', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $sort,
            'sort', // param base name
            'OneOfSortParameter', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $offset,
            'offset', // param base name
            'OneOfOffsetParameter', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $limit,
            'limit', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $select,
            'select', // param base name
            'OneOfSelectionParameter', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation eventsGetContractEventsCount
     *
     * Get contract events count
     *
     * @param  AccountsGetIdParameter $id Filter by internal TzKT id.   Click on the parameter to expand more details. (optional)
     * @param  AccountsGetIdParameter $level Filter by level of the block where the event was emitted.   Click on the parameter to expand more details. (optional)
     * @param  BigMapsGetBigMapUpdatesTimestampParameter $timestamp Filter by timestamp (ISO 8601) of the block where the event was emitted.   Click on the parameter to expand more details. (optional)
     * @param  AccountsGetDelegateParameter $contract Filter by contract address.   Click on the parameter to expand more details. (optional)
     * @param  AccountsGetIdParameter $code_hash Filter by hash of the code of the contract emitted the event.   Click on the parameter to expand more details. (optional)
     * @param  AccountsGetOperationsEntrypointParameter $tag Filter by event tag.   Click on the parameter to expand more details. (optional)
     * @param  AccountsGetOperationsParameterParameter $payload Filter by payload.   Note, this parameter supports the following format: &#x60;payload{.path?}{.mode?}&#x3D;...&#x60;, so you can specify a path to a particular field to filter by (for example, &#x60;?payload.foo.bar.in&#x3D;1,2,3&#x60;).   Click on the parameter to expand more details. (optional)
     * @param  AccountsGetBalanceParameter $transaction_id Filter by id of the transaction, in which the event was emitted.   Click on the parameter to expand more details. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['eventsGetContractEventsCount'] to see the possible values for this operation
     *
     * @throws \Bzzhh\Tzkt\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return int
     */
    public function eventsGetContractEventsCount($id = null, $level = null, $timestamp = null, $contract = null, $code_hash = null, $tag = null, $payload = null, $transaction_id = null, string $contentType = self::contentTypes['eventsGetContractEventsCount'][0])
    {
        list($response) = $this->eventsGetContractEventsCountWithHttpInfo($id, $level, $timestamp, $contract, $code_hash, $tag, $payload, $transaction_id, $contentType);
        return $response;
    }

    /**
     * Operation eventsGetContractEventsCountWithHttpInfo
     *
     * Get contract events count
     *
     * @param  AccountsGetIdParameter $id Filter by internal TzKT id.   Click on the parameter to expand more details. (optional)
     * @param  AccountsGetIdParameter $level Filter by level of the block where the event was emitted.   Click on the parameter to expand more details. (optional)
     * @param  BigMapsGetBigMapUpdatesTimestampParameter $timestamp Filter by timestamp (ISO 8601) of the block where the event was emitted.   Click on the parameter to expand more details. (optional)
     * @param  AccountsGetDelegateParameter $contract Filter by contract address.   Click on the parameter to expand more details. (optional)
     * @param  AccountsGetIdParameter $code_hash Filter by hash of the code of the contract emitted the event.   Click on the parameter to expand more details. (optional)
     * @param  AccountsGetOperationsEntrypointParameter $tag Filter by event tag.   Click on the parameter to expand more details. (optional)
     * @param  AccountsGetOperationsParameterParameter $payload Filter by payload.   Note, this parameter supports the following format: &#x60;payload{.path?}{.mode?}&#x3D;...&#x60;, so you can specify a path to a particular field to filter by (for example, &#x60;?payload.foo.bar.in&#x3D;1,2,3&#x60;).   Click on the parameter to expand more details. (optional)
     * @param  AccountsGetBalanceParameter $transaction_id Filter by id of the transaction, in which the event was emitted.   Click on the parameter to expand more details. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['eventsGetContractEventsCount'] to see the possible values for this operation
     *
     * @throws \Bzzhh\Tzkt\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of int, HTTP status code, HTTP response headers (array of strings)
     */
    public function eventsGetContractEventsCountWithHttpInfo($id = null, $level = null, $timestamp = null, $contract = null, $code_hash = null, $tag = null, $payload = null, $transaction_id = null, string $contentType = self::contentTypes['eventsGetContractEventsCount'][0])
    {
        $request = $this->eventsGetContractEventsCountRequest($id, $level, $timestamp, $contract, $code_hash, $tag, $payload, $transaction_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('int' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('int' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'int', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'int';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'int',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation eventsGetContractEventsCountAsync
     *
     * Get contract events count
     *
     * @param  AccountsGetIdParameter $id Filter by internal TzKT id.   Click on the parameter to expand more details. (optional)
     * @param  AccountsGetIdParameter $level Filter by level of the block where the event was emitted.   Click on the parameter to expand more details. (optional)
     * @param  BigMapsGetBigMapUpdatesTimestampParameter $timestamp Filter by timestamp (ISO 8601) of the block where the event was emitted.   Click on the parameter to expand more details. (optional)
     * @param  AccountsGetDelegateParameter $contract Filter by contract address.   Click on the parameter to expand more details. (optional)
     * @param  AccountsGetIdParameter $code_hash Filter by hash of the code of the contract emitted the event.   Click on the parameter to expand more details. (optional)
     * @param  AccountsGetOperationsEntrypointParameter $tag Filter by event tag.   Click on the parameter to expand more details. (optional)
     * @param  AccountsGetOperationsParameterParameter $payload Filter by payload.   Note, this parameter supports the following format: &#x60;payload{.path?}{.mode?}&#x3D;...&#x60;, so you can specify a path to a particular field to filter by (for example, &#x60;?payload.foo.bar.in&#x3D;1,2,3&#x60;).   Click on the parameter to expand more details. (optional)
     * @param  AccountsGetBalanceParameter $transaction_id Filter by id of the transaction, in which the event was emitted.   Click on the parameter to expand more details. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['eventsGetContractEventsCount'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function eventsGetContractEventsCountAsync($id = null, $level = null, $timestamp = null, $contract = null, $code_hash = null, $tag = null, $payload = null, $transaction_id = null, string $contentType = self::contentTypes['eventsGetContractEventsCount'][0])
    {
        return $this->eventsGetContractEventsCountAsyncWithHttpInfo($id, $level, $timestamp, $contract, $code_hash, $tag, $payload, $transaction_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation eventsGetContractEventsCountAsyncWithHttpInfo
     *
     * Get contract events count
     *
     * @param  AccountsGetIdParameter $id Filter by internal TzKT id.   Click on the parameter to expand more details. (optional)
     * @param  AccountsGetIdParameter $level Filter by level of the block where the event was emitted.   Click on the parameter to expand more details. (optional)
     * @param  BigMapsGetBigMapUpdatesTimestampParameter $timestamp Filter by timestamp (ISO 8601) of the block where the event was emitted.   Click on the parameter to expand more details. (optional)
     * @param  AccountsGetDelegateParameter $contract Filter by contract address.   Click on the parameter to expand more details. (optional)
     * @param  AccountsGetIdParameter $code_hash Filter by hash of the code of the contract emitted the event.   Click on the parameter to expand more details. (optional)
     * @param  AccountsGetOperationsEntrypointParameter $tag Filter by event tag.   Click on the parameter to expand more details. (optional)
     * @param  AccountsGetOperationsParameterParameter $payload Filter by payload.   Note, this parameter supports the following format: &#x60;payload{.path?}{.mode?}&#x3D;...&#x60;, so you can specify a path to a particular field to filter by (for example, &#x60;?payload.foo.bar.in&#x3D;1,2,3&#x60;).   Click on the parameter to expand more details. (optional)
     * @param  AccountsGetBalanceParameter $transaction_id Filter by id of the transaction, in which the event was emitted.   Click on the parameter to expand more details. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['eventsGetContractEventsCount'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function eventsGetContractEventsCountAsyncWithHttpInfo($id = null, $level = null, $timestamp = null, $contract = null, $code_hash = null, $tag = null, $payload = null, $transaction_id = null, string $contentType = self::contentTypes['eventsGetContractEventsCount'][0])
    {
        $returnType = 'int';
        $request = $this->eventsGetContractEventsCountRequest($id, $level, $timestamp, $contract, $code_hash, $tag, $payload, $transaction_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'eventsGetContractEventsCount'
     *
     * @param  AccountsGetIdParameter $id Filter by internal TzKT id.   Click on the parameter to expand more details. (optional)
     * @param  AccountsGetIdParameter $level Filter by level of the block where the event was emitted.   Click on the parameter to expand more details. (optional)
     * @param  BigMapsGetBigMapUpdatesTimestampParameter $timestamp Filter by timestamp (ISO 8601) of the block where the event was emitted.   Click on the parameter to expand more details. (optional)
     * @param  AccountsGetDelegateParameter $contract Filter by contract address.   Click on the parameter to expand more details. (optional)
     * @param  AccountsGetIdParameter $code_hash Filter by hash of the code of the contract emitted the event.   Click on the parameter to expand more details. (optional)
     * @param  AccountsGetOperationsEntrypointParameter $tag Filter by event tag.   Click on the parameter to expand more details. (optional)
     * @param  AccountsGetOperationsParameterParameter $payload Filter by payload.   Note, this parameter supports the following format: &#x60;payload{.path?}{.mode?}&#x3D;...&#x60;, so you can specify a path to a particular field to filter by (for example, &#x60;?payload.foo.bar.in&#x3D;1,2,3&#x60;).   Click on the parameter to expand more details. (optional)
     * @param  AccountsGetBalanceParameter $transaction_id Filter by id of the transaction, in which the event was emitted.   Click on the parameter to expand more details. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['eventsGetContractEventsCount'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function eventsGetContractEventsCountRequest($id = null, $level = null, $timestamp = null, $contract = null, $code_hash = null, $tag = null, $payload = null, $transaction_id = null, string $contentType = self::contentTypes['eventsGetContractEventsCount'][0])
    {










        $resourcePath = '/v1/contracts/events/count';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $id,
            'id', // param base name
            'OneOfInt32Parameter', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $level,
            'level', // param base name
            'OneOfInt32Parameter', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $timestamp,
            'timestamp', // param base name
            'OneOfTimestampParameter', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $contract,
            'contract', // param base name
            'OneOfAccountParameter', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $code_hash,
            'codeHash', // param base name
            'OneOfInt32Parameter', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $tag,
            'tag', // param base name
            'OneOfStringParameter', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $payload,
            'payload', // param base name
            'OneOfJsonParameter', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $transaction_id,
            'transactionId', // param base name
            'OneOfInt64Parameter', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
