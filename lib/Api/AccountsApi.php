<?php
/**
 * AccountsApi
 * PHP version 7.2
 *
 * @category Class
 * @package  Bzzhh\Tzkt
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * TzKT API
 *
 * # Introduction  TzKT Explorer provides a free REST-like API and WebSocket API for accessing detailed Tezos blockchain data and helps developers build more services and applications on top of Tezos. TzKT is an open-source project, so you can easily clone and build it and use it as a self-hosted service to avoid any risks depending on third-party services.  TzKT API is available for the following Tezos networks with the following base URLs:  - Mainnet: `https://api.tzkt.io/` or `https://api.mainnet.tzkt.io/` ([view docs](https://api.tzkt.io)) - Edo2net: `https://api.edo2net.tzkt.io/` ([view docs](https://api.edo2net.tzkt.io)) - Florencenet: `https://api.florencenet.tzkt.io/` ([view docs](https://api.florencenet.tzkt.io))  We also provide a staging environment for testing newest features and pre-updating client applications before deploying to production:  - Mainnet staging: `https://staging.api.tzkt.io/` or `https://staging.api.mainnet.tzkt.io/` ([view docs](https://staging.api.tzkt.io)) - Edo2net staging: `https://staging.api.edo2net.tzkt.io/` ([view docs](https://staging.api.edo2net.tzkt.io))      Feel free to contact us if you have any questions or feature requests. Your feedback really helps us make TzKT better!  - Email: hello@baking-bad.org - Twitter: https://twitter.com/TezosBakingBad - Telegram: [tg://resolve?domain=baking_bad_chat](tg://resolve?domain=baking_bad_chat) - Slack: https://tezos-dev.slack.com/archives/CV5NX7F2L  And don't forget to star TzKT project [on GitHub](https://github.com/baking-bad/tzkt) ;)  # Terms of Use  TzKT API is free for everyone and for both commercial and non-commercial usage.  If your application or service uses the TzKT API in any forms: directly on frontend or indirectly on backend, you should mention that fact on your website or application by placing the label **\"Powered by TzKT API\"** with a direct link to [tzkt.io](https://tzkt.io).   # Rate Limits  There will be no rate limits as long as our servers can handle the load without additional infrastructure costs. However, any apparent abuse will be prevented by setting targeted rate limits.  Check out [Tezos Explorer API Best Practices](https://baking-bad.org/blog/tag/TzKT/) and in particular [how to optimize requests count](https://baking-bad.org/blog/2020/07/29/tezos-explorer-api-tzkt-how-often-to-make-requests/).  ---
 *
 * The version of the OpenAPI document: v1.5
 * Contact: hello@baking-bad.org
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.2.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Bzzhh\Tzkt\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Bzzhh\Tzkt\ApiException;
use Bzzhh\Tzkt\Configuration;
use Bzzhh\Tzkt\HeaderSelector;
use Bzzhh\Tzkt\ObjectSerializer;

/**
 * AccountsApi Class Doc Comment
 *
 * @category Class
 * @package  Bzzhh\Tzkt
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class AccountsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation accountsGet
     *
     * Get accounts
     *
     * @param  OneOfAccountTypeParameter $type Filters accounts by type (&#x60;user&#x60;, &#x60;delegate&#x60;, &#x60;contract&#x60;). (optional)
     * @param  OneOfContractKindParameter $kind Filters accounts by contract kind (&#x60;delegator_contract&#x60; or &#x60;smart_contract&#x60;) (optional)
     * @param  OneOfAccountParameter $delegate Filters accounts by delegate. Allowed fields for &#x60;.eqx&#x60; mode: none. (optional)
     * @param  OneOfInt64Parameter $balance Filters accounts by balance (optional)
     * @param  OneOfBoolParameter $staked Filters accounts by participation in staking (optional)
     * @param  OneOfInt32Parameter $last_activity Filters accounts by last activity level (where the account was updated) (optional)
     * @param  OneOfSelectParameter $select Specify comma-separated list of fields to include into response or leave it undefined to return full object. If you select single field, response will be an array of values in both &#x60;.fields&#x60; and &#x60;.values&#x60; modes. (optional)
     * @param  OneOfSortParameter $sort Sorts delegators by specified field. Supported fields: &#x60;id&#x60; (default), &#x60;balance&#x60;, &#x60;firstActivity&#x60;, &#x60;lastActivity&#x60;, &#x60;numTransactions&#x60;, &#x60;numContracts&#x60;. (optional)
     * @param  OneOfOffsetParameter $offset Specifies which or how many items should be skipped (optional)
     * @param  int $limit Maximum number of items to return (optional, default to 100)
     *
     * @throws \Bzzhh\Tzkt\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Bzzhh\Tzkt\Model\Account[]
     */
    public function accountsGet($type = null, $kind = null, $delegate = null, $balance = null, $staked = null, $last_activity = null, $select = null, $sort = null, $offset = null, $limit = 100)
    {
        list($response) = $this->accountsGetWithHttpInfo($type, $kind, $delegate, $balance, $staked, $last_activity, $select, $sort, $offset, $limit);
        return $response;
    }

    /**
     * Operation accountsGetWithHttpInfo
     *
     * Get accounts
     *
     * @param  OneOfAccountTypeParameter $type Filters accounts by type (&#x60;user&#x60;, &#x60;delegate&#x60;, &#x60;contract&#x60;). (optional)
     * @param  OneOfContractKindParameter $kind Filters accounts by contract kind (&#x60;delegator_contract&#x60; or &#x60;smart_contract&#x60;) (optional)
     * @param  OneOfAccountParameter $delegate Filters accounts by delegate. Allowed fields for &#x60;.eqx&#x60; mode: none. (optional)
     * @param  OneOfInt64Parameter $balance Filters accounts by balance (optional)
     * @param  OneOfBoolParameter $staked Filters accounts by participation in staking (optional)
     * @param  OneOfInt32Parameter $last_activity Filters accounts by last activity level (where the account was updated) (optional)
     * @param  OneOfSelectParameter $select Specify comma-separated list of fields to include into response or leave it undefined to return full object. If you select single field, response will be an array of values in both &#x60;.fields&#x60; and &#x60;.values&#x60; modes. (optional)
     * @param  OneOfSortParameter $sort Sorts delegators by specified field. Supported fields: &#x60;id&#x60; (default), &#x60;balance&#x60;, &#x60;firstActivity&#x60;, &#x60;lastActivity&#x60;, &#x60;numTransactions&#x60;, &#x60;numContracts&#x60;. (optional)
     * @param  OneOfOffsetParameter $offset Specifies which or how many items should be skipped (optional)
     * @param  int $limit Maximum number of items to return (optional, default to 100)
     *
     * @throws \Bzzhh\Tzkt\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Bzzhh\Tzkt\Model\Account[], HTTP status code, HTTP response headers (array of strings)
     */
    public function accountsGetWithHttpInfo($type = null, $kind = null, $delegate = null, $balance = null, $staked = null, $last_activity = null, $select = null, $sort = null, $offset = null, $limit = 100)
    {
        $request = $this->accountsGetRequest($type, $kind, $delegate, $balance, $staked, $last_activity, $select, $sort, $offset, $limit);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Bzzhh\Tzkt\Model\Account[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bzzhh\Tzkt\Model\Account[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Bzzhh\Tzkt\Model\Account[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bzzhh\Tzkt\Model\Account[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation accountsGetAsync
     *
     * Get accounts
     *
     * @param  OneOfAccountTypeParameter $type Filters accounts by type (&#x60;user&#x60;, &#x60;delegate&#x60;, &#x60;contract&#x60;). (optional)
     * @param  OneOfContractKindParameter $kind Filters accounts by contract kind (&#x60;delegator_contract&#x60; or &#x60;smart_contract&#x60;) (optional)
     * @param  OneOfAccountParameter $delegate Filters accounts by delegate. Allowed fields for &#x60;.eqx&#x60; mode: none. (optional)
     * @param  OneOfInt64Parameter $balance Filters accounts by balance (optional)
     * @param  OneOfBoolParameter $staked Filters accounts by participation in staking (optional)
     * @param  OneOfInt32Parameter $last_activity Filters accounts by last activity level (where the account was updated) (optional)
     * @param  OneOfSelectParameter $select Specify comma-separated list of fields to include into response or leave it undefined to return full object. If you select single field, response will be an array of values in both &#x60;.fields&#x60; and &#x60;.values&#x60; modes. (optional)
     * @param  OneOfSortParameter $sort Sorts delegators by specified field. Supported fields: &#x60;id&#x60; (default), &#x60;balance&#x60;, &#x60;firstActivity&#x60;, &#x60;lastActivity&#x60;, &#x60;numTransactions&#x60;, &#x60;numContracts&#x60;. (optional)
     * @param  OneOfOffsetParameter $offset Specifies which or how many items should be skipped (optional)
     * @param  int $limit Maximum number of items to return (optional, default to 100)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountsGetAsync($type = null, $kind = null, $delegate = null, $balance = null, $staked = null, $last_activity = null, $select = null, $sort = null, $offset = null, $limit = 100)
    {
        return $this->accountsGetAsyncWithHttpInfo($type, $kind, $delegate, $balance, $staked, $last_activity, $select, $sort, $offset, $limit)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation accountsGetAsyncWithHttpInfo
     *
     * Get accounts
     *
     * @param  OneOfAccountTypeParameter $type Filters accounts by type (&#x60;user&#x60;, &#x60;delegate&#x60;, &#x60;contract&#x60;). (optional)
     * @param  OneOfContractKindParameter $kind Filters accounts by contract kind (&#x60;delegator_contract&#x60; or &#x60;smart_contract&#x60;) (optional)
     * @param  OneOfAccountParameter $delegate Filters accounts by delegate. Allowed fields for &#x60;.eqx&#x60; mode: none. (optional)
     * @param  OneOfInt64Parameter $balance Filters accounts by balance (optional)
     * @param  OneOfBoolParameter $staked Filters accounts by participation in staking (optional)
     * @param  OneOfInt32Parameter $last_activity Filters accounts by last activity level (where the account was updated) (optional)
     * @param  OneOfSelectParameter $select Specify comma-separated list of fields to include into response or leave it undefined to return full object. If you select single field, response will be an array of values in both &#x60;.fields&#x60; and &#x60;.values&#x60; modes. (optional)
     * @param  OneOfSortParameter $sort Sorts delegators by specified field. Supported fields: &#x60;id&#x60; (default), &#x60;balance&#x60;, &#x60;firstActivity&#x60;, &#x60;lastActivity&#x60;, &#x60;numTransactions&#x60;, &#x60;numContracts&#x60;. (optional)
     * @param  OneOfOffsetParameter $offset Specifies which or how many items should be skipped (optional)
     * @param  int $limit Maximum number of items to return (optional, default to 100)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountsGetAsyncWithHttpInfo($type = null, $kind = null, $delegate = null, $balance = null, $staked = null, $last_activity = null, $select = null, $sort = null, $offset = null, $limit = 100)
    {
        $returnType = '\Bzzhh\Tzkt\Model\Account[]';
        $request = $this->accountsGetRequest($type, $kind, $delegate, $balance, $staked, $last_activity, $select, $sort, $offset, $limit);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'accountsGet'
     *
     * @param  OneOfAccountTypeParameter $type Filters accounts by type (&#x60;user&#x60;, &#x60;delegate&#x60;, &#x60;contract&#x60;). (optional)
     * @param  OneOfContractKindParameter $kind Filters accounts by contract kind (&#x60;delegator_contract&#x60; or &#x60;smart_contract&#x60;) (optional)
     * @param  OneOfAccountParameter $delegate Filters accounts by delegate. Allowed fields for &#x60;.eqx&#x60; mode: none. (optional)
     * @param  OneOfInt64Parameter $balance Filters accounts by balance (optional)
     * @param  OneOfBoolParameter $staked Filters accounts by participation in staking (optional)
     * @param  OneOfInt32Parameter $last_activity Filters accounts by last activity level (where the account was updated) (optional)
     * @param  OneOfSelectParameter $select Specify comma-separated list of fields to include into response or leave it undefined to return full object. If you select single field, response will be an array of values in both &#x60;.fields&#x60; and &#x60;.values&#x60; modes. (optional)
     * @param  OneOfSortParameter $sort Sorts delegators by specified field. Supported fields: &#x60;id&#x60; (default), &#x60;balance&#x60;, &#x60;firstActivity&#x60;, &#x60;lastActivity&#x60;, &#x60;numTransactions&#x60;, &#x60;numContracts&#x60;. (optional)
     * @param  OneOfOffsetParameter $offset Specifies which or how many items should be skipped (optional)
     * @param  int $limit Maximum number of items to return (optional, default to 100)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function accountsGetRequest($type = null, $kind = null, $delegate = null, $balance = null, $staked = null, $last_activity = null, $select = null, $sort = null, $offset = null, $limit = 100)
    {
        if ($limit !== null && $limit > 10000) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling AccountsApi.accountsGet, must be smaller than or equal to 10000.');
        }
        if ($limit !== null && $limit < 0) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling AccountsApi.accountsGet, must be bigger than or equal to 0.');
        }


        $resourcePath = '/v1/accounts';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($type !== null) {
            if('form' === 'form' && is_array($type)) {
                foreach($type as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['type'] = $type;
            }
        }
        // query params
        if ($kind !== null) {
            if('form' === 'form' && is_array($kind)) {
                foreach($kind as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['kind'] = $kind;
            }
        }
        // query params
        if ($delegate !== null) {
            if('form' === 'form' && is_array($delegate)) {
                foreach($delegate as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['delegate'] = $delegate;
            }
        }
        // query params
        if ($balance !== null) {
            if('form' === 'form' && is_array($balance)) {
                foreach($balance as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['balance'] = $balance;
            }
        }
        // query params
        if ($staked !== null) {
            if('form' === 'form' && is_array($staked)) {
                foreach($staked as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['staked'] = $staked;
            }
        }
        // query params
        if ($last_activity !== null) {
            if('form' === 'form' && is_array($last_activity)) {
                foreach($last_activity as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['lastActivity'] = $last_activity;
            }
        }
        // query params
        if ($select !== null) {
            if('form' === 'form' && is_array($select)) {
                foreach($select as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['select'] = $select;
            }
        }
        // query params
        if ($sort !== null) {
            if('form' === 'form' && is_array($sort)) {
                foreach($sort as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['sort'] = $sort;
            }
        }
        // query params
        if ($offset !== null) {
            if('form' === 'form' && is_array($offset)) {
                foreach($offset as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['offset'] = $offset;
            }
        }
        // query params
        if ($limit !== null) {
            if('form' === 'form' && is_array($limit)) {
                foreach($limit as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['limit'] = $limit;
            }
        }




        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation accountsGetBalanceAtDate
     *
     * Get balance at date
     *
     * @param  string $address Account address (starting with tz or KT) (required)
     * @param  \DateTime $datetime Datetime at which you want to know account balance (e.g. &#x60;2020-01-01&#x60;, or &#x60;2019-12-30T23:42:59Z&#x60;) (required)
     *
     * @throws \Bzzhh\Tzkt\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return int
     */
    public function accountsGetBalanceAtDate($address, $datetime)
    {
        list($response) = $this->accountsGetBalanceAtDateWithHttpInfo($address, $datetime);
        return $response;
    }

    /**
     * Operation accountsGetBalanceAtDateWithHttpInfo
     *
     * Get balance at date
     *
     * @param  string $address Account address (starting with tz or KT) (required)
     * @param  \DateTime $datetime Datetime at which you want to know account balance (e.g. &#x60;2020-01-01&#x60;, or &#x60;2019-12-30T23:42:59Z&#x60;) (required)
     *
     * @throws \Bzzhh\Tzkt\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of int, HTTP status code, HTTP response headers (array of strings)
     */
    public function accountsGetBalanceAtDateWithHttpInfo($address, $datetime)
    {
        $request = $this->accountsGetBalanceAtDateRequest($address, $datetime);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('int' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'int', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'int';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'int',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation accountsGetBalanceAtDateAsync
     *
     * Get balance at date
     *
     * @param  string $address Account address (starting with tz or KT) (required)
     * @param  \DateTime $datetime Datetime at which you want to know account balance (e.g. &#x60;2020-01-01&#x60;, or &#x60;2019-12-30T23:42:59Z&#x60;) (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountsGetBalanceAtDateAsync($address, $datetime)
    {
        return $this->accountsGetBalanceAtDateAsyncWithHttpInfo($address, $datetime)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation accountsGetBalanceAtDateAsyncWithHttpInfo
     *
     * Get balance at date
     *
     * @param  string $address Account address (starting with tz or KT) (required)
     * @param  \DateTime $datetime Datetime at which you want to know account balance (e.g. &#x60;2020-01-01&#x60;, or &#x60;2019-12-30T23:42:59Z&#x60;) (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountsGetBalanceAtDateAsyncWithHttpInfo($address, $datetime)
    {
        $returnType = 'int';
        $request = $this->accountsGetBalanceAtDateRequest($address, $datetime);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'accountsGetBalanceAtDate'
     *
     * @param  string $address Account address (starting with tz or KT) (required)
     * @param  \DateTime $datetime Datetime at which you want to know account balance (e.g. &#x60;2020-01-01&#x60;, or &#x60;2019-12-30T23:42:59Z&#x60;) (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function accountsGetBalanceAtDateRequest($address, $datetime)
    {
        // verify the required parameter 'address' is set
        if ($address === null || (is_array($address) && count($address) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $address when calling accountsGetBalanceAtDate'
            );
        }
        // verify the required parameter 'datetime' is set
        if ($datetime === null || (is_array($datetime) && count($datetime) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $datetime when calling accountsGetBalanceAtDate'
            );
        }

        $resourcePath = '/v1/accounts/{address}/balance_history/{datetime}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($address !== null) {
            $resourcePath = str_replace(
                '{' . 'address' . '}',
                ObjectSerializer::toPathValue($address),
                $resourcePath
            );
        }
        // path params
        if ($datetime !== null) {
            $resourcePath = str_replace(
                '{' . 'datetime' . '}',
                ObjectSerializer::toPathValue($datetime),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation accountsGetBalanceAtLevel
     *
     * Get balance at level
     *
     * @param  string $address Account address (starting with tz or KT) (required)
     * @param  int $level Block height at which you want to know account balance (required)
     *
     * @throws \Bzzhh\Tzkt\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return int
     */
    public function accountsGetBalanceAtLevel($address, $level)
    {
        list($response) = $this->accountsGetBalanceAtLevelWithHttpInfo($address, $level);
        return $response;
    }

    /**
     * Operation accountsGetBalanceAtLevelWithHttpInfo
     *
     * Get balance at level
     *
     * @param  string $address Account address (starting with tz or KT) (required)
     * @param  int $level Block height at which you want to know account balance (required)
     *
     * @throws \Bzzhh\Tzkt\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of int, HTTP status code, HTTP response headers (array of strings)
     */
    public function accountsGetBalanceAtLevelWithHttpInfo($address, $level)
    {
        $request = $this->accountsGetBalanceAtLevelRequest($address, $level);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('int' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'int', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'int';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'int',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation accountsGetBalanceAtLevelAsync
     *
     * Get balance at level
     *
     * @param  string $address Account address (starting with tz or KT) (required)
     * @param  int $level Block height at which you want to know account balance (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountsGetBalanceAtLevelAsync($address, $level)
    {
        return $this->accountsGetBalanceAtLevelAsyncWithHttpInfo($address, $level)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation accountsGetBalanceAtLevelAsyncWithHttpInfo
     *
     * Get balance at level
     *
     * @param  string $address Account address (starting with tz or KT) (required)
     * @param  int $level Block height at which you want to know account balance (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountsGetBalanceAtLevelAsyncWithHttpInfo($address, $level)
    {
        $returnType = 'int';
        $request = $this->accountsGetBalanceAtLevelRequest($address, $level);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'accountsGetBalanceAtLevel'
     *
     * @param  string $address Account address (starting with tz or KT) (required)
     * @param  int $level Block height at which you want to know account balance (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function accountsGetBalanceAtLevelRequest($address, $level)
    {
        // verify the required parameter 'address' is set
        if ($address === null || (is_array($address) && count($address) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $address when calling accountsGetBalanceAtLevel'
            );
        }
        // verify the required parameter 'level' is set
        if ($level === null || (is_array($level) && count($level) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $level when calling accountsGetBalanceAtLevel'
            );
        }

        $resourcePath = '/v1/accounts/{address}/balance_history/{level}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($address !== null) {
            $resourcePath = str_replace(
                '{' . 'address' . '}',
                ObjectSerializer::toPathValue($address),
                $resourcePath
            );
        }
        // path params
        if ($level !== null) {
            $resourcePath = str_replace(
                '{' . 'level' . '}',
                ObjectSerializer::toPathValue($level),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation accountsGetBalanceHistory
     *
     * Get balance history
     *
     * @param  string $address Account address (starting with tz or KT) (required)
     * @param  int $step Step of the time series, for example if &#x60;step &#x3D; 1000&#x60; you will get balances at blocks &#x60;1000, 2000, 3000, ...&#x60;. (optional)
     * @param  OneOfSelectParameter $select Specify comma-separated list of fields to include into response or leave it undefined to return full object. If you select single field, response will be an array of values in both &#x60;.fields&#x60; and &#x60;.values&#x60; modes. (optional)
     * @param  OneOfSortParameter $sort Sorts historical balances by specified field. Supported fields: &#x60;level&#x60;. (optional)
     * @param  int $offset Specifies which or how many items should be skipped (optional, default to 0)
     * @param  int $limit Maximum number of items to return (optional, default to 100)
     * @param  OneOfSymbols $quote Comma-separated list of ticker symbols to inject historical prices into response (optional)
     *
     * @throws \Bzzhh\Tzkt\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Bzzhh\Tzkt\Model\HistoricalBalance[]
     */
    public function accountsGetBalanceHistory($address, $step = null, $select = null, $sort = null, $offset = 0, $limit = 100, $quote = null)
    {
        list($response) = $this->accountsGetBalanceHistoryWithHttpInfo($address, $step, $select, $sort, $offset, $limit, $quote);
        return $response;
    }

    /**
     * Operation accountsGetBalanceHistoryWithHttpInfo
     *
     * Get balance history
     *
     * @param  string $address Account address (starting with tz or KT) (required)
     * @param  int $step Step of the time series, for example if &#x60;step &#x3D; 1000&#x60; you will get balances at blocks &#x60;1000, 2000, 3000, ...&#x60;. (optional)
     * @param  OneOfSelectParameter $select Specify comma-separated list of fields to include into response or leave it undefined to return full object. If you select single field, response will be an array of values in both &#x60;.fields&#x60; and &#x60;.values&#x60; modes. (optional)
     * @param  OneOfSortParameter $sort Sorts historical balances by specified field. Supported fields: &#x60;level&#x60;. (optional)
     * @param  int $offset Specifies which or how many items should be skipped (optional, default to 0)
     * @param  int $limit Maximum number of items to return (optional, default to 100)
     * @param  OneOfSymbols $quote Comma-separated list of ticker symbols to inject historical prices into response (optional)
     *
     * @throws \Bzzhh\Tzkt\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Bzzhh\Tzkt\Model\HistoricalBalance[], HTTP status code, HTTP response headers (array of strings)
     */
    public function accountsGetBalanceHistoryWithHttpInfo($address, $step = null, $select = null, $sort = null, $offset = 0, $limit = 100, $quote = null)
    {
        $request = $this->accountsGetBalanceHistoryRequest($address, $step, $select, $sort, $offset, $limit, $quote);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Bzzhh\Tzkt\Model\HistoricalBalance[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bzzhh\Tzkt\Model\HistoricalBalance[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Bzzhh\Tzkt\Model\HistoricalBalance[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bzzhh\Tzkt\Model\HistoricalBalance[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation accountsGetBalanceHistoryAsync
     *
     * Get balance history
     *
     * @param  string $address Account address (starting with tz or KT) (required)
     * @param  int $step Step of the time series, for example if &#x60;step &#x3D; 1000&#x60; you will get balances at blocks &#x60;1000, 2000, 3000, ...&#x60;. (optional)
     * @param  OneOfSelectParameter $select Specify comma-separated list of fields to include into response or leave it undefined to return full object. If you select single field, response will be an array of values in both &#x60;.fields&#x60; and &#x60;.values&#x60; modes. (optional)
     * @param  OneOfSortParameter $sort Sorts historical balances by specified field. Supported fields: &#x60;level&#x60;. (optional)
     * @param  int $offset Specifies which or how many items should be skipped (optional, default to 0)
     * @param  int $limit Maximum number of items to return (optional, default to 100)
     * @param  OneOfSymbols $quote Comma-separated list of ticker symbols to inject historical prices into response (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountsGetBalanceHistoryAsync($address, $step = null, $select = null, $sort = null, $offset = 0, $limit = 100, $quote = null)
    {
        return $this->accountsGetBalanceHistoryAsyncWithHttpInfo($address, $step, $select, $sort, $offset, $limit, $quote)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation accountsGetBalanceHistoryAsyncWithHttpInfo
     *
     * Get balance history
     *
     * @param  string $address Account address (starting with tz or KT) (required)
     * @param  int $step Step of the time series, for example if &#x60;step &#x3D; 1000&#x60; you will get balances at blocks &#x60;1000, 2000, 3000, ...&#x60;. (optional)
     * @param  OneOfSelectParameter $select Specify comma-separated list of fields to include into response or leave it undefined to return full object. If you select single field, response will be an array of values in both &#x60;.fields&#x60; and &#x60;.values&#x60; modes. (optional)
     * @param  OneOfSortParameter $sort Sorts historical balances by specified field. Supported fields: &#x60;level&#x60;. (optional)
     * @param  int $offset Specifies which or how many items should be skipped (optional, default to 0)
     * @param  int $limit Maximum number of items to return (optional, default to 100)
     * @param  OneOfSymbols $quote Comma-separated list of ticker symbols to inject historical prices into response (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountsGetBalanceHistoryAsyncWithHttpInfo($address, $step = null, $select = null, $sort = null, $offset = 0, $limit = 100, $quote = null)
    {
        $returnType = '\Bzzhh\Tzkt\Model\HistoricalBalance[]';
        $request = $this->accountsGetBalanceHistoryRequest($address, $step, $select, $sort, $offset, $limit, $quote);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'accountsGetBalanceHistory'
     *
     * @param  string $address Account address (starting with tz or KT) (required)
     * @param  int $step Step of the time series, for example if &#x60;step &#x3D; 1000&#x60; you will get balances at blocks &#x60;1000, 2000, 3000, ...&#x60;. (optional)
     * @param  OneOfSelectParameter $select Specify comma-separated list of fields to include into response or leave it undefined to return full object. If you select single field, response will be an array of values in both &#x60;.fields&#x60; and &#x60;.values&#x60; modes. (optional)
     * @param  OneOfSortParameter $sort Sorts historical balances by specified field. Supported fields: &#x60;level&#x60;. (optional)
     * @param  int $offset Specifies which or how many items should be skipped (optional, default to 0)
     * @param  int $limit Maximum number of items to return (optional, default to 100)
     * @param  OneOfSymbols $quote Comma-separated list of ticker symbols to inject historical prices into response (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function accountsGetBalanceHistoryRequest($address, $step = null, $select = null, $sort = null, $offset = 0, $limit = 100, $quote = null)
    {
        // verify the required parameter 'address' is set
        if ($address === null || (is_array($address) && count($address) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $address when calling accountsGetBalanceHistory'
            );
        }
        if ($limit !== null && $limit > 10000) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling AccountsApi.accountsGetBalanceHistory, must be smaller than or equal to 10000.');
        }
        if ($limit !== null && $limit < 0) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling AccountsApi.accountsGetBalanceHistory, must be bigger than or equal to 0.');
        }


        $resourcePath = '/v1/accounts/{address}/balance_history';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($step !== null) {
            if('form' === 'form' && is_array($step)) {
                foreach($step as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['step'] = $step;
            }
        }
        // query params
        if ($select !== null) {
            if('form' === 'form' && is_array($select)) {
                foreach($select as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['select'] = $select;
            }
        }
        // query params
        if ($sort !== null) {
            if('form' === 'form' && is_array($sort)) {
                foreach($sort as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['sort'] = $sort;
            }
        }
        // query params
        if ($offset !== null) {
            if('form' === 'form' && is_array($offset)) {
                foreach($offset as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['offset'] = $offset;
            }
        }
        // query params
        if ($limit !== null) {
            if('form' === 'form' && is_array($limit)) {
                foreach($limit as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['limit'] = $limit;
            }
        }
        // query params
        if ($quote !== null) {
            if('form' === 'form' && is_array($quote)) {
                foreach($quote as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['quote'] = $quote;
            }
        }


        // path params
        if ($address !== null) {
            $resourcePath = str_replace(
                '{' . 'address' . '}',
                ObjectSerializer::toPathValue($address),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation accountsGetBalanceReport
     *
     * Get account report
     *
     * @param  string $address Account address (starting with tz or KT) (required)
     * @param  \DateTime $from Start of the datetime range to filter by (ISO 8601, e.g. 2019-11-31) (optional)
     * @param  \DateTime $to End of the datetime range to filter by (ISO 8601, e.g. 2019-12-31) (optional)
     * @param  string $currency Currency to convert amounts to (&#x60;btc&#x60;, &#x60;eur&#x60;, &#x60;usd&#x60;, &#x60;cny&#x60;, &#x60;jpy&#x60;, &#x60;krw&#x60;, &#x60;eth&#x60;) (optional)
     * @param  bool $historical &#x60;true&#x60; if you want to use historical prices, &#x60;false&#x60; to use current price (optional, default to false)
     * @param  string $delimiter Column delimiter (&#x60;comma&#x60;, &#x60;semicolon&#x60;) (optional, default to 'comma')
     * @param  string $separator Decimal separator (&#x60;comma&#x60;, &#x60;point&#x60;) (optional, default to 'point')
     *
     * @throws \Bzzhh\Tzkt\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \SplFileObject
     */
    public function accountsGetBalanceReport($address, $from = null, $to = null, $currency = null, $historical = false, $delimiter = 'comma', $separator = 'point')
    {
        list($response) = $this->accountsGetBalanceReportWithHttpInfo($address, $from, $to, $currency, $historical, $delimiter, $separator);
        return $response;
    }

    /**
     * Operation accountsGetBalanceReportWithHttpInfo
     *
     * Get account report
     *
     * @param  string $address Account address (starting with tz or KT) (required)
     * @param  \DateTime $from Start of the datetime range to filter by (ISO 8601, e.g. 2019-11-31) (optional)
     * @param  \DateTime $to End of the datetime range to filter by (ISO 8601, e.g. 2019-12-31) (optional)
     * @param  string $currency Currency to convert amounts to (&#x60;btc&#x60;, &#x60;eur&#x60;, &#x60;usd&#x60;, &#x60;cny&#x60;, &#x60;jpy&#x60;, &#x60;krw&#x60;, &#x60;eth&#x60;) (optional)
     * @param  bool $historical &#x60;true&#x60; if you want to use historical prices, &#x60;false&#x60; to use current price (optional, default to false)
     * @param  string $delimiter Column delimiter (&#x60;comma&#x60;, &#x60;semicolon&#x60;) (optional, default to 'comma')
     * @param  string $separator Decimal separator (&#x60;comma&#x60;, &#x60;point&#x60;) (optional, default to 'point')
     *
     * @throws \Bzzhh\Tzkt\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \SplFileObject, HTTP status code, HTTP response headers (array of strings)
     */
    public function accountsGetBalanceReportWithHttpInfo($address, $from = null, $to = null, $currency = null, $historical = false, $delimiter = 'comma', $separator = 'point')
    {
        $request = $this->accountsGetBalanceReportRequest($address, $from, $to, $currency, $historical, $delimiter, $separator);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\SplFileObject' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SplFileObject', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\SplFileObject';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SplFileObject',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation accountsGetBalanceReportAsync
     *
     * Get account report
     *
     * @param  string $address Account address (starting with tz or KT) (required)
     * @param  \DateTime $from Start of the datetime range to filter by (ISO 8601, e.g. 2019-11-31) (optional)
     * @param  \DateTime $to End of the datetime range to filter by (ISO 8601, e.g. 2019-12-31) (optional)
     * @param  string $currency Currency to convert amounts to (&#x60;btc&#x60;, &#x60;eur&#x60;, &#x60;usd&#x60;, &#x60;cny&#x60;, &#x60;jpy&#x60;, &#x60;krw&#x60;, &#x60;eth&#x60;) (optional)
     * @param  bool $historical &#x60;true&#x60; if you want to use historical prices, &#x60;false&#x60; to use current price (optional, default to false)
     * @param  string $delimiter Column delimiter (&#x60;comma&#x60;, &#x60;semicolon&#x60;) (optional, default to 'comma')
     * @param  string $separator Decimal separator (&#x60;comma&#x60;, &#x60;point&#x60;) (optional, default to 'point')
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountsGetBalanceReportAsync($address, $from = null, $to = null, $currency = null, $historical = false, $delimiter = 'comma', $separator = 'point')
    {
        return $this->accountsGetBalanceReportAsyncWithHttpInfo($address, $from, $to, $currency, $historical, $delimiter, $separator)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation accountsGetBalanceReportAsyncWithHttpInfo
     *
     * Get account report
     *
     * @param  string $address Account address (starting with tz or KT) (required)
     * @param  \DateTime $from Start of the datetime range to filter by (ISO 8601, e.g. 2019-11-31) (optional)
     * @param  \DateTime $to End of the datetime range to filter by (ISO 8601, e.g. 2019-12-31) (optional)
     * @param  string $currency Currency to convert amounts to (&#x60;btc&#x60;, &#x60;eur&#x60;, &#x60;usd&#x60;, &#x60;cny&#x60;, &#x60;jpy&#x60;, &#x60;krw&#x60;, &#x60;eth&#x60;) (optional)
     * @param  bool $historical &#x60;true&#x60; if you want to use historical prices, &#x60;false&#x60; to use current price (optional, default to false)
     * @param  string $delimiter Column delimiter (&#x60;comma&#x60;, &#x60;semicolon&#x60;) (optional, default to 'comma')
     * @param  string $separator Decimal separator (&#x60;comma&#x60;, &#x60;point&#x60;) (optional, default to 'point')
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountsGetBalanceReportAsyncWithHttpInfo($address, $from = null, $to = null, $currency = null, $historical = false, $delimiter = 'comma', $separator = 'point')
    {
        $returnType = '\SplFileObject';
        $request = $this->accountsGetBalanceReportRequest($address, $from, $to, $currency, $historical, $delimiter, $separator);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'accountsGetBalanceReport'
     *
     * @param  string $address Account address (starting with tz or KT) (required)
     * @param  \DateTime $from Start of the datetime range to filter by (ISO 8601, e.g. 2019-11-31) (optional)
     * @param  \DateTime $to End of the datetime range to filter by (ISO 8601, e.g. 2019-12-31) (optional)
     * @param  string $currency Currency to convert amounts to (&#x60;btc&#x60;, &#x60;eur&#x60;, &#x60;usd&#x60;, &#x60;cny&#x60;, &#x60;jpy&#x60;, &#x60;krw&#x60;, &#x60;eth&#x60;) (optional)
     * @param  bool $historical &#x60;true&#x60; if you want to use historical prices, &#x60;false&#x60; to use current price (optional, default to false)
     * @param  string $delimiter Column delimiter (&#x60;comma&#x60;, &#x60;semicolon&#x60;) (optional, default to 'comma')
     * @param  string $separator Decimal separator (&#x60;comma&#x60;, &#x60;point&#x60;) (optional, default to 'point')
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function accountsGetBalanceReportRequest($address, $from = null, $to = null, $currency = null, $historical = false, $delimiter = 'comma', $separator = 'point')
    {
        // verify the required parameter 'address' is set
        if ($address === null || (is_array($address) && count($address) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $address when calling accountsGetBalanceReport'
            );
        }

        $resourcePath = '/v1/accounts/{address}/report';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($from !== null) {
            if('form' === 'form' && is_array($from)) {
                foreach($from as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['from'] = $from;
            }
        }
        // query params
        if ($to !== null) {
            if('form' === 'form' && is_array($to)) {
                foreach($to as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['to'] = $to;
            }
        }
        // query params
        if ($currency !== null) {
            if('form' === 'form' && is_array($currency)) {
                foreach($currency as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['currency'] = $currency;
            }
        }
        // query params
        if ($historical !== null) {
            if('form' === 'form' && is_array($historical)) {
                foreach($historical as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['historical'] = $historical;
            }
        }
        // query params
        if ($delimiter !== null) {
            if('form' === 'form' && is_array($delimiter)) {
                foreach($delimiter as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['delimiter'] = $delimiter;
            }
        }
        // query params
        if ($separator !== null) {
            if('form' === 'form' && is_array($separator)) {
                foreach($separator as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['separator'] = $separator;
            }
        }


        // path params
        if ($address !== null) {
            $resourcePath = str_replace(
                '{' . 'address' . '}',
                ObjectSerializer::toPathValue($address),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/octet-stream']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/octet-stream'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation accountsGetByAddress
     *
     * Get account by address
     *
     * @param  string $address Account address (starting with tz or KT) (required)
     * @param  bool $metadata Include or not account metadata (optional, default to false)
     *
     * @throws \Bzzhh\Tzkt\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Bzzhh\Tzkt\Model\Account
     */
    public function accountsGetByAddress($address, $metadata = false)
    {
        list($response) = $this->accountsGetByAddressWithHttpInfo($address, $metadata);
        return $response;
    }

    /**
     * Operation accountsGetByAddressWithHttpInfo
     *
     * Get account by address
     *
     * @param  string $address Account address (starting with tz or KT) (required)
     * @param  bool $metadata Include or not account metadata (optional, default to false)
     *
     * @throws \Bzzhh\Tzkt\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Bzzhh\Tzkt\Model\Account, HTTP status code, HTTP response headers (array of strings)
     */
    public function accountsGetByAddressWithHttpInfo($address, $metadata = false)
    {
        $request = $this->accountsGetByAddressRequest($address, $metadata);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Bzzhh\Tzkt\Model\Account' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bzzhh\Tzkt\Model\Account', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Bzzhh\Tzkt\Model\Account';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bzzhh\Tzkt\Model\Account',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation accountsGetByAddressAsync
     *
     * Get account by address
     *
     * @param  string $address Account address (starting with tz or KT) (required)
     * @param  bool $metadata Include or not account metadata (optional, default to false)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountsGetByAddressAsync($address, $metadata = false)
    {
        return $this->accountsGetByAddressAsyncWithHttpInfo($address, $metadata)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation accountsGetByAddressAsyncWithHttpInfo
     *
     * Get account by address
     *
     * @param  string $address Account address (starting with tz or KT) (required)
     * @param  bool $metadata Include or not account metadata (optional, default to false)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountsGetByAddressAsyncWithHttpInfo($address, $metadata = false)
    {
        $returnType = '\Bzzhh\Tzkt\Model\Account';
        $request = $this->accountsGetByAddressRequest($address, $metadata);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'accountsGetByAddress'
     *
     * @param  string $address Account address (starting with tz or KT) (required)
     * @param  bool $metadata Include or not account metadata (optional, default to false)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function accountsGetByAddressRequest($address, $metadata = false)
    {
        // verify the required parameter 'address' is set
        if ($address === null || (is_array($address) && count($address) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $address when calling accountsGetByAddress'
            );
        }

        $resourcePath = '/v1/accounts/{address}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($metadata !== null) {
            if('form' === 'form' && is_array($metadata)) {
                foreach($metadata as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['metadata'] = $metadata;
            }
        }


        // path params
        if ($address !== null) {
            $resourcePath = str_replace(
                '{' . 'address' . '}',
                ObjectSerializer::toPathValue($address),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation accountsGetContracts
     *
     * Get account contracts
     *
     * @param  string $address Account address (starting with tz or KT) (required)
     * @param  OneOfSortParameter $sort Sorts contracts by specified field. Supported fields: &#x60;id&#x60; (default, desc), &#x60;balance&#x60;, &#x60;creationLevel&#x60;. (optional)
     * @param  OneOfOffsetParameter $offset Specifies which or how many items should be skipped (optional)
     * @param  int $limit Maximum number of items to return (optional, default to 100)
     *
     * @throws \Bzzhh\Tzkt\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Bzzhh\Tzkt\Model\RelatedContract[]
     */
    public function accountsGetContracts($address, $sort = null, $offset = null, $limit = 100)
    {
        list($response) = $this->accountsGetContractsWithHttpInfo($address, $sort, $offset, $limit);
        return $response;
    }

    /**
     * Operation accountsGetContractsWithHttpInfo
     *
     * Get account contracts
     *
     * @param  string $address Account address (starting with tz or KT) (required)
     * @param  OneOfSortParameter $sort Sorts contracts by specified field. Supported fields: &#x60;id&#x60; (default, desc), &#x60;balance&#x60;, &#x60;creationLevel&#x60;. (optional)
     * @param  OneOfOffsetParameter $offset Specifies which or how many items should be skipped (optional)
     * @param  int $limit Maximum number of items to return (optional, default to 100)
     *
     * @throws \Bzzhh\Tzkt\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Bzzhh\Tzkt\Model\RelatedContract[], HTTP status code, HTTP response headers (array of strings)
     */
    public function accountsGetContractsWithHttpInfo($address, $sort = null, $offset = null, $limit = 100)
    {
        $request = $this->accountsGetContractsRequest($address, $sort, $offset, $limit);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Bzzhh\Tzkt\Model\RelatedContract[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bzzhh\Tzkt\Model\RelatedContract[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Bzzhh\Tzkt\Model\RelatedContract[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bzzhh\Tzkt\Model\RelatedContract[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation accountsGetContractsAsync
     *
     * Get account contracts
     *
     * @param  string $address Account address (starting with tz or KT) (required)
     * @param  OneOfSortParameter $sort Sorts contracts by specified field. Supported fields: &#x60;id&#x60; (default, desc), &#x60;balance&#x60;, &#x60;creationLevel&#x60;. (optional)
     * @param  OneOfOffsetParameter $offset Specifies which or how many items should be skipped (optional)
     * @param  int $limit Maximum number of items to return (optional, default to 100)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountsGetContractsAsync($address, $sort = null, $offset = null, $limit = 100)
    {
        return $this->accountsGetContractsAsyncWithHttpInfo($address, $sort, $offset, $limit)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation accountsGetContractsAsyncWithHttpInfo
     *
     * Get account contracts
     *
     * @param  string $address Account address (starting with tz or KT) (required)
     * @param  OneOfSortParameter $sort Sorts contracts by specified field. Supported fields: &#x60;id&#x60; (default, desc), &#x60;balance&#x60;, &#x60;creationLevel&#x60;. (optional)
     * @param  OneOfOffsetParameter $offset Specifies which or how many items should be skipped (optional)
     * @param  int $limit Maximum number of items to return (optional, default to 100)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountsGetContractsAsyncWithHttpInfo($address, $sort = null, $offset = null, $limit = 100)
    {
        $returnType = '\Bzzhh\Tzkt\Model\RelatedContract[]';
        $request = $this->accountsGetContractsRequest($address, $sort, $offset, $limit);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'accountsGetContracts'
     *
     * @param  string $address Account address (starting with tz or KT) (required)
     * @param  OneOfSortParameter $sort Sorts contracts by specified field. Supported fields: &#x60;id&#x60; (default, desc), &#x60;balance&#x60;, &#x60;creationLevel&#x60;. (optional)
     * @param  OneOfOffsetParameter $offset Specifies which or how many items should be skipped (optional)
     * @param  int $limit Maximum number of items to return (optional, default to 100)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function accountsGetContractsRequest($address, $sort = null, $offset = null, $limit = 100)
    {
        // verify the required parameter 'address' is set
        if ($address === null || (is_array($address) && count($address) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $address when calling accountsGetContracts'
            );
        }
        if ($limit !== null && $limit > 10000) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling AccountsApi.accountsGetContracts, must be smaller than or equal to 10000.');
        }
        if ($limit !== null && $limit < 0) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling AccountsApi.accountsGetContracts, must be bigger than or equal to 0.');
        }


        $resourcePath = '/v1/accounts/{address}/contracts';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($sort !== null) {
            if('form' === 'form' && is_array($sort)) {
                foreach($sort as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['sort'] = $sort;
            }
        }
        // query params
        if ($offset !== null) {
            if('form' === 'form' && is_array($offset)) {
                foreach($offset as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['offset'] = $offset;
            }
        }
        // query params
        if ($limit !== null) {
            if('form' === 'form' && is_array($limit)) {
                foreach($limit as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['limit'] = $limit;
            }
        }


        // path params
        if ($address !== null) {
            $resourcePath = str_replace(
                '{' . 'address' . '}',
                ObjectSerializer::toPathValue($address),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation accountsGetCount
     *
     * Get accounts count
     *
     * @param  OneOfAccountTypeParameter $type Filters accounts by type (&#x60;user&#x60;, &#x60;delegate&#x60;, &#x60;contract&#x60;). (optional)
     * @param  OneOfContractKindParameter $kind Filters accounts by contract kind (&#x60;delegator_contract&#x60; or &#x60;smart_contract&#x60;) (optional)
     * @param  OneOfInt64Parameter $balance Filters accounts by balance (optional)
     * @param  OneOfBoolParameter $staked Filters accounts by participation in staking (optional)
     *
     * @throws \Bzzhh\Tzkt\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return int
     */
    public function accountsGetCount($type = null, $kind = null, $balance = null, $staked = null)
    {
        list($response) = $this->accountsGetCountWithHttpInfo($type, $kind, $balance, $staked);
        return $response;
    }

    /**
     * Operation accountsGetCountWithHttpInfo
     *
     * Get accounts count
     *
     * @param  OneOfAccountTypeParameter $type Filters accounts by type (&#x60;user&#x60;, &#x60;delegate&#x60;, &#x60;contract&#x60;). (optional)
     * @param  OneOfContractKindParameter $kind Filters accounts by contract kind (&#x60;delegator_contract&#x60; or &#x60;smart_contract&#x60;) (optional)
     * @param  OneOfInt64Parameter $balance Filters accounts by balance (optional)
     * @param  OneOfBoolParameter $staked Filters accounts by participation in staking (optional)
     *
     * @throws \Bzzhh\Tzkt\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of int, HTTP status code, HTTP response headers (array of strings)
     */
    public function accountsGetCountWithHttpInfo($type = null, $kind = null, $balance = null, $staked = null)
    {
        $request = $this->accountsGetCountRequest($type, $kind, $balance, $staked);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('int' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'int', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'int';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'int',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation accountsGetCountAsync
     *
     * Get accounts count
     *
     * @param  OneOfAccountTypeParameter $type Filters accounts by type (&#x60;user&#x60;, &#x60;delegate&#x60;, &#x60;contract&#x60;). (optional)
     * @param  OneOfContractKindParameter $kind Filters accounts by contract kind (&#x60;delegator_contract&#x60; or &#x60;smart_contract&#x60;) (optional)
     * @param  OneOfInt64Parameter $balance Filters accounts by balance (optional)
     * @param  OneOfBoolParameter $staked Filters accounts by participation in staking (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountsGetCountAsync($type = null, $kind = null, $balance = null, $staked = null)
    {
        return $this->accountsGetCountAsyncWithHttpInfo($type, $kind, $balance, $staked)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation accountsGetCountAsyncWithHttpInfo
     *
     * Get accounts count
     *
     * @param  OneOfAccountTypeParameter $type Filters accounts by type (&#x60;user&#x60;, &#x60;delegate&#x60;, &#x60;contract&#x60;). (optional)
     * @param  OneOfContractKindParameter $kind Filters accounts by contract kind (&#x60;delegator_contract&#x60; or &#x60;smart_contract&#x60;) (optional)
     * @param  OneOfInt64Parameter $balance Filters accounts by balance (optional)
     * @param  OneOfBoolParameter $staked Filters accounts by participation in staking (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountsGetCountAsyncWithHttpInfo($type = null, $kind = null, $balance = null, $staked = null)
    {
        $returnType = 'int';
        $request = $this->accountsGetCountRequest($type, $kind, $balance, $staked);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'accountsGetCount'
     *
     * @param  OneOfAccountTypeParameter $type Filters accounts by type (&#x60;user&#x60;, &#x60;delegate&#x60;, &#x60;contract&#x60;). (optional)
     * @param  OneOfContractKindParameter $kind Filters accounts by contract kind (&#x60;delegator_contract&#x60; or &#x60;smart_contract&#x60;) (optional)
     * @param  OneOfInt64Parameter $balance Filters accounts by balance (optional)
     * @param  OneOfBoolParameter $staked Filters accounts by participation in staking (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function accountsGetCountRequest($type = null, $kind = null, $balance = null, $staked = null)
    {

        $resourcePath = '/v1/accounts/count';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($type !== null) {
            if('form' === 'form' && is_array($type)) {
                foreach($type as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['type'] = $type;
            }
        }
        // query params
        if ($kind !== null) {
            if('form' === 'form' && is_array($kind)) {
                foreach($kind as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['kind'] = $kind;
            }
        }
        // query params
        if ($balance !== null) {
            if('form' === 'form' && is_array($balance)) {
                foreach($balance as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['balance'] = $balance;
            }
        }
        // query params
        if ($staked !== null) {
            if('form' === 'form' && is_array($staked)) {
                foreach($staked as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['staked'] = $staked;
            }
        }




        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation accountsGetDelegators
     *
     * Get account delegators
     *
     * @param  string $address Account address (starting with tz or KT) (required)
     * @param  OneOfAccountTypeParameter $type Filters delegators by type (&#x60;user&#x60;, &#x60;delegate&#x60;, &#x60;contract&#x60;). (optional)
     * @param  OneOfInt64Parameter $balance Filters delegators by balance. (optional)
     * @param  OneOfInt32Parameter $delegation_level Number of items to skip (optional)
     * @param  OneOfSortParameter $sort Sorts delegators by specified field. Supported fields: &#x60;delegationLevel&#x60; (default, desc), &#x60;balance&#x60;. (optional)
     * @param  OneOfOffsetParameter $offset Specifies which or how many items should be skipped (optional)
     * @param  int $limit Maximum number of items to return (optional, default to 100)
     *
     * @throws \Bzzhh\Tzkt\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Bzzhh\Tzkt\Model\Delegator[]
     */
    public function accountsGetDelegators($address, $type = null, $balance = null, $delegation_level = null, $sort = null, $offset = null, $limit = 100)
    {
        list($response) = $this->accountsGetDelegatorsWithHttpInfo($address, $type, $balance, $delegation_level, $sort, $offset, $limit);
        return $response;
    }

    /**
     * Operation accountsGetDelegatorsWithHttpInfo
     *
     * Get account delegators
     *
     * @param  string $address Account address (starting with tz or KT) (required)
     * @param  OneOfAccountTypeParameter $type Filters delegators by type (&#x60;user&#x60;, &#x60;delegate&#x60;, &#x60;contract&#x60;). (optional)
     * @param  OneOfInt64Parameter $balance Filters delegators by balance. (optional)
     * @param  OneOfInt32Parameter $delegation_level Number of items to skip (optional)
     * @param  OneOfSortParameter $sort Sorts delegators by specified field. Supported fields: &#x60;delegationLevel&#x60; (default, desc), &#x60;balance&#x60;. (optional)
     * @param  OneOfOffsetParameter $offset Specifies which or how many items should be skipped (optional)
     * @param  int $limit Maximum number of items to return (optional, default to 100)
     *
     * @throws \Bzzhh\Tzkt\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Bzzhh\Tzkt\Model\Delegator[], HTTP status code, HTTP response headers (array of strings)
     */
    public function accountsGetDelegatorsWithHttpInfo($address, $type = null, $balance = null, $delegation_level = null, $sort = null, $offset = null, $limit = 100)
    {
        $request = $this->accountsGetDelegatorsRequest($address, $type, $balance, $delegation_level, $sort, $offset, $limit);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Bzzhh\Tzkt\Model\Delegator[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bzzhh\Tzkt\Model\Delegator[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Bzzhh\Tzkt\Model\Delegator[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bzzhh\Tzkt\Model\Delegator[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation accountsGetDelegatorsAsync
     *
     * Get account delegators
     *
     * @param  string $address Account address (starting with tz or KT) (required)
     * @param  OneOfAccountTypeParameter $type Filters delegators by type (&#x60;user&#x60;, &#x60;delegate&#x60;, &#x60;contract&#x60;). (optional)
     * @param  OneOfInt64Parameter $balance Filters delegators by balance. (optional)
     * @param  OneOfInt32Parameter $delegation_level Number of items to skip (optional)
     * @param  OneOfSortParameter $sort Sorts delegators by specified field. Supported fields: &#x60;delegationLevel&#x60; (default, desc), &#x60;balance&#x60;. (optional)
     * @param  OneOfOffsetParameter $offset Specifies which or how many items should be skipped (optional)
     * @param  int $limit Maximum number of items to return (optional, default to 100)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountsGetDelegatorsAsync($address, $type = null, $balance = null, $delegation_level = null, $sort = null, $offset = null, $limit = 100)
    {
        return $this->accountsGetDelegatorsAsyncWithHttpInfo($address, $type, $balance, $delegation_level, $sort, $offset, $limit)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation accountsGetDelegatorsAsyncWithHttpInfo
     *
     * Get account delegators
     *
     * @param  string $address Account address (starting with tz or KT) (required)
     * @param  OneOfAccountTypeParameter $type Filters delegators by type (&#x60;user&#x60;, &#x60;delegate&#x60;, &#x60;contract&#x60;). (optional)
     * @param  OneOfInt64Parameter $balance Filters delegators by balance. (optional)
     * @param  OneOfInt32Parameter $delegation_level Number of items to skip (optional)
     * @param  OneOfSortParameter $sort Sorts delegators by specified field. Supported fields: &#x60;delegationLevel&#x60; (default, desc), &#x60;balance&#x60;. (optional)
     * @param  OneOfOffsetParameter $offset Specifies which or how many items should be skipped (optional)
     * @param  int $limit Maximum number of items to return (optional, default to 100)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountsGetDelegatorsAsyncWithHttpInfo($address, $type = null, $balance = null, $delegation_level = null, $sort = null, $offset = null, $limit = 100)
    {
        $returnType = '\Bzzhh\Tzkt\Model\Delegator[]';
        $request = $this->accountsGetDelegatorsRequest($address, $type, $balance, $delegation_level, $sort, $offset, $limit);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'accountsGetDelegators'
     *
     * @param  string $address Account address (starting with tz or KT) (required)
     * @param  OneOfAccountTypeParameter $type Filters delegators by type (&#x60;user&#x60;, &#x60;delegate&#x60;, &#x60;contract&#x60;). (optional)
     * @param  OneOfInt64Parameter $balance Filters delegators by balance. (optional)
     * @param  OneOfInt32Parameter $delegation_level Number of items to skip (optional)
     * @param  OneOfSortParameter $sort Sorts delegators by specified field. Supported fields: &#x60;delegationLevel&#x60; (default, desc), &#x60;balance&#x60;. (optional)
     * @param  OneOfOffsetParameter $offset Specifies which or how many items should be skipped (optional)
     * @param  int $limit Maximum number of items to return (optional, default to 100)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function accountsGetDelegatorsRequest($address, $type = null, $balance = null, $delegation_level = null, $sort = null, $offset = null, $limit = 100)
    {
        // verify the required parameter 'address' is set
        if ($address === null || (is_array($address) && count($address) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $address when calling accountsGetDelegators'
            );
        }
        if ($limit !== null && $limit > 10000) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling AccountsApi.accountsGetDelegators, must be smaller than or equal to 10000.');
        }
        if ($limit !== null && $limit < 0) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling AccountsApi.accountsGetDelegators, must be bigger than or equal to 0.');
        }


        $resourcePath = '/v1/accounts/{address}/delegators';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($type !== null) {
            if('form' === 'form' && is_array($type)) {
                foreach($type as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['type'] = $type;
            }
        }
        // query params
        if ($balance !== null) {
            if('form' === 'form' && is_array($balance)) {
                foreach($balance as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['balance'] = $balance;
            }
        }
        // query params
        if ($delegation_level !== null) {
            if('form' === 'form' && is_array($delegation_level)) {
                foreach($delegation_level as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['delegationLevel'] = $delegation_level;
            }
        }
        // query params
        if ($sort !== null) {
            if('form' === 'form' && is_array($sort)) {
                foreach($sort as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['sort'] = $sort;
            }
        }
        // query params
        if ($offset !== null) {
            if('form' === 'form' && is_array($offset)) {
                foreach($offset as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['offset'] = $offset;
            }
        }
        // query params
        if ($limit !== null) {
            if('form' === 'form' && is_array($limit)) {
                foreach($limit as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['limit'] = $limit;
            }
        }


        // path params
        if ($address !== null) {
            $resourcePath = str_replace(
                '{' . 'address' . '}',
                ObjectSerializer::toPathValue($address),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation accountsGetMetadata
     *
     * Get account metadata
     *
     * @param  string $address Account address (starting with tz or KT) (required)
     *
     * @throws \Bzzhh\Tzkt\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Bzzhh\Tzkt\Model\AccountMetadata
     */
    public function accountsGetMetadata($address)
    {
        list($response) = $this->accountsGetMetadataWithHttpInfo($address);
        return $response;
    }

    /**
     * Operation accountsGetMetadataWithHttpInfo
     *
     * Get account metadata
     *
     * @param  string $address Account address (starting with tz or KT) (required)
     *
     * @throws \Bzzhh\Tzkt\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Bzzhh\Tzkt\Model\AccountMetadata, HTTP status code, HTTP response headers (array of strings)
     */
    public function accountsGetMetadataWithHttpInfo($address)
    {
        $request = $this->accountsGetMetadataRequest($address);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Bzzhh\Tzkt\Model\AccountMetadata' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bzzhh\Tzkt\Model\AccountMetadata', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Bzzhh\Tzkt\Model\AccountMetadata';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bzzhh\Tzkt\Model\AccountMetadata',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation accountsGetMetadataAsync
     *
     * Get account metadata
     *
     * @param  string $address Account address (starting with tz or KT) (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountsGetMetadataAsync($address)
    {
        return $this->accountsGetMetadataAsyncWithHttpInfo($address)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation accountsGetMetadataAsyncWithHttpInfo
     *
     * Get account metadata
     *
     * @param  string $address Account address (starting with tz or KT) (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountsGetMetadataAsyncWithHttpInfo($address)
    {
        $returnType = '\Bzzhh\Tzkt\Model\AccountMetadata';
        $request = $this->accountsGetMetadataRequest($address);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'accountsGetMetadata'
     *
     * @param  string $address Account address (starting with tz or KT) (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function accountsGetMetadataRequest($address)
    {
        // verify the required parameter 'address' is set
        if ($address === null || (is_array($address) && count($address) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $address when calling accountsGetMetadata'
            );
        }

        $resourcePath = '/v1/accounts/{address}/metadata';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($address !== null) {
            $resourcePath = str_replace(
                '{' . 'address' . '}',
                ObjectSerializer::toPathValue($address),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation accountsGetOperations
     *
     * Get account operations
     *
     * @param  string $address Account address (starting with tz or KT) (required)
     * @param  string $type Comma separated list of operation types to return (&#x60;endorsement&#x60;, &#x60;ballot&#x60;, &#x60;proposal&#x60;, &#x60;activation&#x60;, &#x60;double_baking&#x60;, &#x60;double_endorsing&#x60;, &#x60;nonce_revelation&#x60;, &#x60;delegation&#x60;, &#x60;origination&#x60;, &#x60;transaction&#x60;, &#x60;reveal&#x60;, &#x60;migration&#x60;, &#x60;revelation_penalty&#x60;, &#x60;baking&#x60;). If not specified then all operation types except &#x60;endorsement&#x60; and &#x60;baking&#x60; will be returned. (optional)
     * @param  OneOfAccountParameter $initiator Filters transactions, delegations and originations by initiator. Allowed fields for &#x60;.eqx&#x60; mode: none. (optional)
     * @param  OneOfAccountParameter $sender Filters transactions, delegations, originations, reveals and seed nonce revelations by sender. Allowed fields for &#x60;.eqx&#x60; mode: none. (optional)
     * @param  OneOfAccountParameter $target Filters transactions by target. Allowed fields for &#x60;.eqx&#x60; mode: none. (optional)
     * @param  OneOfAccountParameter $prev_delegate Filters delegations by prev delegate. Allowed fields for &#x60;.eqx&#x60; mode: none. (optional)
     * @param  OneOfAccountParameter $new_delegate Filters delegations by new delegate. Allowed fields for &#x60;.eqx&#x60; mode: none. (optional)
     * @param  OneOfAccountParameter $contract_manager Filters origination operations by manager. Allowed fields for &#x60;.eqx&#x60; mode: none. (optional)
     * @param  OneOfAccountParameter $contract_delegate Filters origination operations by delegate. Allowed fields for &#x60;.eqx&#x60; mode: none. (optional)
     * @param  OneOfAccountParameter $originated_contract Filters origination operations by originated contract. Allowed fields for &#x60;.eqx&#x60; mode: none. (optional)
     * @param  OneOfAccountParameter $accuser Filters double baking and double endorsing by accuser. Allowed fields for &#x60;.eqx&#x60; mode: none. (optional)
     * @param  OneOfAccountParameter $offender Filters double baking and double endorsing by offender. Allowed fields for &#x60;.eqx&#x60; mode: none. (optional)
     * @param  OneOfAccountParameter $baker Filters seed nonce revelation operations by baker. Allowed fields for &#x60;.eqx&#x60; mode: none. (optional)
     * @param  OneOfInt32Parameter $level Filters operations by level. (optional)
     * @param  OneOfDateTimeParameter $timestamp Filters operations by timestamp. (optional)
     * @param  OneOfStringParameter $entrypoint Filters transactions by entrypoint called on the target contract. (optional)
     * @param  OneOfJsonParameter $parameter Filters transactions by parameter value. Note, this query parameter supports the following format: &#x60;?parameter{.path?}{.mode?}&#x3D;...&#x60;,             so you can specify a path to a particular field to filter by, for example: &#x60;?parameter.token_id&#x3D;...&#x60; or &#x60;?parameter.sigs.0.ne&#x3D;...&#x60;. (optional)
     * @param  OneOfStringParameter $parameters **DEPRECATED**. Use &#x60;entrypoint&#x60; and &#x60;parameter&#x60; instead. (optional)
     * @param  OneOfBoolParameter $has_internals Filters transactions by presence of internal operations. (optional)
     * @param  OneOfOperationStatusParameter $status Filters transactions, delegations, originations and reveals by operation status (&#x60;applied&#x60;, &#x60;failed&#x60;, &#x60;backtracked&#x60;, &#x60;skipped&#x60;). (optional)
     * @param  OneOfSortMode $sort Sort mode (0 - ascending, 1 - descending) (optional)
     * @param  int $last_id Id of the last operation received, which is used as an offset for pagination (optional)
     * @param  int $limit Number of items to return (optional, default to 100)
     * @param  OneOfMichelineFormat $micheline Format of the parameters, storage and diffs: &#x60;0&#x60; - JSON, &#x60;1&#x60; - JSON string, &#x60;2&#x60; - raw micheline, &#x60;3&#x60; - raw micheline string (optional)
     * @param  OneOfSymbols $quote Comma-separated list of ticker symbols to inject historical prices into response (optional)
     * @param  \DateTime $from **DEPRECATED**. Use &#x60;timestamp.ge&#x3D;&#x60; intead. (optional)
     * @param  \DateTime $to **DEPRECATED**. Use &#x60;timestamp.lt&#x3D;&#x60; intead. (optional)
     *
     * @throws \Bzzhh\Tzkt\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Bzzhh\Tzkt\Model\Operation[]
     */
    public function accountsGetOperations($address, $type = null, $initiator = null, $sender = null, $target = null, $prev_delegate = null, $new_delegate = null, $contract_manager = null, $contract_delegate = null, $originated_contract = null, $accuser = null, $offender = null, $baker = null, $level = null, $timestamp = null, $entrypoint = null, $parameter = null, $parameters = null, $has_internals = null, $status = null, $sort = null, $last_id = null, $limit = 100, $micheline = null, $quote = null, $from = null, $to = null)
    {
        list($response) = $this->accountsGetOperationsWithHttpInfo($address, $type, $initiator, $sender, $target, $prev_delegate, $new_delegate, $contract_manager, $contract_delegate, $originated_contract, $accuser, $offender, $baker, $level, $timestamp, $entrypoint, $parameter, $parameters, $has_internals, $status, $sort, $last_id, $limit, $micheline, $quote, $from, $to);
        return $response;
    }

    /**
     * Operation accountsGetOperationsWithHttpInfo
     *
     * Get account operations
     *
     * @param  string $address Account address (starting with tz or KT) (required)
     * @param  string $type Comma separated list of operation types to return (&#x60;endorsement&#x60;, &#x60;ballot&#x60;, &#x60;proposal&#x60;, &#x60;activation&#x60;, &#x60;double_baking&#x60;, &#x60;double_endorsing&#x60;, &#x60;nonce_revelation&#x60;, &#x60;delegation&#x60;, &#x60;origination&#x60;, &#x60;transaction&#x60;, &#x60;reveal&#x60;, &#x60;migration&#x60;, &#x60;revelation_penalty&#x60;, &#x60;baking&#x60;). If not specified then all operation types except &#x60;endorsement&#x60; and &#x60;baking&#x60; will be returned. (optional)
     * @param  OneOfAccountParameter $initiator Filters transactions, delegations and originations by initiator. Allowed fields for &#x60;.eqx&#x60; mode: none. (optional)
     * @param  OneOfAccountParameter $sender Filters transactions, delegations, originations, reveals and seed nonce revelations by sender. Allowed fields for &#x60;.eqx&#x60; mode: none. (optional)
     * @param  OneOfAccountParameter $target Filters transactions by target. Allowed fields for &#x60;.eqx&#x60; mode: none. (optional)
     * @param  OneOfAccountParameter $prev_delegate Filters delegations by prev delegate. Allowed fields for &#x60;.eqx&#x60; mode: none. (optional)
     * @param  OneOfAccountParameter $new_delegate Filters delegations by new delegate. Allowed fields for &#x60;.eqx&#x60; mode: none. (optional)
     * @param  OneOfAccountParameter $contract_manager Filters origination operations by manager. Allowed fields for &#x60;.eqx&#x60; mode: none. (optional)
     * @param  OneOfAccountParameter $contract_delegate Filters origination operations by delegate. Allowed fields for &#x60;.eqx&#x60; mode: none. (optional)
     * @param  OneOfAccountParameter $originated_contract Filters origination operations by originated contract. Allowed fields for &#x60;.eqx&#x60; mode: none. (optional)
     * @param  OneOfAccountParameter $accuser Filters double baking and double endorsing by accuser. Allowed fields for &#x60;.eqx&#x60; mode: none. (optional)
     * @param  OneOfAccountParameter $offender Filters double baking and double endorsing by offender. Allowed fields for &#x60;.eqx&#x60; mode: none. (optional)
     * @param  OneOfAccountParameter $baker Filters seed nonce revelation operations by baker. Allowed fields for &#x60;.eqx&#x60; mode: none. (optional)
     * @param  OneOfInt32Parameter $level Filters operations by level. (optional)
     * @param  OneOfDateTimeParameter $timestamp Filters operations by timestamp. (optional)
     * @param  OneOfStringParameter $entrypoint Filters transactions by entrypoint called on the target contract. (optional)
     * @param  OneOfJsonParameter $parameter Filters transactions by parameter value. Note, this query parameter supports the following format: &#x60;?parameter{.path?}{.mode?}&#x3D;...&#x60;,             so you can specify a path to a particular field to filter by, for example: &#x60;?parameter.token_id&#x3D;...&#x60; or &#x60;?parameter.sigs.0.ne&#x3D;...&#x60;. (optional)
     * @param  OneOfStringParameter $parameters **DEPRECATED**. Use &#x60;entrypoint&#x60; and &#x60;parameter&#x60; instead. (optional)
     * @param  OneOfBoolParameter $has_internals Filters transactions by presence of internal operations. (optional)
     * @param  OneOfOperationStatusParameter $status Filters transactions, delegations, originations and reveals by operation status (&#x60;applied&#x60;, &#x60;failed&#x60;, &#x60;backtracked&#x60;, &#x60;skipped&#x60;). (optional)
     * @param  OneOfSortMode $sort Sort mode (0 - ascending, 1 - descending) (optional)
     * @param  int $last_id Id of the last operation received, which is used as an offset for pagination (optional)
     * @param  int $limit Number of items to return (optional, default to 100)
     * @param  OneOfMichelineFormat $micheline Format of the parameters, storage and diffs: &#x60;0&#x60; - JSON, &#x60;1&#x60; - JSON string, &#x60;2&#x60; - raw micheline, &#x60;3&#x60; - raw micheline string (optional)
     * @param  OneOfSymbols $quote Comma-separated list of ticker symbols to inject historical prices into response (optional)
     * @param  \DateTime $from **DEPRECATED**. Use &#x60;timestamp.ge&#x3D;&#x60; intead. (optional)
     * @param  \DateTime $to **DEPRECATED**. Use &#x60;timestamp.lt&#x3D;&#x60; intead. (optional)
     *
     * @throws \Bzzhh\Tzkt\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Bzzhh\Tzkt\Model\Operation[], HTTP status code, HTTP response headers (array of strings)
     */
    public function accountsGetOperationsWithHttpInfo($address, $type = null, $initiator = null, $sender = null, $target = null, $prev_delegate = null, $new_delegate = null, $contract_manager = null, $contract_delegate = null, $originated_contract = null, $accuser = null, $offender = null, $baker = null, $level = null, $timestamp = null, $entrypoint = null, $parameter = null, $parameters = null, $has_internals = null, $status = null, $sort = null, $last_id = null, $limit = 100, $micheline = null, $quote = null, $from = null, $to = null)
    {
        $request = $this->accountsGetOperationsRequest($address, $type, $initiator, $sender, $target, $prev_delegate, $new_delegate, $contract_manager, $contract_delegate, $originated_contract, $accuser, $offender, $baker, $level, $timestamp, $entrypoint, $parameter, $parameters, $has_internals, $status, $sort, $last_id, $limit, $micheline, $quote, $from, $to);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Bzzhh\Tzkt\Model\Operation[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bzzhh\Tzkt\Model\Operation[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Bzzhh\Tzkt\Model\Operation[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bzzhh\Tzkt\Model\Operation[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation accountsGetOperationsAsync
     *
     * Get account operations
     *
     * @param  string $address Account address (starting with tz or KT) (required)
     * @param  string $type Comma separated list of operation types to return (&#x60;endorsement&#x60;, &#x60;ballot&#x60;, &#x60;proposal&#x60;, &#x60;activation&#x60;, &#x60;double_baking&#x60;, &#x60;double_endorsing&#x60;, &#x60;nonce_revelation&#x60;, &#x60;delegation&#x60;, &#x60;origination&#x60;, &#x60;transaction&#x60;, &#x60;reveal&#x60;, &#x60;migration&#x60;, &#x60;revelation_penalty&#x60;, &#x60;baking&#x60;). If not specified then all operation types except &#x60;endorsement&#x60; and &#x60;baking&#x60; will be returned. (optional)
     * @param  OneOfAccountParameter $initiator Filters transactions, delegations and originations by initiator. Allowed fields for &#x60;.eqx&#x60; mode: none. (optional)
     * @param  OneOfAccountParameter $sender Filters transactions, delegations, originations, reveals and seed nonce revelations by sender. Allowed fields for &#x60;.eqx&#x60; mode: none. (optional)
     * @param  OneOfAccountParameter $target Filters transactions by target. Allowed fields for &#x60;.eqx&#x60; mode: none. (optional)
     * @param  OneOfAccountParameter $prev_delegate Filters delegations by prev delegate. Allowed fields for &#x60;.eqx&#x60; mode: none. (optional)
     * @param  OneOfAccountParameter $new_delegate Filters delegations by new delegate. Allowed fields for &#x60;.eqx&#x60; mode: none. (optional)
     * @param  OneOfAccountParameter $contract_manager Filters origination operations by manager. Allowed fields for &#x60;.eqx&#x60; mode: none. (optional)
     * @param  OneOfAccountParameter $contract_delegate Filters origination operations by delegate. Allowed fields for &#x60;.eqx&#x60; mode: none. (optional)
     * @param  OneOfAccountParameter $originated_contract Filters origination operations by originated contract. Allowed fields for &#x60;.eqx&#x60; mode: none. (optional)
     * @param  OneOfAccountParameter $accuser Filters double baking and double endorsing by accuser. Allowed fields for &#x60;.eqx&#x60; mode: none. (optional)
     * @param  OneOfAccountParameter $offender Filters double baking and double endorsing by offender. Allowed fields for &#x60;.eqx&#x60; mode: none. (optional)
     * @param  OneOfAccountParameter $baker Filters seed nonce revelation operations by baker. Allowed fields for &#x60;.eqx&#x60; mode: none. (optional)
     * @param  OneOfInt32Parameter $level Filters operations by level. (optional)
     * @param  OneOfDateTimeParameter $timestamp Filters operations by timestamp. (optional)
     * @param  OneOfStringParameter $entrypoint Filters transactions by entrypoint called on the target contract. (optional)
     * @param  OneOfJsonParameter $parameter Filters transactions by parameter value. Note, this query parameter supports the following format: &#x60;?parameter{.path?}{.mode?}&#x3D;...&#x60;,             so you can specify a path to a particular field to filter by, for example: &#x60;?parameter.token_id&#x3D;...&#x60; or &#x60;?parameter.sigs.0.ne&#x3D;...&#x60;. (optional)
     * @param  OneOfStringParameter $parameters **DEPRECATED**. Use &#x60;entrypoint&#x60; and &#x60;parameter&#x60; instead. (optional)
     * @param  OneOfBoolParameter $has_internals Filters transactions by presence of internal operations. (optional)
     * @param  OneOfOperationStatusParameter $status Filters transactions, delegations, originations and reveals by operation status (&#x60;applied&#x60;, &#x60;failed&#x60;, &#x60;backtracked&#x60;, &#x60;skipped&#x60;). (optional)
     * @param  OneOfSortMode $sort Sort mode (0 - ascending, 1 - descending) (optional)
     * @param  int $last_id Id of the last operation received, which is used as an offset for pagination (optional)
     * @param  int $limit Number of items to return (optional, default to 100)
     * @param  OneOfMichelineFormat $micheline Format of the parameters, storage and diffs: &#x60;0&#x60; - JSON, &#x60;1&#x60; - JSON string, &#x60;2&#x60; - raw micheline, &#x60;3&#x60; - raw micheline string (optional)
     * @param  OneOfSymbols $quote Comma-separated list of ticker symbols to inject historical prices into response (optional)
     * @param  \DateTime $from **DEPRECATED**. Use &#x60;timestamp.ge&#x3D;&#x60; intead. (optional)
     * @param  \DateTime $to **DEPRECATED**. Use &#x60;timestamp.lt&#x3D;&#x60; intead. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountsGetOperationsAsync($address, $type = null, $initiator = null, $sender = null, $target = null, $prev_delegate = null, $new_delegate = null, $contract_manager = null, $contract_delegate = null, $originated_contract = null, $accuser = null, $offender = null, $baker = null, $level = null, $timestamp = null, $entrypoint = null, $parameter = null, $parameters = null, $has_internals = null, $status = null, $sort = null, $last_id = null, $limit = 100, $micheline = null, $quote = null, $from = null, $to = null)
    {
        return $this->accountsGetOperationsAsyncWithHttpInfo($address, $type, $initiator, $sender, $target, $prev_delegate, $new_delegate, $contract_manager, $contract_delegate, $originated_contract, $accuser, $offender, $baker, $level, $timestamp, $entrypoint, $parameter, $parameters, $has_internals, $status, $sort, $last_id, $limit, $micheline, $quote, $from, $to)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation accountsGetOperationsAsyncWithHttpInfo
     *
     * Get account operations
     *
     * @param  string $address Account address (starting with tz or KT) (required)
     * @param  string $type Comma separated list of operation types to return (&#x60;endorsement&#x60;, &#x60;ballot&#x60;, &#x60;proposal&#x60;, &#x60;activation&#x60;, &#x60;double_baking&#x60;, &#x60;double_endorsing&#x60;, &#x60;nonce_revelation&#x60;, &#x60;delegation&#x60;, &#x60;origination&#x60;, &#x60;transaction&#x60;, &#x60;reveal&#x60;, &#x60;migration&#x60;, &#x60;revelation_penalty&#x60;, &#x60;baking&#x60;). If not specified then all operation types except &#x60;endorsement&#x60; and &#x60;baking&#x60; will be returned. (optional)
     * @param  OneOfAccountParameter $initiator Filters transactions, delegations and originations by initiator. Allowed fields for &#x60;.eqx&#x60; mode: none. (optional)
     * @param  OneOfAccountParameter $sender Filters transactions, delegations, originations, reveals and seed nonce revelations by sender. Allowed fields for &#x60;.eqx&#x60; mode: none. (optional)
     * @param  OneOfAccountParameter $target Filters transactions by target. Allowed fields for &#x60;.eqx&#x60; mode: none. (optional)
     * @param  OneOfAccountParameter $prev_delegate Filters delegations by prev delegate. Allowed fields for &#x60;.eqx&#x60; mode: none. (optional)
     * @param  OneOfAccountParameter $new_delegate Filters delegations by new delegate. Allowed fields for &#x60;.eqx&#x60; mode: none. (optional)
     * @param  OneOfAccountParameter $contract_manager Filters origination operations by manager. Allowed fields for &#x60;.eqx&#x60; mode: none. (optional)
     * @param  OneOfAccountParameter $contract_delegate Filters origination operations by delegate. Allowed fields for &#x60;.eqx&#x60; mode: none. (optional)
     * @param  OneOfAccountParameter $originated_contract Filters origination operations by originated contract. Allowed fields for &#x60;.eqx&#x60; mode: none. (optional)
     * @param  OneOfAccountParameter $accuser Filters double baking and double endorsing by accuser. Allowed fields for &#x60;.eqx&#x60; mode: none. (optional)
     * @param  OneOfAccountParameter $offender Filters double baking and double endorsing by offender. Allowed fields for &#x60;.eqx&#x60; mode: none. (optional)
     * @param  OneOfAccountParameter $baker Filters seed nonce revelation operations by baker. Allowed fields for &#x60;.eqx&#x60; mode: none. (optional)
     * @param  OneOfInt32Parameter $level Filters operations by level. (optional)
     * @param  OneOfDateTimeParameter $timestamp Filters operations by timestamp. (optional)
     * @param  OneOfStringParameter $entrypoint Filters transactions by entrypoint called on the target contract. (optional)
     * @param  OneOfJsonParameter $parameter Filters transactions by parameter value. Note, this query parameter supports the following format: &#x60;?parameter{.path?}{.mode?}&#x3D;...&#x60;,             so you can specify a path to a particular field to filter by, for example: &#x60;?parameter.token_id&#x3D;...&#x60; or &#x60;?parameter.sigs.0.ne&#x3D;...&#x60;. (optional)
     * @param  OneOfStringParameter $parameters **DEPRECATED**. Use &#x60;entrypoint&#x60; and &#x60;parameter&#x60; instead. (optional)
     * @param  OneOfBoolParameter $has_internals Filters transactions by presence of internal operations. (optional)
     * @param  OneOfOperationStatusParameter $status Filters transactions, delegations, originations and reveals by operation status (&#x60;applied&#x60;, &#x60;failed&#x60;, &#x60;backtracked&#x60;, &#x60;skipped&#x60;). (optional)
     * @param  OneOfSortMode $sort Sort mode (0 - ascending, 1 - descending) (optional)
     * @param  int $last_id Id of the last operation received, which is used as an offset for pagination (optional)
     * @param  int $limit Number of items to return (optional, default to 100)
     * @param  OneOfMichelineFormat $micheline Format of the parameters, storage and diffs: &#x60;0&#x60; - JSON, &#x60;1&#x60; - JSON string, &#x60;2&#x60; - raw micheline, &#x60;3&#x60; - raw micheline string (optional)
     * @param  OneOfSymbols $quote Comma-separated list of ticker symbols to inject historical prices into response (optional)
     * @param  \DateTime $from **DEPRECATED**. Use &#x60;timestamp.ge&#x3D;&#x60; intead. (optional)
     * @param  \DateTime $to **DEPRECATED**. Use &#x60;timestamp.lt&#x3D;&#x60; intead. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountsGetOperationsAsyncWithHttpInfo($address, $type = null, $initiator = null, $sender = null, $target = null, $prev_delegate = null, $new_delegate = null, $contract_manager = null, $contract_delegate = null, $originated_contract = null, $accuser = null, $offender = null, $baker = null, $level = null, $timestamp = null, $entrypoint = null, $parameter = null, $parameters = null, $has_internals = null, $status = null, $sort = null, $last_id = null, $limit = 100, $micheline = null, $quote = null, $from = null, $to = null)
    {
        $returnType = '\Bzzhh\Tzkt\Model\Operation[]';
        $request = $this->accountsGetOperationsRequest($address, $type, $initiator, $sender, $target, $prev_delegate, $new_delegate, $contract_manager, $contract_delegate, $originated_contract, $accuser, $offender, $baker, $level, $timestamp, $entrypoint, $parameter, $parameters, $has_internals, $status, $sort, $last_id, $limit, $micheline, $quote, $from, $to);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'accountsGetOperations'
     *
     * @param  string $address Account address (starting with tz or KT) (required)
     * @param  string $type Comma separated list of operation types to return (&#x60;endorsement&#x60;, &#x60;ballot&#x60;, &#x60;proposal&#x60;, &#x60;activation&#x60;, &#x60;double_baking&#x60;, &#x60;double_endorsing&#x60;, &#x60;nonce_revelation&#x60;, &#x60;delegation&#x60;, &#x60;origination&#x60;, &#x60;transaction&#x60;, &#x60;reveal&#x60;, &#x60;migration&#x60;, &#x60;revelation_penalty&#x60;, &#x60;baking&#x60;). If not specified then all operation types except &#x60;endorsement&#x60; and &#x60;baking&#x60; will be returned. (optional)
     * @param  OneOfAccountParameter $initiator Filters transactions, delegations and originations by initiator. Allowed fields for &#x60;.eqx&#x60; mode: none. (optional)
     * @param  OneOfAccountParameter $sender Filters transactions, delegations, originations, reveals and seed nonce revelations by sender. Allowed fields for &#x60;.eqx&#x60; mode: none. (optional)
     * @param  OneOfAccountParameter $target Filters transactions by target. Allowed fields for &#x60;.eqx&#x60; mode: none. (optional)
     * @param  OneOfAccountParameter $prev_delegate Filters delegations by prev delegate. Allowed fields for &#x60;.eqx&#x60; mode: none. (optional)
     * @param  OneOfAccountParameter $new_delegate Filters delegations by new delegate. Allowed fields for &#x60;.eqx&#x60; mode: none. (optional)
     * @param  OneOfAccountParameter $contract_manager Filters origination operations by manager. Allowed fields for &#x60;.eqx&#x60; mode: none. (optional)
     * @param  OneOfAccountParameter $contract_delegate Filters origination operations by delegate. Allowed fields for &#x60;.eqx&#x60; mode: none. (optional)
     * @param  OneOfAccountParameter $originated_contract Filters origination operations by originated contract. Allowed fields for &#x60;.eqx&#x60; mode: none. (optional)
     * @param  OneOfAccountParameter $accuser Filters double baking and double endorsing by accuser. Allowed fields for &#x60;.eqx&#x60; mode: none. (optional)
     * @param  OneOfAccountParameter $offender Filters double baking and double endorsing by offender. Allowed fields for &#x60;.eqx&#x60; mode: none. (optional)
     * @param  OneOfAccountParameter $baker Filters seed nonce revelation operations by baker. Allowed fields for &#x60;.eqx&#x60; mode: none. (optional)
     * @param  OneOfInt32Parameter $level Filters operations by level. (optional)
     * @param  OneOfDateTimeParameter $timestamp Filters operations by timestamp. (optional)
     * @param  OneOfStringParameter $entrypoint Filters transactions by entrypoint called on the target contract. (optional)
     * @param  OneOfJsonParameter $parameter Filters transactions by parameter value. Note, this query parameter supports the following format: &#x60;?parameter{.path?}{.mode?}&#x3D;...&#x60;,             so you can specify a path to a particular field to filter by, for example: &#x60;?parameter.token_id&#x3D;...&#x60; or &#x60;?parameter.sigs.0.ne&#x3D;...&#x60;. (optional)
     * @param  OneOfStringParameter $parameters **DEPRECATED**. Use &#x60;entrypoint&#x60; and &#x60;parameter&#x60; instead. (optional)
     * @param  OneOfBoolParameter $has_internals Filters transactions by presence of internal operations. (optional)
     * @param  OneOfOperationStatusParameter $status Filters transactions, delegations, originations and reveals by operation status (&#x60;applied&#x60;, &#x60;failed&#x60;, &#x60;backtracked&#x60;, &#x60;skipped&#x60;). (optional)
     * @param  OneOfSortMode $sort Sort mode (0 - ascending, 1 - descending) (optional)
     * @param  int $last_id Id of the last operation received, which is used as an offset for pagination (optional)
     * @param  int $limit Number of items to return (optional, default to 100)
     * @param  OneOfMichelineFormat $micheline Format of the parameters, storage and diffs: &#x60;0&#x60; - JSON, &#x60;1&#x60; - JSON string, &#x60;2&#x60; - raw micheline, &#x60;3&#x60; - raw micheline string (optional)
     * @param  OneOfSymbols $quote Comma-separated list of ticker symbols to inject historical prices into response (optional)
     * @param  \DateTime $from **DEPRECATED**. Use &#x60;timestamp.ge&#x3D;&#x60; intead. (optional)
     * @param  \DateTime $to **DEPRECATED**. Use &#x60;timestamp.lt&#x3D;&#x60; intead. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function accountsGetOperationsRequest($address, $type = null, $initiator = null, $sender = null, $target = null, $prev_delegate = null, $new_delegate = null, $contract_manager = null, $contract_delegate = null, $originated_contract = null, $accuser = null, $offender = null, $baker = null, $level = null, $timestamp = null, $entrypoint = null, $parameter = null, $parameters = null, $has_internals = null, $status = null, $sort = null, $last_id = null, $limit = 100, $micheline = null, $quote = null, $from = null, $to = null)
    {
        // verify the required parameter 'address' is set
        if ($address === null || (is_array($address) && count($address) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $address when calling accountsGetOperations'
            );
        }
        if ($limit !== null && $limit > 1000) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling AccountsApi.accountsGetOperations, must be smaller than or equal to 1000.');
        }
        if ($limit !== null && $limit < 0) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling AccountsApi.accountsGetOperations, must be bigger than or equal to 0.');
        }


        $resourcePath = '/v1/accounts/{address}/operations';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($type !== null) {
            if('form' === 'form' && is_array($type)) {
                foreach($type as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['type'] = $type;
            }
        }
        // query params
        if ($initiator !== null) {
            if('form' === 'form' && is_array($initiator)) {
                foreach($initiator as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['initiator'] = $initiator;
            }
        }
        // query params
        if ($sender !== null) {
            if('form' === 'form' && is_array($sender)) {
                foreach($sender as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['sender'] = $sender;
            }
        }
        // query params
        if ($target !== null) {
            if('form' === 'form' && is_array($target)) {
                foreach($target as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['target'] = $target;
            }
        }
        // query params
        if ($prev_delegate !== null) {
            if('form' === 'form' && is_array($prev_delegate)) {
                foreach($prev_delegate as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['prevDelegate'] = $prev_delegate;
            }
        }
        // query params
        if ($new_delegate !== null) {
            if('form' === 'form' && is_array($new_delegate)) {
                foreach($new_delegate as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['newDelegate'] = $new_delegate;
            }
        }
        // query params
        if ($contract_manager !== null) {
            if('form' === 'form' && is_array($contract_manager)) {
                foreach($contract_manager as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['contractManager'] = $contract_manager;
            }
        }
        // query params
        if ($contract_delegate !== null) {
            if('form' === 'form' && is_array($contract_delegate)) {
                foreach($contract_delegate as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['contractDelegate'] = $contract_delegate;
            }
        }
        // query params
        if ($originated_contract !== null) {
            if('form' === 'form' && is_array($originated_contract)) {
                foreach($originated_contract as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['originatedContract'] = $originated_contract;
            }
        }
        // query params
        if ($accuser !== null) {
            if('form' === 'form' && is_array($accuser)) {
                foreach($accuser as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['accuser'] = $accuser;
            }
        }
        // query params
        if ($offender !== null) {
            if('form' === 'form' && is_array($offender)) {
                foreach($offender as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['offender'] = $offender;
            }
        }
        // query params
        if ($baker !== null) {
            if('form' === 'form' && is_array($baker)) {
                foreach($baker as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['baker'] = $baker;
            }
        }
        // query params
        if ($level !== null) {
            if('form' === 'form' && is_array($level)) {
                foreach($level as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['level'] = $level;
            }
        }
        // query params
        if ($timestamp !== null) {
            if('form' === 'form' && is_array($timestamp)) {
                foreach($timestamp as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['timestamp'] = $timestamp;
            }
        }
        // query params
        if ($entrypoint !== null) {
            if('form' === 'form' && is_array($entrypoint)) {
                foreach($entrypoint as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['entrypoint'] = $entrypoint;
            }
        }
        // query params
        if ($parameter !== null) {
            if('form' === 'form' && is_array($parameter)) {
                foreach($parameter as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['parameter'] = $parameter;
            }
        }
        // query params
        if ($parameters !== null) {
            if('form' === 'form' && is_array($parameters)) {
                foreach($parameters as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['parameters'] = $parameters;
            }
        }
        // query params
        if ($has_internals !== null) {
            if('form' === 'form' && is_array($has_internals)) {
                foreach($has_internals as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['hasInternals'] = $has_internals;
            }
        }
        // query params
        if ($status !== null) {
            if('form' === 'form' && is_array($status)) {
                foreach($status as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['status'] = $status;
            }
        }
        // query params
        if ($sort !== null) {
            if('form' === 'form' && is_array($sort)) {
                foreach($sort as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['sort'] = $sort;
            }
        }
        // query params
        if ($last_id !== null) {
            if('form' === 'form' && is_array($last_id)) {
                foreach($last_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['lastId'] = $last_id;
            }
        }
        // query params
        if ($limit !== null) {
            if('form' === 'form' && is_array($limit)) {
                foreach($limit as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['limit'] = $limit;
            }
        }
        // query params
        if ($micheline !== null) {
            if('form' === 'form' && is_array($micheline)) {
                foreach($micheline as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['micheline'] = $micheline;
            }
        }
        // query params
        if ($quote !== null) {
            if('form' === 'form' && is_array($quote)) {
                foreach($quote as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['quote'] = $quote;
            }
        }
        // query params
        if ($from !== null) {
            if('form' === 'form' && is_array($from)) {
                foreach($from as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['from'] = $from;
            }
        }
        // query params
        if ($to !== null) {
            if('form' === 'form' && is_array($to)) {
                foreach($to as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['to'] = $to;
            }
        }


        // path params
        if ($address !== null) {
            $resourcePath = str_replace(
                '{' . 'address' . '}',
                ObjectSerializer::toPathValue($address),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
