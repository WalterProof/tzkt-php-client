<?php
/**
 * RightsApi
 * PHP version 7.2
 *
 * @category Class
 * @package  Bzzhh\Tzkt
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * TzKT API
 *
 * # Introduction  TzKT Explorer provides a free REST-like API and WebSocket API for accessing detailed Tezos blockchain data and helps developers build more services and applications on top of Tezos. TzKT is an open-source project, so you can easily clone and build it and use it as a self-hosted service to avoid any risks depending on third-party services.  TzKT API is available for the following Tezos networks with the following base URLs:  - Mainnet: `https://api.tzkt.io/` or `https://api.mainnet.tzkt.io/` ([view docs](https://api.tzkt.io)) - Edo2net: `https://api.edo2net.tzkt.io/` ([view docs](https://api.edo2net.tzkt.io)) - Florencenet: `https://api.florencenet.tzkt.io/` ([view docs](https://api.florencenet.tzkt.io))  We also provide a staging environment for testing newest features and pre-updating client applications before deploying to production:  - Mainnet staging: `https://staging.api.tzkt.io/` or `https://staging.api.mainnet.tzkt.io/` ([view docs](https://staging.api.tzkt.io)) - Edo2net staging: `https://staging.api.edo2net.tzkt.io/` ([view docs](https://staging.api.edo2net.tzkt.io))      Feel free to contact us if you have any questions or feature requests. Your feedback really helps us make TzKT better!  - Email: hello@baking-bad.org - Twitter: https://twitter.com/TezosBakingBad - Telegram: [tg://resolve?domain=baking_bad_chat](tg://resolve?domain=baking_bad_chat) - Slack: https://tezos-dev.slack.com/archives/CV5NX7F2L  And don't forget to star TzKT project [on GitHub](https://github.com/baking-bad/tzkt) ;)  # Terms of Use  TzKT API is free for everyone and for both commercial and non-commercial usage.  If your application or service uses the TzKT API in any forms: directly on frontend or indirectly on backend, you should mention that fact on your website or application by placing the label **\"Powered by TzKT API\"** with a direct link to [tzkt.io](https://tzkt.io).   # Rate Limits  There will be no rate limits as long as our servers can handle the load without additional infrastructure costs. However, any apparent abuse will be prevented by setting targeted rate limits.  Check out [Tezos Explorer API Best Practices](https://baking-bad.org/blog/tag/TzKT/) and in particular [how to optimize requests count](https://baking-bad.org/blog/2020/07/29/tezos-explorer-api-tzkt-how-often-to-make-requests/).  ---
 *
 * The version of the OpenAPI document: v1.5
 * Contact: hello@baking-bad.org
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.2.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Bzzhh\Tzkt\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Bzzhh\Tzkt\ApiException;
use Bzzhh\Tzkt\Configuration;
use Bzzhh\Tzkt\HeaderSelector;
use Bzzhh\Tzkt\ObjectSerializer;

/**
 * RightsApi Class Doc Comment
 *
 * @category Class
 * @package  Bzzhh\Tzkt
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class RightsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation rightsGet
     *
     * Get rights
     *
     * @param  OneOfBakingRightTypeParameter $type Filters rights by type (&#x60;baking&#x60;, &#x60;endorsing&#x60;) (optional)
     * @param  OneOfAccountParameter $baker Filters rights by baker (optional)
     * @param  OneOfInt32Parameter $cycle Filters rights by cycle (optional)
     * @param  OneOfInt32Parameter $level Filters rights by level (optional)
     * @param  OneOfInt32NullParameter $slots Filters rights by slots (optional)
     * @param  OneOfInt32NullParameter $priority Filters rights by priority (optional)
     * @param  OneOfBakingRightStatusParameter $status Filters rights by status (&#x60;future&#x60;, &#x60;realized&#x60;, &#x60;uncovered&#x60;, &#x60;missed&#x60;) (optional)
     * @param  OneOfSelectParameter $select Specify comma-separated list of fields to include into response or leave it undefined to return full object. If you select single field, response will be an array of values in both &#x60;.fields&#x60; and &#x60;.values&#x60; modes. (optional)
     * @param  OneOfSortParameter $sort Sorts rights by specified field. Supported fields: &#x60;level&#x60; (default). (optional)
     * @param  OneOfOffsetParameter $offset Specifies which or how many items should be skipped (optional)
     * @param  int $limit Maximum number of items to return (optional, default to 100)
     *
     * @throws \Bzzhh\Tzkt\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Bzzhh\Tzkt\Model\BakingRight[]
     */
    public function rightsGet($type = null, $baker = null, $cycle = null, $level = null, $slots = null, $priority = null, $status = null, $select = null, $sort = null, $offset = null, $limit = 100)
    {
        list($response) = $this->rightsGetWithHttpInfo($type, $baker, $cycle, $level, $slots, $priority, $status, $select, $sort, $offset, $limit);
        return $response;
    }

    /**
     * Operation rightsGetWithHttpInfo
     *
     * Get rights
     *
     * @param  OneOfBakingRightTypeParameter $type Filters rights by type (&#x60;baking&#x60;, &#x60;endorsing&#x60;) (optional)
     * @param  OneOfAccountParameter $baker Filters rights by baker (optional)
     * @param  OneOfInt32Parameter $cycle Filters rights by cycle (optional)
     * @param  OneOfInt32Parameter $level Filters rights by level (optional)
     * @param  OneOfInt32NullParameter $slots Filters rights by slots (optional)
     * @param  OneOfInt32NullParameter $priority Filters rights by priority (optional)
     * @param  OneOfBakingRightStatusParameter $status Filters rights by status (&#x60;future&#x60;, &#x60;realized&#x60;, &#x60;uncovered&#x60;, &#x60;missed&#x60;) (optional)
     * @param  OneOfSelectParameter $select Specify comma-separated list of fields to include into response or leave it undefined to return full object. If you select single field, response will be an array of values in both &#x60;.fields&#x60; and &#x60;.values&#x60; modes. (optional)
     * @param  OneOfSortParameter $sort Sorts rights by specified field. Supported fields: &#x60;level&#x60; (default). (optional)
     * @param  OneOfOffsetParameter $offset Specifies which or how many items should be skipped (optional)
     * @param  int $limit Maximum number of items to return (optional, default to 100)
     *
     * @throws \Bzzhh\Tzkt\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Bzzhh\Tzkt\Model\BakingRight[], HTTP status code, HTTP response headers (array of strings)
     */
    public function rightsGetWithHttpInfo($type = null, $baker = null, $cycle = null, $level = null, $slots = null, $priority = null, $status = null, $select = null, $sort = null, $offset = null, $limit = 100)
    {
        $request = $this->rightsGetRequest($type, $baker, $cycle, $level, $slots, $priority, $status, $select, $sort, $offset, $limit);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Bzzhh\Tzkt\Model\BakingRight[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bzzhh\Tzkt\Model\BakingRight[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Bzzhh\Tzkt\Model\BakingRight[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bzzhh\Tzkt\Model\BakingRight[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation rightsGetAsync
     *
     * Get rights
     *
     * @param  OneOfBakingRightTypeParameter $type Filters rights by type (&#x60;baking&#x60;, &#x60;endorsing&#x60;) (optional)
     * @param  OneOfAccountParameter $baker Filters rights by baker (optional)
     * @param  OneOfInt32Parameter $cycle Filters rights by cycle (optional)
     * @param  OneOfInt32Parameter $level Filters rights by level (optional)
     * @param  OneOfInt32NullParameter $slots Filters rights by slots (optional)
     * @param  OneOfInt32NullParameter $priority Filters rights by priority (optional)
     * @param  OneOfBakingRightStatusParameter $status Filters rights by status (&#x60;future&#x60;, &#x60;realized&#x60;, &#x60;uncovered&#x60;, &#x60;missed&#x60;) (optional)
     * @param  OneOfSelectParameter $select Specify comma-separated list of fields to include into response or leave it undefined to return full object. If you select single field, response will be an array of values in both &#x60;.fields&#x60; and &#x60;.values&#x60; modes. (optional)
     * @param  OneOfSortParameter $sort Sorts rights by specified field. Supported fields: &#x60;level&#x60; (default). (optional)
     * @param  OneOfOffsetParameter $offset Specifies which or how many items should be skipped (optional)
     * @param  int $limit Maximum number of items to return (optional, default to 100)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function rightsGetAsync($type = null, $baker = null, $cycle = null, $level = null, $slots = null, $priority = null, $status = null, $select = null, $sort = null, $offset = null, $limit = 100)
    {
        return $this->rightsGetAsyncWithHttpInfo($type, $baker, $cycle, $level, $slots, $priority, $status, $select, $sort, $offset, $limit)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation rightsGetAsyncWithHttpInfo
     *
     * Get rights
     *
     * @param  OneOfBakingRightTypeParameter $type Filters rights by type (&#x60;baking&#x60;, &#x60;endorsing&#x60;) (optional)
     * @param  OneOfAccountParameter $baker Filters rights by baker (optional)
     * @param  OneOfInt32Parameter $cycle Filters rights by cycle (optional)
     * @param  OneOfInt32Parameter $level Filters rights by level (optional)
     * @param  OneOfInt32NullParameter $slots Filters rights by slots (optional)
     * @param  OneOfInt32NullParameter $priority Filters rights by priority (optional)
     * @param  OneOfBakingRightStatusParameter $status Filters rights by status (&#x60;future&#x60;, &#x60;realized&#x60;, &#x60;uncovered&#x60;, &#x60;missed&#x60;) (optional)
     * @param  OneOfSelectParameter $select Specify comma-separated list of fields to include into response or leave it undefined to return full object. If you select single field, response will be an array of values in both &#x60;.fields&#x60; and &#x60;.values&#x60; modes. (optional)
     * @param  OneOfSortParameter $sort Sorts rights by specified field. Supported fields: &#x60;level&#x60; (default). (optional)
     * @param  OneOfOffsetParameter $offset Specifies which or how many items should be skipped (optional)
     * @param  int $limit Maximum number of items to return (optional, default to 100)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function rightsGetAsyncWithHttpInfo($type = null, $baker = null, $cycle = null, $level = null, $slots = null, $priority = null, $status = null, $select = null, $sort = null, $offset = null, $limit = 100)
    {
        $returnType = '\Bzzhh\Tzkt\Model\BakingRight[]';
        $request = $this->rightsGetRequest($type, $baker, $cycle, $level, $slots, $priority, $status, $select, $sort, $offset, $limit);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'rightsGet'
     *
     * @param  OneOfBakingRightTypeParameter $type Filters rights by type (&#x60;baking&#x60;, &#x60;endorsing&#x60;) (optional)
     * @param  OneOfAccountParameter $baker Filters rights by baker (optional)
     * @param  OneOfInt32Parameter $cycle Filters rights by cycle (optional)
     * @param  OneOfInt32Parameter $level Filters rights by level (optional)
     * @param  OneOfInt32NullParameter $slots Filters rights by slots (optional)
     * @param  OneOfInt32NullParameter $priority Filters rights by priority (optional)
     * @param  OneOfBakingRightStatusParameter $status Filters rights by status (&#x60;future&#x60;, &#x60;realized&#x60;, &#x60;uncovered&#x60;, &#x60;missed&#x60;) (optional)
     * @param  OneOfSelectParameter $select Specify comma-separated list of fields to include into response or leave it undefined to return full object. If you select single field, response will be an array of values in both &#x60;.fields&#x60; and &#x60;.values&#x60; modes. (optional)
     * @param  OneOfSortParameter $sort Sorts rights by specified field. Supported fields: &#x60;level&#x60; (default). (optional)
     * @param  OneOfOffsetParameter $offset Specifies which or how many items should be skipped (optional)
     * @param  int $limit Maximum number of items to return (optional, default to 100)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function rightsGetRequest($type = null, $baker = null, $cycle = null, $level = null, $slots = null, $priority = null, $status = null, $select = null, $sort = null, $offset = null, $limit = 100)
    {
        if ($limit !== null && $limit > 10000) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling RightsApi.rightsGet, must be smaller than or equal to 10000.');
        }
        if ($limit !== null && $limit < 0) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling RightsApi.rightsGet, must be bigger than or equal to 0.');
        }


        $resourcePath = '/v1/rights';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($type !== null) {
            if('form' === 'form' && is_array($type)) {
                foreach($type as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['type'] = $type;
            }
        }
        // query params
        if ($baker !== null) {
            if('form' === 'form' && is_array($baker)) {
                foreach($baker as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['baker'] = $baker;
            }
        }
        // query params
        if ($cycle !== null) {
            if('form' === 'form' && is_array($cycle)) {
                foreach($cycle as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['cycle'] = $cycle;
            }
        }
        // query params
        if ($level !== null) {
            if('form' === 'form' && is_array($level)) {
                foreach($level as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['level'] = $level;
            }
        }
        // query params
        if ($slots !== null) {
            if('form' === 'form' && is_array($slots)) {
                foreach($slots as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['slots'] = $slots;
            }
        }
        // query params
        if ($priority !== null) {
            if('form' === 'form' && is_array($priority)) {
                foreach($priority as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['priority'] = $priority;
            }
        }
        // query params
        if ($status !== null) {
            if('form' === 'form' && is_array($status)) {
                foreach($status as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['status'] = $status;
            }
        }
        // query params
        if ($select !== null) {
            if('form' === 'form' && is_array($select)) {
                foreach($select as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['select'] = $select;
            }
        }
        // query params
        if ($sort !== null) {
            if('form' === 'form' && is_array($sort)) {
                foreach($sort as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['sort'] = $sort;
            }
        }
        // query params
        if ($offset !== null) {
            if('form' === 'form' && is_array($offset)) {
                foreach($offset as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['offset'] = $offset;
            }
        }
        // query params
        if ($limit !== null) {
            if('form' === 'form' && is_array($limit)) {
                foreach($limit as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['limit'] = $limit;
            }
        }




        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation rightsGetCount
     *
     * Get rights count
     *
     * @param  OneOfBakingRightTypeParameter $type Filters rights by type (&#x60;baking&#x60;, &#x60;endorsing&#x60;) (optional)
     * @param  OneOfAccountParameter $baker Filters rights by baker (optional)
     * @param  OneOfInt32Parameter $cycle Filters rights by cycle (optional)
     * @param  OneOfInt32Parameter $level Filters rights by level (optional)
     * @param  OneOfInt32NullParameter $slots Filters rights by slots (optional)
     * @param  OneOfInt32NullParameter $priority Filters rights by priority (optional)
     * @param  OneOfBakingRightStatusParameter $status Filters rights by status (&#x60;future&#x60;, &#x60;realized&#x60;, &#x60;uncovered&#x60;, &#x60;missed&#x60;) (optional)
     *
     * @throws \Bzzhh\Tzkt\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return int
     */
    public function rightsGetCount($type = null, $baker = null, $cycle = null, $level = null, $slots = null, $priority = null, $status = null)
    {
        list($response) = $this->rightsGetCountWithHttpInfo($type, $baker, $cycle, $level, $slots, $priority, $status);
        return $response;
    }

    /**
     * Operation rightsGetCountWithHttpInfo
     *
     * Get rights count
     *
     * @param  OneOfBakingRightTypeParameter $type Filters rights by type (&#x60;baking&#x60;, &#x60;endorsing&#x60;) (optional)
     * @param  OneOfAccountParameter $baker Filters rights by baker (optional)
     * @param  OneOfInt32Parameter $cycle Filters rights by cycle (optional)
     * @param  OneOfInt32Parameter $level Filters rights by level (optional)
     * @param  OneOfInt32NullParameter $slots Filters rights by slots (optional)
     * @param  OneOfInt32NullParameter $priority Filters rights by priority (optional)
     * @param  OneOfBakingRightStatusParameter $status Filters rights by status (&#x60;future&#x60;, &#x60;realized&#x60;, &#x60;uncovered&#x60;, &#x60;missed&#x60;) (optional)
     *
     * @throws \Bzzhh\Tzkt\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of int, HTTP status code, HTTP response headers (array of strings)
     */
    public function rightsGetCountWithHttpInfo($type = null, $baker = null, $cycle = null, $level = null, $slots = null, $priority = null, $status = null)
    {
        $request = $this->rightsGetCountRequest($type, $baker, $cycle, $level, $slots, $priority, $status);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('int' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'int', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'int';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'int',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation rightsGetCountAsync
     *
     * Get rights count
     *
     * @param  OneOfBakingRightTypeParameter $type Filters rights by type (&#x60;baking&#x60;, &#x60;endorsing&#x60;) (optional)
     * @param  OneOfAccountParameter $baker Filters rights by baker (optional)
     * @param  OneOfInt32Parameter $cycle Filters rights by cycle (optional)
     * @param  OneOfInt32Parameter $level Filters rights by level (optional)
     * @param  OneOfInt32NullParameter $slots Filters rights by slots (optional)
     * @param  OneOfInt32NullParameter $priority Filters rights by priority (optional)
     * @param  OneOfBakingRightStatusParameter $status Filters rights by status (&#x60;future&#x60;, &#x60;realized&#x60;, &#x60;uncovered&#x60;, &#x60;missed&#x60;) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function rightsGetCountAsync($type = null, $baker = null, $cycle = null, $level = null, $slots = null, $priority = null, $status = null)
    {
        return $this->rightsGetCountAsyncWithHttpInfo($type, $baker, $cycle, $level, $slots, $priority, $status)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation rightsGetCountAsyncWithHttpInfo
     *
     * Get rights count
     *
     * @param  OneOfBakingRightTypeParameter $type Filters rights by type (&#x60;baking&#x60;, &#x60;endorsing&#x60;) (optional)
     * @param  OneOfAccountParameter $baker Filters rights by baker (optional)
     * @param  OneOfInt32Parameter $cycle Filters rights by cycle (optional)
     * @param  OneOfInt32Parameter $level Filters rights by level (optional)
     * @param  OneOfInt32NullParameter $slots Filters rights by slots (optional)
     * @param  OneOfInt32NullParameter $priority Filters rights by priority (optional)
     * @param  OneOfBakingRightStatusParameter $status Filters rights by status (&#x60;future&#x60;, &#x60;realized&#x60;, &#x60;uncovered&#x60;, &#x60;missed&#x60;) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function rightsGetCountAsyncWithHttpInfo($type = null, $baker = null, $cycle = null, $level = null, $slots = null, $priority = null, $status = null)
    {
        $returnType = 'int';
        $request = $this->rightsGetCountRequest($type, $baker, $cycle, $level, $slots, $priority, $status);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'rightsGetCount'
     *
     * @param  OneOfBakingRightTypeParameter $type Filters rights by type (&#x60;baking&#x60;, &#x60;endorsing&#x60;) (optional)
     * @param  OneOfAccountParameter $baker Filters rights by baker (optional)
     * @param  OneOfInt32Parameter $cycle Filters rights by cycle (optional)
     * @param  OneOfInt32Parameter $level Filters rights by level (optional)
     * @param  OneOfInt32NullParameter $slots Filters rights by slots (optional)
     * @param  OneOfInt32NullParameter $priority Filters rights by priority (optional)
     * @param  OneOfBakingRightStatusParameter $status Filters rights by status (&#x60;future&#x60;, &#x60;realized&#x60;, &#x60;uncovered&#x60;, &#x60;missed&#x60;) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function rightsGetCountRequest($type = null, $baker = null, $cycle = null, $level = null, $slots = null, $priority = null, $status = null)
    {

        $resourcePath = '/v1/rights/count';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($type !== null) {
            if('form' === 'form' && is_array($type)) {
                foreach($type as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['type'] = $type;
            }
        }
        // query params
        if ($baker !== null) {
            if('form' === 'form' && is_array($baker)) {
                foreach($baker as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['baker'] = $baker;
            }
        }
        // query params
        if ($cycle !== null) {
            if('form' === 'form' && is_array($cycle)) {
                foreach($cycle as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['cycle'] = $cycle;
            }
        }
        // query params
        if ($level !== null) {
            if('form' === 'form' && is_array($level)) {
                foreach($level as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['level'] = $level;
            }
        }
        // query params
        if ($slots !== null) {
            if('form' === 'form' && is_array($slots)) {
                foreach($slots as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['slots'] = $slots;
            }
        }
        // query params
        if ($priority !== null) {
            if('form' === 'form' && is_array($priority)) {
                foreach($priority as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['priority'] = $priority;
            }
        }
        // query params
        if ($status !== null) {
            if('form' === 'form' && is_array($status)) {
                foreach($status as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['status'] = $status;
            }
        }




        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
