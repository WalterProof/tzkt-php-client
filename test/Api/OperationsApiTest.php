<?php
/**
 * OperationsApiTest
 * PHP version 7.2
 *
 * @category Class
 * @package  Bzzhh\Tzkt
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * TzKT API
 *
 * # Introduction  TzKT Explorer provides a free REST-like API and WebSocket API for accessing detailed Tezos blockchain data and helps developers build more services and applications on top of Tezos. TzKT is an open-source project, so you can easily clone and build it and use it as a self-hosted service to avoid any risks depending on third-party services.  TzKT API is available for the following Tezos networks with the following base URLs:  - Mainnet: `https://api.tzkt.io/` or `https://api.mainnet.tzkt.io/` ([view docs](https://api.tzkt.io)) - Edo2net: `https://api.edo2net.tzkt.io/` ([view docs](https://api.edo2net.tzkt.io)) - Florencenet: `https://api.florencenet.tzkt.io/` ([view docs](https://api.florencenet.tzkt.io))  We also provide a staging environment for testing newest features and pre-updating client applications before deploying to production:  - Mainnet staging: `https://staging.api.tzkt.io/` or `https://staging.api.mainnet.tzkt.io/` ([view docs](https://staging.api.tzkt.io)) - Edo2net staging: `https://staging.api.edo2net.tzkt.io/` ([view docs](https://staging.api.edo2net.tzkt.io))      Feel free to contact us if you have any questions or feature requests. Your feedback really helps us make TzKT better!  - Email: hello@baking-bad.org - Twitter: https://twitter.com/TezosBakingBad - Telegram: [tg://resolve?domain=baking_bad_chat](tg://resolve?domain=baking_bad_chat) - Slack: https://tezos-dev.slack.com/archives/CV5NX7F2L  And don't forget to star TzKT project [on GitHub](https://github.com/baking-bad/tzkt) ;)  # Terms of Use  TzKT API is free for everyone and for both commercial and non-commercial usage.  If your application or service uses the TzKT API in any forms: directly on frontend or indirectly on backend, you should mention that fact on your website or application by placing the label **\"Powered by TzKT API\"** with a direct link to [tzkt.io](https://tzkt.io).   # Rate Limits  There will be no rate limits as long as our servers can handle the load without additional infrastructure costs. However, any apparent abuse will be prevented by setting targeted rate limits.  Check out [Tezos Explorer API Best Practices](https://baking-bad.org/blog/tag/TzKT/) and in particular [how to optimize requests count](https://baking-bad.org/blog/2020/07/29/tezos-explorer-api-tzkt-how-often-to-make-requests/).  ---
 *
 * The version of the OpenAPI document: v1.5
 * Contact: hello@baking-bad.org
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.2.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Please update the test case below to test the endpoint.
 */

namespace Bzzhh\Tzkt\Test\Api;

use \Bzzhh\Tzkt\Configuration;
use \Bzzhh\Tzkt\ApiException;
use \Bzzhh\Tzkt\ObjectSerializer;
use PHPUnit\Framework\TestCase;

/**
 * OperationsApiTest Class Doc Comment
 *
 * @category Class
 * @package  Bzzhh\Tzkt
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class OperationsApiTest extends TestCase
{

    /**
     * Setup before running any test cases
     */
    public static function setUpBeforeClass(): void
    {
    }

    /**
     * Setup before running each test case
     */
    public function setUp(): void
    {
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown(): void
    {
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass(): void
    {
    }

    /**
     * Test case for operationsGetActivationByHash
     *
     * Get activation by hash.
     *
     */
    public function testOperationsGetActivationByHash()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for operationsGetActivations
     *
     * Get activations.
     *
     */
    public function testOperationsGetActivations()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for operationsGetActivationsCount
     *
     * Get activations count.
     *
     */
    public function testOperationsGetActivationsCount()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for operationsGetBaking
     *
     * Get baking.
     *
     */
    public function testOperationsGetBaking()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for operationsGetBakingCount
     *
     * Get baking count.
     *
     */
    public function testOperationsGetBakingCount()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for operationsGetBallotByHash
     *
     * Get ballot by hash.
     *
     */
    public function testOperationsGetBallotByHash()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for operationsGetBallots
     *
     * Get ballots.
     *
     */
    public function testOperationsGetBallots()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for operationsGetBallotsCount
     *
     * Get ballots count.
     *
     */
    public function testOperationsGetBallotsCount()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for operationsGetByHash
     *
     * Get operations by hash.
     *
     */
    public function testOperationsGetByHash()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for operationsGetByHashCounter
     *
     * Get operations by hash and counter.
     *
     */
    public function testOperationsGetByHashCounter()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for operationsGetByHashCounterNonce
     *
     * Get operations by hash, counter and nonce.
     *
     */
    public function testOperationsGetByHashCounterNonce()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for operationsGetDelegationByHash
     *
     * Get delegation by hash.
     *
     */
    public function testOperationsGetDelegationByHash()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for operationsGetDelegations
     *
     * Get delegations.
     *
     */
    public function testOperationsGetDelegations()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for operationsGetDelegationsCount
     *
     * Get delegations count.
     *
     */
    public function testOperationsGetDelegationsCount()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for operationsGetDoubleBaking
     *
     * Get double baking.
     *
     */
    public function testOperationsGetDoubleBaking()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for operationsGetDoubleBakingByHash
     *
     * Get double baking by hash.
     *
     */
    public function testOperationsGetDoubleBakingByHash()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for operationsGetDoubleBakingCount
     *
     * Get double baking count.
     *
     */
    public function testOperationsGetDoubleBakingCount()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for operationsGetDoubleEndorsing
     *
     * Get double endorsing.
     *
     */
    public function testOperationsGetDoubleEndorsing()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for operationsGetDoubleEndorsingByHash
     *
     * Get double endorsing by hash.
     *
     */
    public function testOperationsGetDoubleEndorsingByHash()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for operationsGetDoubleEndorsingCount
     *
     * Get double endorsing count.
     *
     */
    public function testOperationsGetDoubleEndorsingCount()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for operationsGetEndorsementByHash
     *
     * Get endorsement by hash.
     *
     */
    public function testOperationsGetEndorsementByHash()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for operationsGetEndorsements
     *
     * Get endorsements.
     *
     */
    public function testOperationsGetEndorsements()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for operationsGetEndorsementsCount
     *
     * Get endorsements count.
     *
     */
    public function testOperationsGetEndorsementsCount()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for operationsGetMigrations
     *
     * Get migrations.
     *
     */
    public function testOperationsGetMigrations()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for operationsGetMigrationsCount
     *
     * Get migrations count.
     *
     */
    public function testOperationsGetMigrationsCount()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for operationsGetNonceRevelationByHash
     *
     * Get nonce revelation by hash.
     *
     */
    public function testOperationsGetNonceRevelationByHash()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for operationsGetNonceRevelations
     *
     * Get nonce revelations.
     *
     */
    public function testOperationsGetNonceRevelations()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for operationsGetNonceRevelationsCount
     *
     * Get nonce revelations count.
     *
     */
    public function testOperationsGetNonceRevelationsCount()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for operationsGetOriginationByHash
     *
     * Get origination by hash.
     *
     */
    public function testOperationsGetOriginationByHash()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for operationsGetOriginations
     *
     * Get originations.
     *
     */
    public function testOperationsGetOriginations()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for operationsGetOriginationsCount
     *
     * Get originations count.
     *
     */
    public function testOperationsGetOriginationsCount()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for operationsGetProposalByHash
     *
     * Get proposal by hash.
     *
     */
    public function testOperationsGetProposalByHash()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for operationsGetProposals
     *
     * Get proposals.
     *
     */
    public function testOperationsGetProposals()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for operationsGetProposalsCount
     *
     * Get proposals count.
     *
     */
    public function testOperationsGetProposalsCount()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for operationsGetRevealByHash
     *
     * Get reveal by hash.
     *
     */
    public function testOperationsGetRevealByHash()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for operationsGetReveals
     *
     * Get reveals.
     *
     */
    public function testOperationsGetReveals()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for operationsGetRevealsCount
     *
     * Get reveals count.
     *
     */
    public function testOperationsGetRevealsCount()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for operationsGetRevelationPenalties
     *
     * Get revelation penalties.
     *
     */
    public function testOperationsGetRevelationPenalties()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for operationsGetRevelationPenaltiesCount
     *
     * Get revelation penalties count.
     *
     */
    public function testOperationsGetRevelationPenaltiesCount()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for operationsGetTransactionByHash
     *
     * Get transaction by hash.
     *
     */
    public function testOperationsGetTransactionByHash()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for operationsGetTransactionByHashCounter
     *
     * Get transaction by hash and counter.
     *
     */
    public function testOperationsGetTransactionByHashCounter()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for operationsGetTransactionByHashCounterNonce
     *
     * Get transaction by hash, counter and nonce.
     *
     */
    public function testOperationsGetTransactionByHashCounterNonce()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for operationsGetTransactions
     *
     * Get transactions.
     *
     */
    public function testOperationsGetTransactions()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for operationsGetTransactionsCount
     *
     * Get transactions count.
     *
     */
    public function testOperationsGetTransactionsCount()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }
}
